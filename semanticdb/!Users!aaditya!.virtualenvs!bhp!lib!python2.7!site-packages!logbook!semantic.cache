;; Object logbook/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "logbook/"
  :tables
  (list
    (semanticdb-table "base.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    logbook.base
    ~~~~~~~~~~~~

    Base implementation for logbook.

    :copyright: (c) 2010 by Armin Ronacher, Georg Brandl.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 212])
            ("os" include nil nil [213 222])
            ("sys" include nil nil [223 233])
            ("try" code nil nil [234 331])
            ("threading" include nil nil [331 347])
            ("traceback" include nil nil [348 364])
            ("itertools" include nil nil [365 392])
            ("weakref" include nil nil [393 427])
            ("datetime" include nil nil [428 457])
            ("logbook.helpers" include nil nil [459 589])
            ("try" code nil nil [590 827])
            ("_datetime_factory" variable nil nil [828 863])
            ("set_datetime_format" function
               (:documentation "
    Set the format for the datetime objects created, which are then
    made available as the :py:attr:`LogRecord.time` attribute of
    :py:class:`LogRecord` instances.

    :param datetime_format: Indicates how to generate datetime objects.  Possible values are:

         \"utc\"
             :py:attr:`LogRecord.time` will be a datetime in UTC time zone (but not time zone aware)
         \"local\"
             :py:attr:`LogRecord.time` will be a datetime in local time zone (but not time zone aware)

    This function defaults to creating datetime objects in UTC time,
    using `datetime.utcnow()
    <http://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow>`_,
    so that logbook logs all times in UTC time by default.  This is
    recommended in case you have multiple software modules or
    instances running in different servers in different time zones, as
    it makes it simple and less error prone to correlate logging
    across the different servers.

    On the other hand if all your software modules are running in the
    same time zone and you have to correlate logging with third party
    modules already logging in local time, it can be more convenient
    to have logbook logging to local time instead of UTC.  Local time
    logging can be enabled like this::

       import logbook
       from datetime import datetime
       logbook.set_datetime_format(\"local\")

    "
                :arguments 
                  ( ("datetime_format" variable nil (reparse-symbol function_parameters) [888 903]))                  )
                nil [864 2626])
            ("CRITICAL" variable nil nil [2675 2687])
            ("ERROR" variable nil nil [2688 2697])
            ("WARNING" variable nil nil [2698 2709])
            ("NOTICE" variable nil nil [2710 2720])
            ("INFO" variable nil nil [2721 2729])
            ("DEBUG" variable nil nil [2730 2739])
            ("NOTSET" variable nil nil [2740 2750])
            ("_level_names" variable nil nil [2752 2950])
            ("_reverse_level_names" variable nil nil [2951 3024])
            ("_missing" variable nil nil [3025 3044])
            ("if" code nil nil [3163 3428])
            ("level_name_property" function (:documentation "Returns a property that reflects the level as name from
    the internal level attribute.
    ") nil [3430 3825])
            ("lookup_level" function
               (:documentation "Return the integer representation of a logging level."
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [3844 3849]))                  )
                nil [3827 4110])
            ("get_level_name" function
               (:documentation "Return the textual representation of logging level 'level'."
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [4131 4136]))                  )
                nil [4112 4317])
            ("ExtraDict" type
               (:documentation "A dictionary which returns ``u''`` on missing keys."
                :superclasses ("dict")
                :members 
                  ( ("if" code nil (reparse-symbol indented_block_body) [4409 4676])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4690 4694]))                          )
                        (reparse-symbol indented_block_body) [4681 4733])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4751 4755]))                          )
                        (reparse-symbol indented_block_body) [4738 4865]))                  
                :type "class")
                nil [4319 4865])
            ("_ExceptionCatcher" type
               (:documentation "Helper for exception caught blocks."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5001 5021])
                            ("self" variable nil (reparse-symbol indented_block_body) [5030 5046])
                            ("self" variable nil (reparse-symbol indented_block_body) [5055 5075]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4964 4968])
                            ("logger" variable nil (reparse-symbol function_parameters) [4970 4976])
                            ("args" variable nil (reparse-symbol function_parameters) [4978 4982])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4984 4990]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4951 5076])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5095 5099]))                          )
                        (reparse-symbol indented_block_body) [5081 5122])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5140 5144])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [5146 5154])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [5156 5165])
                            ("tb" variable nil (reparse-symbol function_parameters) [5167 5169]))                          )
                        (reparse-symbol indented_block_body) [5127 5380]))                  
                :type "class")
                nil [4867 5380])
            ("ContextObject" type
               (:documentation "An object that can be bound to a context.  It is managed by the
    :class:`ContextStackManager`"
                :superclasses ("StackedObject")
                :members 
                  ( ("stack_manager" variable nil (reparse-symbol indented_block_body) [5689 5709])
                    ("push_thread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5731 5735]))                          
                        :documentation "Pushes the context object to the thread stack.")
                        (reparse-symbol indented_block_body) [5715 5844])
                    ("pop_thread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5864 5868]))                          
                        :documentation "Pops the context object from the stack.")
                        (reparse-symbol indented_block_body) [5849 6032])
                    ("push_application" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6058 6062]))                          
                        :documentation "Pushes the context object to the application stack.")
                        (reparse-symbol indented_block_body) [6037 6181])
                    ("pop_application" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6206 6210]))                          
                        :documentation "Pops the context object from the stack.")
                        (reparse-symbol indented_block_body) [6186 6379]))                  
                :type "class")
                nil [5382 6379])
            ("NestedSetup" type
               (:documentation "A nested setup can be used to configure multiple handlers
    and processors at once.
    "
                :superclasses ("StackedObject")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6563 6597]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6534 6538])
                            ("objects" variable nil (reparse-symbol function_parameters) [6540 6547]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6521 6598])
                    ("push_application" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6624 6628]))                          )
                        (reparse-symbol indented_block_body) [6603 6699])
                    ("pop_application" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6724 6728]))                          )
                        (reparse-symbol indented_block_body) [6704 6808])
                    ("push_thread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6829 6833]))                          )
                        (reparse-symbol indented_block_body) [6813 6899])
                    ("pop_thread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6919 6923]))                          )
                        (reparse-symbol indented_block_body) [6904 6998]))                  
                :type "class")
                nil [6381 6998])
            ("Processor" type
               (:documentation "Can be pushed to a stack to inject additional information into
    a log record as necessary::

        def inject_ip(record):
            record.extra['ip'] = '127.0.0.1'

        with Processor(inject_ip):
            ...
    "
                :superclasses ("ContextObject")
                :members 
                  ( ("stack_manager" variable nil (reparse-symbol indented_block_body) [7276 7313])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7421 7445]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7332 7336])
                            ("callback" variable nil (reparse-symbol function_parameters) [7338 7346]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7319 7446])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7463 7467])
                            ("record" variable nil (reparse-symbol function_parameters) [7469 7475]))                          
                        :documentation "Called with the log record that should be overridden.  The default
        implementation calls :attr:`callback` if it is not `None`.
        ")
                        (reparse-symbol indented_block_body) [7451 7707]))                  
                :type "class")
                nil [7000 7707])
            ("_InheritedType" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7743 7757])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7776 7780]))                          )
                        (reparse-symbol indented_block_body) [7763 7808])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7828 7832]))                          )
                        (reparse-symbol indented_block_body) [7813 7860]))                  
                :type "class")
                nil [7709 7860])
            ("Inherit" variable nil nil [7860 7886])
            ("Flags" type
               (:documentation "Allows flags to be pushed on a flag stack.  Currently two flags
    are available:

    `errors`
        Can be set to override the current error behaviour.  This value is
        used when logging calls fail.  The default behaviour is spitting
        out the stacktrace to stderr but this can be overridden:

        =================== ==========================================
        ``'silent'``        fail silently
        ``'raise'``         raise a catchable exception
        ``'print'``         print the stacktrace to stderr (default)
        =================== ==========================================

    `introspection`
        Can be used to disable frame introspection.  This can give a
        speedup on production systems if you are using a JIT compiled
        Python interpreter such as pypy.  The default is `True`.

        Note that the default setup of some of the handler (mail for
        instance) includes frame dependent information which will
        not be available when introspection is disabled.

    Example usage::

        with Flags(errors='silent'):
            ...
    "
                :superclasses ("ContextObject")
                :members 
                  ( ("stack_manager" variable nil (reparse-symbol indented_block_body) [9049 9086])
                    ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [9129 9156]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9105 9109])
                            ("flags" variable nil (reparse-symbol function_parameters) [9111 9118]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9092 9157])
                    ("get_flag" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("flag" variable nil (reparse-symbol function_parameters) [9193 9197])
                            ("default" variable nil (reparse-symbol function_parameters) [9199 9206]))                          
                        :documentation "Looks up the current value of a specific flag.")
                        (reparse-symbol indented_block_body) [9162 9473]))                  
                :type "class")
                nil [7889 9473])
            ("_create_log_record" function
               (:documentation "Extra function for reduce because on Python 3 unbound methods
    can no longer be pickled.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [9498 9501])
                    ("dict" variable nil (reparse-symbol function_parameters) [9503 9507]))                  )
                nil [9475 9648])
            ("LogRecord" type
               (:documentation "A LogRecord instance represents an event being logged.

    LogRecord instances are created every time something is logged. They
    contain all the information pertinent to the event being logged. The
    main information passed in is in msg and args
    "
                :superclasses ("object")
                :members 
                  ( ("_pullable_information" variable nil (reparse-symbol indented_block_body) [9946 10170])
                    ("_noned_on_close" variable nil (reparse-symbol indented_block_body) [10175 10242])
                    ("keep_open" variable nil (reparse-symbol indented_block_body) [10382 10399])
                    ("time" variable nil (reparse-symbol indented_block_body) [10573 10584])
                    ("heavy_initialized" variable nil (reparse-symbol indented_block_body) [10699 10724])
                    ("late" variable nil (reparse-symbol indented_block_body) [10807 10819])
                    ("information_pulled" variable nil (reparse-symbol indented_block_body) [10953 10979])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11304 11326])
                            ("self" variable nil (reparse-symbol indented_block_body) [11404 11418])
                            ("self" code nil (reparse-symbol indented_block_body) [11486 11508])
                            ("self" code nil (reparse-symbol indented_block_body) [11573 11599])
                            ("self" variable nil (reparse-symbol indented_block_body) [11659 11677])
                            ("self" variable nil (reparse-symbol indented_block_body) [11855 11879])
                            ("self" variable nil (reparse-symbol indented_block_body) [12052 12087])
                            ("self" variable nil (reparse-symbol indented_block_body) [12351 12369])
                            ("self" variable nil (reparse-symbol indented_block_body) [12420 12439])
                            ("if" code nil (reparse-symbol indented_block_body) [12448 12520])
                            ("self" variable nil (reparse-symbol indented_block_body) [12528 12557]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10998 11002])
                            ("channel" variable nil (reparse-symbol function_parameters) [11004 11011])
                            ("level" variable nil (reparse-symbol function_parameters) [11013 11018])
                            ("msg" variable nil (reparse-symbol function_parameters) [11020 11023])
                            ("args" variable nil (reparse-symbol function_parameters) [11025 11029])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11036 11042])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [11066 11074])
                            ("extra" variable nil (reparse-symbol function_parameters) [11081 11086])
                            ("frame" variable nil (reparse-symbol function_parameters) [11093 11098])
                            ("dispatcher" variable nil (reparse-symbol function_parameters) [11105 11115]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10985 12558])
                    ("heavy_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12578 12582]))                          
                        :documentation "Does the heavy initialization that could be expensive.  This must
        not be called from a higher stack level than when the log record was
        created and the later the initialization happens, the more off the
        date information will be for example.

        This is internally used by the record dispatching system and usually
        something not to worry about.
        ")
                        (reparse-symbol indented_block_body) [12563 13335])
                    ("pull_information" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13361 13365]))                          
                        :documentation "A helper function that pulls all frame-related information into
        the object so that this information is available after the log
        record was closed.
        ")
                        (reparse-symbol indented_block_body) [13340 13894])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13909 13913]))                          
                        :documentation "Closes the log record.  This will set the frame and calling
        frame to `None` and frame-related information will no longer be
        available unless it was pulled in first (:meth:`pull_information`).
        This makes a log record safe for pickling and will clean up
        memory that might be still referenced by the frames.
        ")
                        (reparse-symbol indented_block_body) [13899 14379])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14402 14406])
                            ("protocol" variable nil (reparse-symbol function_parameters) [14408 14416]))                          )
                        (reparse-symbol indented_block_body) [14384 14483])
                    ("to_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14500 14504])
                            ("json_safe" variable nil (reparse-symbol function_parameters) [14506 14515]))                          
                        :documentation "Exports the log record into a dictionary without the information
        that cannot be safely serialized like interpreter frames and
        tracebacks.
        ")
                        (reparse-symbol indented_block_body) [14488 15069])
                    ("from_dict" function
                       (:documentation "Creates a log record from an exported dictionary.  This also
        supports JSON exported dictionaries.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15105 15108])
                            ("d" variable nil (reparse-symbol function_parameters) [15110 15111]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15074 15325])
                    ("update_from_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15351 15355])
                            ("d" variable nil (reparse-symbol function_parameters) [15357 15358]))                          
                        :documentation "Like the :meth:`from_dict` classmethod, but will update the
        instance in place.  Helpful for constructors.
        ")
                        (reparse-symbol indented_block_body) [15330 15794])
                    ("message" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15832 15836]))                          
                        :documentation "The formatted message.")
                        (reparse-symbol indented_block_body) [15799 17846])
                    ("level_name" variable nil (reparse-symbol indented_block_body) [17851 17885])
                    ("calling_frame" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17930 17934]))                          
                        :documentation "The frame in which the record has been created.  This only
        exists for as long the log record is not closed.
        ")
                        (reparse-symbol indented_block_body) [17891 18233])
                    ("func_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18273 18277]))                          
                        :documentation "The name of the function that triggered the log call if
        available.  Requires a frame or that :meth:`pull_information`
        was called before.
        ")
                        (reparse-symbol indented_block_body) [18238 18552])
                    ("module" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18589 18593]))                          
                        :documentation "The name of the module that triggered the log call if
        available.  Requires a frame or that :meth:`pull_information`
        was called before.
        ")
                        (reparse-symbol indented_block_body) [18557 18877])
                    ("filename" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18916 18920]))                          
                        :documentation "The filename of the module in which the record has been created.
        Requires a frame or that :meth:`pull_information` was called before.
        ")
                        (reparse-symbol indented_block_body) [18882 19325])
                    ("lineno" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19362 19366]))                          
                        :documentation "The line number of the file in which the record has been created.
        Requires a frame or that :meth:`pull_information` was called before.
        ")
                        (reparse-symbol indented_block_body) [19330 19625])
                    ("thread" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19662 19666]))                          
                        :documentation "The ident of the thread.  This is evaluated late and means that
        if the log record is passed to another thread, :meth:`pull_information`
        was called in the old thread.
        ")
                        (reparse-symbol indented_block_body) [19630 19908])
                    ("thread_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19950 19954]))                          
                        :documentation "The name of the thread.  This is evaluated late and means that
        if the log record is passed to another thread, :meth:`pull_information`
        was called in the old thread.
        ")
                        (reparse-symbol indented_block_body) [19913 20212])
                    ("process_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20255 20259]))                          
                        :documentation "The name of the process in which the record has been created.")
                        (reparse-symbol indented_block_body) [20217 20782])
                    ("formatted_exception" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20832 20836]))                          
                        :documentation "The formatted exception which caused this record to be created
        in case there was any.
        ")
                        (reparse-symbol indented_block_body) [20787 21165])
                    ("exception_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21210 21214]))                          
                        :documentation "The name of the exception.")
                        (reparse-symbol indented_block_body) [21170 21389])
                    ("exception_shortname" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21432 21436]))                          
                        :documentation "An abbreviated exception name (no import path)")
                        (reparse-symbol indented_block_body) [21394 21551])
                    ("exception_message" function
                       (:parent "dummy"
                        :decorators 
                          ( ("cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21599 21603]))                          
                        :documentation "The message of the exception.")
                        (reparse-symbol indented_block_body) [21556 21867])
                    ("dispatcher" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21901 21905]))                          
                        :documentation "The dispatcher that created the log record.  Might not exist because
        a log record does not have to be created from a logger or other
        dispatcher to be handled by logbook.  If this is set, it will point to
        an object that implements the :class:`~logbook.base.RecordDispatcher`
        interface.
        ")
                        (reparse-symbol indented_block_body) [21872 22327]))                  
                :type "class")
                nil [9650 22327])
            ("LoggerMixin" type
               (:documentation "This mixin class defines and implements the \"usual\" logger
    interface (i.e. the descriptive logging functions).

    Classes using this mixin have to implement a :meth:`!handle` method which
    takes a :class:`~logbook.LogRecord` and passes it along.
    "
                :superclasses ("object")
                :members 
                  ( ("level_name" variable nil (reparse-symbol indented_block_body) [22720 22754])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22770 22774])
                            ("args" variable nil (reparse-symbol function_parameters) [22776 22781])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22783 22791]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to :data:`~logbook.DEBUG`.
        ")
                        (reparse-symbol indented_block_body) [22760 23003])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23017 23021])
                            ("args" variable nil (reparse-symbol function_parameters) [23023 23028])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23030 23038]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to :data:`~logbook.INFO`.
        ")
                        (reparse-symbol indented_block_body) [23008 23247])
                    ("warn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23261 23265])
                            ("args" variable nil (reparse-symbol function_parameters) [23267 23272])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23274 23282]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to :data:`~logbook.WARNING`.  This function has an alias
        named :meth:`warning`.
        ")
                        (reparse-symbol indented_block_body) [23252 23559])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23576 23580])
                            ("args" variable nil (reparse-symbol function_parameters) [23582 23587])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23589 23597]))                          
                        :documentation "Alias for :meth:`warn`.")
                        (reparse-symbol indented_block_body) [23564 23680])
                    ("notice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23696 23700])
                            ("args" variable nil (reparse-symbol function_parameters) [23702 23707])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23709 23717]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to :data:`~logbook.NOTICE`.
        ")
                        (reparse-symbol indented_block_body) [23685 23932])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23947 23951])
                            ("args" variable nil (reparse-symbol function_parameters) [23953 23958])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23960 23968]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to :data:`~logbook.ERROR`.
        ")
                        (reparse-symbol indented_block_body) [23937 24180])
                    ("exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24199 24203])
                            ("args" variable nil (reparse-symbol function_parameters) [24205 24210])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24212 24220]))                          
                        :documentation "Works exactly like :meth:`error` just that the message
        is optional and exception information is recorded.
        ")
                        (reparse-symbol indented_block_body) [24185 24744])
                    ("critical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24762 24766])
                            ("args" variable nil (reparse-symbol function_parameters) [24768 24773])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24775 24783]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to :data:`~logbook.CRITICAL`.
        ")
                        (reparse-symbol indented_block_body) [24749 25004])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25017 25021])
                            ("level" variable nil (reparse-symbol function_parameters) [25023 25028])
                            ("args" variable nil (reparse-symbol function_parameters) [25030 25035])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25037 25045]))                          
                        :documentation "Logs a :class:`~logbook.LogRecord` with the level set
        to the `level` parameter.  Because custom levels are not
        supported by logbook, this method is mainly used to avoid
        the use of reflection (e.g.: :func:`getattr`) for programmatic
        logging.
        ")
                        (reparse-symbol indented_block_body) [25009 25455])
                    ("catch_exceptions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25481 25485])
                            ("args" variable nil (reparse-symbol function_parameters) [25487 25492])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25494 25502]))                          
                        :documentation "A context manager that catches exceptions and calls
        :meth:`exception` for exceptions caught that way.  Example::

            with logger.catch_exceptions():
                execute_code_that_might_fail()
        ")
                        (reparse-symbol indented_block_body) [25460 25867])
                    ("_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25881 25885])
                            ("level" variable nil (reparse-symbol function_parameters) [25887 25892])
                            ("args" variable nil (reparse-symbol function_parameters) [25894 25898])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25900 25906]))                          )
                        (reparse-symbol indented_block_body) [25872 26122]))                  
                :type "class")
                nil [22329 26122])
            ("RecordDispatcher" type
               (:documentation "A record dispatcher is the internal base class that implements
    the logic used by the :class:`~logbook.Logger`.
    "
                :superclasses ("object")
                :members 
                  ( ("suppress_dispatcher" variable nil (reparse-symbol indented_block_body) [26418 26445])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26549 26565])
                            ("self" variable nil (reparse-symbol indented_block_body) [26638 26656])
                            ("self" variable nil (reparse-symbol indented_block_body) [26732 26749])
                            ("self" variable nil (reparse-symbol indented_block_body) [26815 26833]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26464 26468])
                            ("name" variable nil (reparse-symbol function_parameters) [26470 26474])
                            ("level" variable nil (reparse-symbol function_parameters) [26481 26486]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26451 26834])
                    ("disabled" variable nil (reparse-symbol indented_block_body) [26839 26893])
                    ("level" variable nil (reparse-symbol indented_block_body) [26898 26964])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26981 26985])
                            ("record" variable nil (reparse-symbol function_parameters) [26987 26993]))                          
                        :documentation "Call the handlers for the specified record.  This is
        invoked automatically when a record should be handled.
        The default implementation checks if the dispatcher is disabled
        and if the record level is greater than the level of the
        record dispatcher.  In that case it will call the handlers
        (:meth:`call_handlers`).
        ")
                        (reparse-symbol indented_block_body) [26970 27472])
                    ("make_record_and_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27504 27508])
                            ("level" variable nil (reparse-symbol function_parameters) [27510 27515])
                            ("msg" variable nil (reparse-symbol function_parameters) [27517 27520])
                            ("args" variable nil (reparse-symbol function_parameters) [27522 27526])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27528 27534])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [27536 27544])
                            ("extra" variable nil (reparse-symbol function_parameters) [27577 27582]))                          
                        :documentation "Creates a record from some given arguments and heads it
        over to the handling system.
        ")
                        (reparse-symbol indented_block_body) [27477 28924])
                    ("call_handlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28947 28951])
                            ("record" variable nil (reparse-symbol function_parameters) [28953 28959]))                          
                        :documentation "Pass a record to all relevant handlers in the following
        order:

        -   per-dispatcher handlers are handled first
        -   afterwards all the current context handlers in the
            order they were pushed

        Before the first handler is invoked, the record is processed
        (:meth:`process_record`).
        ")
                        (reparse-symbol indented_block_body) [28929 31844])
                    ("process_record" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31868 31872])
                            ("record" variable nil (reparse-symbol function_parameters) [31874 31880]))                          
                        :documentation "Processes the record with all context specific processors.  This
        can be overriden to also inject additional information as necessary
        that can be provided by this record dispatcher.
        ")
                        (reparse-symbol indented_block_body) [31849 32295]))                  
                :type "class")
                nil [26124 32295])
            ("Logger" type
               (:documentation "Instances of the Logger class represent a single logging channel.
    A \"logging channel\" indicates an area of an application. Exactly
    how an \"area\" is defined is up to the application developer.

    Names used by logbook should be descriptive and are intended for user
    display, not for filtering.  Filtering should happen based on the
    context information instead.

    A logger internally is a subclass of a
    :class:`~logbook.base.RecordDispatcher` that implements the actual
    logic.  If you want to implement a custom logger class, have a look
    at the interface of that class as well.
    "
                :superclasses ("RecordDispatcher" "LoggerMixin")
                :type "class")
                nil [32297 32966])
            ("LoggerGroup" type
               (:documentation "A LoggerGroup represents a group of loggers.  It cannot emit log
    messages on its own but it can be used to set the disabled flag and
    log level of all loggers in the group.

    Furthermore the :meth:`process_record` method of the group is called
    by any logger in the group which by default calls into the
    :attr:`processor` callback function.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33624 33641])
                            ("if" code nil (reparse-symbol indented_block_body) [33650 33749])
                            ("self" variable nil (reparse-symbol indented_block_body) [33885 33917])
                            ("self" variable nil (reparse-symbol indented_block_body) [34037 34058])
                            ("self" variable nil (reparse-symbol indented_block_body) [34192 34218]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33386 33390])
                            ("loggers" variable nil (reparse-symbol function_parameters) [33392 33399])
                            ("level" variable nil (reparse-symbol function_parameters) [33406 33411])
                            ("processor" variable nil (reparse-symbol function_parameters) [33420 33429]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33373 34219])
                    ("add_logger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34239 34243])
                            ("logger" variable nil (reparse-symbol function_parameters) [34245 34251]))                          
                        :documentation "Adds a logger to this group.")
                        (reparse-symbol indented_block_body) [34224 34434])
                    ("remove_logger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34457 34461])
                            ("logger" variable nil (reparse-symbol function_parameters) [34463 34469]))                          
                        :documentation "Removes a logger from the group.")
                        (reparse-symbol indented_block_body) [34439 34583])
                    ("process_record" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34607 34611])
                            ("record" variable nil (reparse-symbol function_parameters) [34613 34619]))                          
                        :documentation "Like :meth:`Logger.process_record` but for all loggers in
        the group.  By default this calls into the :attr:`processor`
        function is it's not `None`.
        ")
                        (reparse-symbol indented_block_body) [34588 34883]))                  
                :type "class")
                nil [32968 34883])
            ("_default_dispatcher" variable nil nil [34885 34925])
            ("dispatch_record" function
               (:documentation "Passes a record on to the handlers on the stack.  This is useful when
    log records are created programmatically and already have all the
    information attached and should be dispatched independent of a logger.
    "
                :arguments 
                  ( ("record" variable nil (reparse-symbol function_parameters) [34948 34954]))                  )
                nil [34928 35233])
            ("logbook.handlers" include nil nil [35281 35317]))          
      :file "base.py"
      :pointmax 35318
      :fsize 35317
      :lastmodtime '(21002 34029 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "compat.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    logbook.compat
    ~~~~~~~~~~~~~~

    Backwards compatibility with stdlib's logging package and the
    warnings module.

    :copyright: (c) 2010 by Armin Ronacher, Georg Brandl.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 266])
            ("sys" include nil nil [267 277])
            ("logging" include nil nil [278 292])
            ("warnings" include nil nil [293 308])
            ("logbook" include nil nil [309 323])
            ("datetime" include nil nil [324 359])
            ("logbook.helpers" include nil nil [361 415])
            ("_epoch_ord" variable nil nil [417 458])
            ("redirect_logging" function (:documentation "Permanently redirects logging to the stdlib.  This also
    removes all otherwise registered handlers on root logger of
    the logging system but leaves the other loggers untouched.
    ") nil [461 770])
            ("redirected_logging" type
               (:documentation "Temporarily redirects logging for all threads and reverts
    it later to the old handlers.  Mainly used by the internal
    unittests::

        from logbook.compat import redirected_logging
        with redirected_logging():
            ...
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1096 1140]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1081 1085]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1068 1141])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1156 1160]))                          )
                        (reparse-symbol indented_block_body) [1146 1190])
                    ("end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1203 1207])
                            ("etype" variable nil (reparse-symbol function_parameters) [1209 1214])
                            ("evalue" variable nil (reparse-symbol function_parameters) [1221 1227])
                            ("tb" variable nil (reparse-symbol function_parameters) [1234 1236]))                          )
                        (reparse-symbol indented_block_body) [1195 1297])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [1302 1319])
                    ("__exit__" variable nil (reparse-symbol indented_block_body) [1324 1338]))                  
                :type "class")
                nil [772 1339])
            ("RedirectLoggingHandler" type
               (:documentation "A handler for the stdlib's logging system that redirects
    transparently to logbook.  This is used by the
    :func:`redirect_logging` and :func:`redirected_logging`
    functions.

    If you want to customize the redirecting you can subclass it.
    "
                :superclasses ("logging.Handler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("logging" code nil (reparse-symbol indented_block_body) [1686 1716]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1671 1675]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1658 1717])
                    ("convert_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1740 1744])
                            ("level" variable nil (reparse-symbol function_parameters) [1746 1751]))                          
                        :documentation "Converts a logging level into a logbook level.")
                        (reparse-symbol indented_block_body) [1722 2124])
                    ("find_extra" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2144 2148])
                            ("old_record" variable nil (reparse-symbol function_parameters) [2150 2160]))                          
                        :documentation "Tries to find custom data from the old logging record.  The
        return value is a dictionary that is merged with the log record
        extra dictionaries.
        ")
                        (reparse-symbol indented_block_body) [2129 2748])
                    ("find_caller" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2769 2773])
                            ("old_record" variable nil (reparse-symbol function_parameters) [2775 2785]))                          
                        :documentation "Tries to find the caller that issued the call.")
                        (reparse-symbol indented_block_body) [2753 3145])
                    ("convert_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3167 3171])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [3173 3182]))                          
                        :documentation "Converts the UNIX timestamp of the old record into a
        datetime object as used by logbook.
        ")
                        (reparse-symbol indented_block_body) [3150 3357])
                    ("convert_record" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3381 3385])
                            ("old_record" variable nil (reparse-symbol function_parameters) [3387 3397]))                          
                        :documentation "Converts an old logging record into a logbook log record.")
                        (reparse-symbol indented_block_body) [3362 3938])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3952 3956])
                            ("record" variable nil (reparse-symbol function_parameters) [3958 3964]))                          )
                        (reparse-symbol indented_block_body) [3943 4028]))                  
                :type "class")
                nil [1341 4028])
            ("LoggingHandler" type
               (:documentation "Does the opposite of the :class:`RedirectLoggingHandler`, it sends
    messages from logbook to logging.  Because of that, it's a very bad
    idea to configure both.

    This handler is for logbook and will pass stuff over to a logger
    from the standard library.

    Example usage::

        from logbook.compat import LoggingHandler, warn
        with LoggingHandler():
            warn('This goes to logging')
    "
                :superclasses ("logbook.Handler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("logbook" code nil (reparse-symbol indented_block_body) [4614 4667])
                            ("if" code nil (reparse-symbol indented_block_body) [4676 4830])
                            ("self" variable nil (reparse-symbol indented_block_body) [4838 4858]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4520 4524])
                            ("logger" variable nil (reparse-symbol function_parameters) [4526 4532])
                            ("level" variable nil (reparse-symbol function_parameters) [4539 4544])
                            ("filter" variable nil (reparse-symbol function_parameters) [4561 4567])
                            ("bubble" variable nil (reparse-symbol function_parameters) [4591 4597]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4507 4859])
                    ("get_logger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4879 4883])
                            ("record" variable nil (reparse-symbol function_parameters) [4885 4891]))                          
                        :documentation "Returns the logger to use for this record.  This implementation
        always return :attr:`logger`.
        ")
                        (reparse-symbol indented_block_body) [4864 5046])
                    ("convert_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5069 5073])
                            ("level" variable nil (reparse-symbol function_parameters) [5075 5080]))                          
                        :documentation "Converts a logbook level into a logging level.")
                        (reparse-symbol indented_block_body) [5051 5453])
                    ("convert_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5475 5479])
                            ("dt" variable nil (reparse-symbol function_parameters) [5481 5483]))                          
                        :documentation "Converts a datetime object into a timestamp.")
                        (reparse-symbol indented_block_body) [5458 5821])
                    ("convert_record" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5845 5849])
                            ("old_record" variable nil (reparse-symbol function_parameters) [5851 5861]))                          
                        :documentation "Converts a record from logbook to logging.")
                        (reparse-symbol indented_block_body) [5826 6727])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6741 6745])
                            ("record" variable nil (reparse-symbol function_parameters) [6747 6753]))                          )
                        (reparse-symbol indented_block_body) [6732 6824]))                  
                :type "class")
                nil [4030 6824])
            ("redirect_warnings" function (:documentation "Like :func:`redirected_warnings` but will redirect all warnings
    to the shutdown of the interpreter::

        from logbook.compat import redirect_warnings
        redirect_warnings()
    ") nil [6826 7091])
            ("redirected_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context, and logs warnings using the logbook system.

    The :attr:`~logbook.LogRecord.channel` attribute of the log record will be
    the import name of the warning.

    Example usage::

        from logbook.compat import redirected_warnings
        from warnings import warn

        with redirected_warnings():
            warn(DeprecationWarning('logging should be deprecated'))
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7646 7667]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7631 7635]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7618 7668])
                    ("message_to_unicode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7696 7700])
                            ("message" variable nil (reparse-symbol function_parameters) [7702 7709]))                          )
                        (reparse-symbol indented_block_body) [7673 7848])
                    ("make_record" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7869 7873])
                            ("message" variable nil (reparse-symbol function_parameters) [7875 7882])
                            ("exception" variable nil (reparse-symbol function_parameters) [7884 7893])
                            ("filename" variable nil (reparse-symbol function_parameters) [7895 7903])
                            ("lineno" variable nil (reparse-symbol function_parameters) [7905 7911]))                          )
                        (reparse-symbol indented_block_body) [7853 8341])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8356 8360]))                          )
                        (reparse-symbol indented_block_body) [8346 8961])
                    ("end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8974 8978])
                            ("etype" variable nil (reparse-symbol function_parameters) [8980 8985])
                            ("evalue" variable nil (reparse-symbol function_parameters) [8992 8998])
                            ("tb" variable nil (reparse-symbol function_parameters) [9005 9007]))                          )
                        (reparse-symbol indented_block_body) [8966 9234])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [9239 9256])
                    ("__exit__" variable nil (reparse-symbol indented_block_body) [9261 9275]))                  
                :type "class")
                nil [7093 9276]))          
      :file "compat.py"
      :pointmax 9276
      :fsize 9275
      :lastmodtime '(21002 34029 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "more.py"
      :major-mode 'python-mode
      :tags nil
      :file "more.py"
      :pointmax 12712
      :fsize 12713
      :lastmodtime '(21002 34029 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "helpers.py"
      :file "helpers.py"
      :fsize 8210
      :lastmodtime '(21002 34029 0 0))
    (semanticdb-table "handlers.py"
      :file "handlers.py"
      :fsize 59830
      :lastmodtime '(21002 34029 0 0)))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!logbook!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
