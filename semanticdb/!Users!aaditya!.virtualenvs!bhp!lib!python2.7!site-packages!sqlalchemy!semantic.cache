;; Object sqlalchemy/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sqlalchemy/"
  :tables
  (list
    (semanticdb-table "pool.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Connection pooling for DB-API connections.

Provides a number of connection pool implementations for a variety of
usage scenarios and thread behavior requirements imposed by the
application, DB-API or database itself.

Also provides a DB-API 2.0 connection proxying mechanism allowing
regular DB-API connect() methods to be transparently managed by a
SQLAlchemy connection pool.
\"\"\"" code nil nil [239 624])
            ("time" include nil nil [626 637])
            ("traceback" include nil nil [638 654])
            ("weakref" include nil nil [655 669])
            ("util" include nil nil [678 726])
            ("interfaces" include nil nil [678 726])
            ("events" include nil nil [678 726])
            ("event" include nil nil [678 726])
            ("log" include nil nil [678 726])
            ("exc" include nil nil [678 726])
            ("queue" include nil nil [738 764])
            ("chop_traceback" include nil nil [776 833])
            ("memoized_property" include nil nil [776 833])
            ("threading" include nil nil [776 833])
            ("proxies" variable nil nil [835 847])
            ("manage" function
               (:documentation "Return a proxy for a DB-API module that automatically
    pools connections.

    Given a DB-API 2.0 module and pool management parameters, returns
    a proxy for the module that will automatically pool connections,
    creating new connection pools for each distinct set of connection
    arguments sent to the decorated module's connect() function.

    :param module: a DB-API 2.0 database module

    :param poolclass: the class used by the pool module to provide
      pooling.  Defaults to :class:`.QueuePool`.

    :param \\*\\*params: will be passed through to *poolclass*

    "
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [861 867])
                    ("params" variable nil (reparse-symbol function_parameters) [869 877]))                  )
                nil [850 1607])
            ("clear_managers" function (:documentation "Remove all current DB-API 2.0 managers.

    All pools and connections are disposed.
    ") nil [1609 1817])
            ("reset_rollback" variable nil nil [1818 1864])
            ("reset_commit" variable nil nil [1865 1907])
            ("reset_none" variable nil nil [1908 1946])
            ("_ConnDialect" type
               (:documentation "partial implementation of :class:`.Dialect`
    which provides DBAPI connection methods.

    When a :class:`.Pool` is combined with an :class:`.Engine`,
    the :class:`.Engine` replaces this with its own
    :class:`.Dialect`.

    "
                :superclasses ("object")
                :members 
                  ( ("do_rollback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2241 2245])
                            ("dbapi_connection" variable nil (reparse-symbol function_parameters) [2247 2263]))                          )
                        (reparse-symbol indented_block_body) [2225 2302])
                    ("do_commit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2321 2325])
                            ("dbapi_connection" variable nil (reparse-symbol function_parameters) [2327 2343]))                          )
                        (reparse-symbol indented_block_body) [2307 2380])
                    ("do_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2398 2402])
                            ("dbapi_connection" variable nil (reparse-symbol function_parameters) [2404 2420]))                          )
                        (reparse-symbol indented_block_body) [2385 2456]))                  
                :type "class")
                nil [1948 2456])
            ("Pool" type
               (:documentation "Abstract base class for connection pools."
                :superclasses ("log.Identified")
                :members 
                  ( ("_dialect" variable nil (reparse-symbol indented_block_body) [2542 2567])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Construct a Pool.

        :param creator: a callable function that returns a DB-API
          connection object.  The function will be called with
          parameters.

        :param recycle: If set to non -1, number of seconds between
          connection recycling, which means upon checkout, if this
          timeout is surpassed the connection will be closed and
          replaced with a newly opened connection. Defaults to -1.

        :param logging_name:  String identifier which will be used within
          the \"name\" field of logging records generated within the
          \"sqlalchemy.pool\" logger. Defaults to a hexstring of the object's
          id.

        :param echo: If True, connections being pulled and retrieved
          from the pool will be logged to the standard output, as well
          as pool sizing information.  Echoing can also be achieved by
          enabling logging for the \"sqlalchemy.pool\"
          namespace. Defaults to False.

        :param use_threadlocal: If set to True, repeated calls to
          :meth:`connect` within the same application thread will be
          guaranteed to return the same connection object, if one has
          already been retrieved from the pool and has not been
          returned yet.  Offers a slight performance advantage at the
          cost of individual transactions by default.  The
          :meth:`unique_connection` method is provided to bypass the
          threadlocal behavior installed into :meth:`connect`.

        :param reset_on_return: If true, reset the database state of
          connections returned to the pool.  This is typically a
          ROLLBACK to release locks and transaction resources.
          Disable at your own peril.  Defaults to True.

        :param events: a list of 2-tuples, each of the form
         ``(callable, target)`` which will be passed to event.listen()
         upon construction.   Provided here so that event listeners
         can be assigned via ``create_engine`` before dialect-level
         listeners are applied.

        :param listeners: Deprecated.  A list of
          :class:`~sqlalchemy.interfaces.PoolListener`-like objects or
          dictionaries of callables that receive events when DB-API
          connections are created, checked out and checked in to the
          pool.  This has been superseded by
          :func:`~sqlalchemy.event.listen`.

        \"\"\"" code nil (reparse-symbol indented_block_body) [2917 5348])
                            ("if" code nil (reparse-symbol indented_block_body) [5357 5502])
                            ("log" code nil (reparse-symbol indented_block_body) [5511 5551])
                            ("self" variable nil (reparse-symbol indented_block_body) [5560 5597])
                            ("self" variable nil (reparse-symbol indented_block_body) [5606 5629])
                            ("self" variable nil (reparse-symbol indented_block_body) [5638 5661])
                            ("self" variable nil (reparse-symbol indented_block_body) [5670 5709])
                            ("if" code nil (reparse-symbol indented_block_body) [5718 6212])
                            ("self" variable nil (reparse-symbol indented_block_body) [6221 6237])
                            ("if" code nil (reparse-symbol indented_block_body) [6246 6327])
                            ("if" code nil (reparse-symbol indented_block_body) [6335 6385])
                            ("if" code nil (reparse-symbol indented_block_body) [6393 6489])
                            ("if" code nil (reparse-symbol indented_block_body) [6497 6759]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2586 2590])
                            ("creator" variable nil (reparse-symbol function_parameters) [2612 2619])
                            ("recycle" variable nil (reparse-symbol function_parameters) [2621 2628])
                            ("echo" variable nil (reparse-symbol function_parameters) [2633 2637])
                            ("use_threadlocal" variable nil (reparse-symbol function_parameters) [2664 2679])
                            ("logging_name" variable nil (reparse-symbol function_parameters) [2707 2719])
                            ("reset_on_return" variable nil (reparse-symbol function_parameters) [2746 2761])
                            ("listeners" variable nil (reparse-symbol function_parameters) [2788 2797])
                            ("events" variable nil (reparse-symbol function_parameters) [2824 2830])
                            ("_dispatch" variable nil (reparse-symbol function_parameters) [2857 2866])
                            ("_dialect" variable nil (reparse-symbol function_parameters) [2893 2901]))                          
                        :documentation "
        Construct a Pool.

        :param creator: a callable function that returns a DB-API
          connection object.  The function will be called with
          parameters.

        :param recycle: If set to non -1, number of seconds between
          connection recycling, which means upon checkout, if this
          timeout is surpassed the connection will be closed and
          replaced with a newly opened connection. Defaults to -1.

        :param logging_name:  String identifier which will be used within
          the \"name\" field of logging records generated within the
          \"sqlalchemy.pool\" logger. Defaults to a hexstring of the object's
          id.

        :param echo: If True, connections being pulled and retrieved
          from the pool will be logged to the standard output, as well
          as pool sizing information.  Echoing can also be achieved by
          enabling logging for the \"sqlalchemy.pool\"
          namespace. Defaults to False.

        :param use_threadlocal: If set to True, repeated calls to
          :meth:`connect` within the same application thread will be
          guaranteed to return the same connection object, if one has
          already been retrieved from the pool and has not been
          returned yet.  Offers a slight performance advantage at the
          cost of individual transactions by default.  The
          :meth:`unique_connection` method is provided to bypass the
          threadlocal behavior installed into :meth:`connect`.

        :param reset_on_return: If true, reset the database state of
          connections returned to the pool.  This is typically a
          ROLLBACK to release locks and transaction resources.
          Disable at your own peril.  Defaults to True.

        :param events: a list of 2-tuples, each of the form
         ``(callable, target)`` which will be passed to event.listen()
         upon construction.   Provided here so that event listeners
         can be assigned via ``create_engine`` before dialect-level
         listeners are applied.

        :param listeners: Deprecated.  A list of
          :class:`~sqlalchemy.interfaces.PoolListener`-like objects or
          dictionaries of callables that receive events when DB-API
          connections are created, checked out and checked in to the
          pool.  This has been superseded by
          :func:`~sqlalchemy.event.listen`.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2573 6759])
                    ("dispatch" variable nil (reparse-symbol indented_block_body) [6764 6810])
                    ("_close_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6838 6842])
                            ("connection" variable nil (reparse-symbol function_parameters) [6844 6854]))                          )
                        (reparse-symbol indented_block_body) [6816 7167])
                    ("" code nil (reparse-symbol indented_block_body) [7188 7258])
                    ("add_listener" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7280 7284])
                            ("listener" variable nil (reparse-symbol function_parameters) [7286 7294]))                          
                        :documentation "Add a :class:`.PoolListener`-like object to this pool.

        ``listener`` may be an object that implements some or all of
        PoolListener, or a dictionary of callables containing implementations
        of some or all of the named methods in PoolListener.

        ")
                        (reparse-symbol indented_block_body) [7263 7649])
                    ("unique_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7676 7680]))                          
                        :documentation "Produce a DBAPI connection that is not referenced by any
        thread-local context.

        This method is different from :meth:`.Pool.connect` only if the
        ``use_threadlocal`` flag has been set to ``True``.

        ")
                        (reparse-symbol indented_block_body) [7654 7976])
                    ("_create_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8004 8008]))                          
                        :documentation "Called by subclasses to create a new ConnectionRecord.")
                        (reparse-symbol indented_block_body) [7981 8120])
                    ("recreate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8138 8142]))                          
                        :documentation "Return a new :class:`.Pool`, of the same class as this one
        and configured with identical creation arguments.

        This method is used in conjunection with :meth:`dispose`
        to close out an entire :class:`.Pool` and create a new one in
        its place.

        ")
                        (reparse-symbol indented_block_body) [8125 8478])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8495 8499]))                          
                        :documentation "Dispose of this pool.

        This method leaves the possibility of checked-out connections
        remaining open, as it only affects connections that are
        idle in the pool.

        See also the :meth:`Pool.recreate` method.

        ")
                        (reparse-symbol indented_block_body) [8483 8798])
                    ("_replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8816 8820]))                          
                        :documentation "Dispose + recreate this pool.

        Subclasses may employ special logic to
        move threads waiting on this pool to the
        new one.

        ")
                        (reparse-symbol indented_block_body) [8803 9045])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9062 9066]))                          
                        :documentation "Return a DBAPI connection from the pool.

        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.

        ")
                        (reparse-symbol indented_block_body) [9050 9668])
                    ("_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9690 9694])
                            ("record" variable nil (reparse-symbol function_parameters) [9696 9702]))                          
                        :documentation "Given a _ConnectionRecord, return it to the :class:`.Pool`.

        This method is called when an instrumented DBAPI connection
        has its ``close()`` method called.

        ")
                        (reparse-symbol indented_block_body) [9673 10091])
                    ("_do_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10108 10112]))                          
                        :documentation "Implementation for :meth:`get`, supplied by subclasses.")
                        (reparse-symbol indented_block_body) [10096 10222])
                    ("_do_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10247 10251])
                            ("conn" variable nil (reparse-symbol function_parameters) [10253 10257]))                          
                        :documentation "Implementation for :meth:`return_conn`, supplied by subclasses.")
                        (reparse-symbol indented_block_body) [10227 10375])
                    ("status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10391 10395]))                          )
                        (reparse-symbol indented_block_body) [10380 10434]))                  
                :type "class")
                nil [2457 10434])
            ("_ConnectionRecord" type
               (:superclasses ("object")
                :members 
                  ( ("finalize_callback" variable nil (reparse-symbol indented_block_body) [10473 10497])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10537 10555])
                            ("self" variable nil (reparse-symbol indented_block_body) [10564 10598])
                            ("pool" code nil (reparse-symbol indented_block_body) [10608 10738])
                            ("pool" code nil (reparse-symbol indented_block_body) [10747 10791]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10516 10520])
                            ("pool" variable nil (reparse-symbol function_parameters) [10522 10526]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10503 10792])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10834 10838]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10797 10859])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10874 10878]))                          )
                        (reparse-symbol indented_block_body) [10864 10980])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11000 11004])
                            ("e" variable nil (reparse-symbol function_parameters) [11006 11007]))                          )
                        (reparse-symbol indented_block_body) [10985 11362])
                    ("get_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11386 11390]))                          )
                        (reparse-symbol indented_block_body) [11367 12120])
                    ("__close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12137 12141]))                          )
                        (reparse-symbol indented_block_body) [12125 12199])
                    ("__connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12218 12222]))                          )
                        (reparse-symbol indented_block_body) [12204 12548]))                  
                :type "class")
                nil [10436 12548])
            ("_finalize_fairy" function (:arguments 
              ( ("connection" variable nil (reparse-symbol function_parameters) [12570 12580])
                ("connection_record" variable nil (reparse-symbol function_parameters) [12582 12599])
                ("pool" variable nil (reparse-symbol function_parameters) [12601 12605])
                ("ref" variable nil (reparse-symbol function_parameters) [12607 12610])
                ("echo" variable nil (reparse-symbol function_parameters) [12612 12616]))              ) nil [12550 13990])
            ("_refs" variable nil nil [13992 14005])
            ("_ConnectionFairy" type
               (:documentation "Proxies a DB-API connection and provides return-on-dereference
    support."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14165 14182])
                            ("self" variable nil (reparse-symbol indented_block_body) [14191 14209])
                            ("self" variable nil (reparse-symbol indented_block_body) [14218 14263])
                            ("try" code nil (reparse-symbol indented_block_body) [14272 14849])
                            ("if" code nil (reparse-symbol indented_block_body) [14857 14988]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14144 14148])
                            ("pool" variable nil (reparse-symbol function_parameters) [14150 14154]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14131 14988])
                    ("_logger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15019 15023]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14993 15059])
                    ("is_valid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15091 15095]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15064 15141])
                    ("info" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15183 15187]))                          
                        :documentation "Info dictionary associated with the underlying DBAPI connection
        referred to by this :class:`.ConnectionFairy`, allowing user-defined
        data to be associated with the connection.

        The data here will follow along with the DBAPI connection including
        after it is returned to the connection pool and used again
        in subsequent instances of :class:`.ConnectionFairy`.

        ")
                        (reparse-symbol indented_block_body) [15146 15775])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15795 15799])
                            ("e" variable nil (reparse-symbol function_parameters) [15801 15802]))                          
                        :documentation "Mark this connection as invalidated.

        The connection will be immediately closed.  The containing
        ConnectionRecord will create a new connection when next used.
        ")
                        (reparse-symbol indented_block_body) [15780 16269])
                    ("cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16285 16289])
                            ("args" variable nil (reparse-symbol function_parameters) [16291 16296])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16298 16306]))                          )
                        (reparse-symbol indented_block_body) [16274 16364])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16385 16389])
                            ("key" variable nil (reparse-symbol function_parameters) [16391 16394]))                          )
                        (reparse-symbol indented_block_body) [16369 16442])
                    ("checkout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16460 16464]))                          )
                        (reparse-symbol indented_block_body) [16447 17513])
                    ("detach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17529 17533]))                          
                        :documentation "Separate this connection from its Pool.

        This means that the connection will no longer be returned to the
        pool when closed, and will instead be literally closed.  The
        containing ConnectionRecord is separated from the DB-API connection,
        and will create a new connection when next used.

        Note that any overall connection limiting constraints imposed by a
        Pool implementation may be violated after a detach, as the detached
        connection is removed from the pool's knowledge and control.
        ")
                        (reparse-symbol indented_block_body) [17518 18447])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18462 18466]))                          )
                        (reparse-symbol indented_block_body) [18452 18555])
                    ("_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18571 18575]))                          )
                        (reparse-symbol indented_block_body) [18560 18772]))                  
                :type "class")
                nil [14008 18772])
            ("SingletonThreadPool" type
               (:documentation "A Pool that maintains one connection per thread.

    Maintains one connection per each thread, never moving a connection to a
    thread other than the one which it was created in.

    Options are the same as those of :class:`.Pool`, as well as:

    :param pool_size: The number of threads in which to maintain connections
        at once.  Defaults to five.

    :class:`.SingletonThreadPool` is used by the SQLite dialect
    automatically when a memory-based database is used.
    See :ref:`sqlite_toplevel`.

    "
                :superclasses ("Pool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("kw" variable nil (reparse-symbol indented_block_body) [19399 19427])
                            ("Pool" code nil (reparse-symbol indented_block_body) [19436 19470])
                            ("self" variable nil (reparse-symbol indented_block_body) [19479 19509])
                            ("self" variable nil (reparse-symbol indented_block_body) [19518 19541])
                            ("self" variable nil (reparse-symbol indented_block_body) [19550 19571]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19356 19360])
                            ("creator" variable nil (reparse-symbol function_parameters) [19362 19369])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [19371 19380])
                            ("kw" variable nil (reparse-symbol function_parameters) [19384 19388]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19343 19572])
                    ("recreate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19590 19594]))                          )
                        (reparse-symbol indented_block_body) [19577 20007])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20024 20028]))                          
                        :documentation "Dispose of this pool.")
                        (reparse-symbol indented_block_body) [20012 20412])
                    ("_cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20430 20434]))                          )
                        (reparse-symbol indented_block_body) [20417 20545])
                    ("status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20561 20565]))                          )
                        (reparse-symbol indented_block_body) [20550 20685])
                    ("_do_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20710 20714])
                            ("conn" variable nil (reparse-symbol function_parameters) [20716 20720]))                          )
                        (reparse-symbol indented_block_body) [20690 20736])
                    ("_do_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20753 20757]))                          )
                        (reparse-symbol indented_block_body) [20741 21104]))                  
                :type "class")
                nil [18774 21104])
            ("DummyLock" type
               (:superclasses ("object")
                :members 
                  ( ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21148 21152])
                            ("wait" variable nil (reparse-symbol function_parameters) [21154 21158]))                          )
                        (reparse-symbol indented_block_body) [21136 21186])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21203 21207]))                          )
                        (reparse-symbol indented_block_body) [21191 21223]))                  
                :type "class")
                nil [21106 21223])
            ("QueuePool" type
               (:documentation "A :class:`.Pool` that imposes a limit on the number of open connections.

    :class:`.QueuePool` is the default pooling implementation used for
    all :class:`.Engine` objects, unless the SQLite dialect is in use.

    "
                :superclasses ("Pool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Construct a QueuePool.

        :param creator: a callable function that returns a DB-API
          connection object.  The function will be called with
          parameters.

        :param pool_size: The size of the pool to be maintained,
          defaults to 5. This is the largest number of connections that
          will be kept persistently in the pool. Note that the pool
          begins with no connections; once this number of connections
          is requested, that number of connections will remain.
          ``pool_size`` can be set to 0 to indicate no size limit; to
          disable pooling, use a :class:`~sqlalchemy.pool.NullPool`
          instead.

        :param max_overflow: The maximum overflow size of the
          pool. When the number of checked-out connections reaches the
          size set in pool_size, additional connections will be
          returned up to this limit. When those additional connections
          are returned to the pool, they are disconnected and
          discarded. It follows then that the total number of
          simultaneous connections the pool will allow is pool_size +
          `max_overflow`, and the total number of \"sleeping\"
          connections the pool will allow is pool_size. `max_overflow`
          can be set to -1 to indicate no overflow limit; no limit
          will be placed on the total number of concurrent
          connections. Defaults to 10.

        :param timeout: The number of seconds to wait before giving up
          on returning a connection. Defaults to 30.

        :param recycle: If set to non -1, number of seconds between
          connection recycling, which means upon checkout, if this
          timeout is surpassed the connection will be closed and
          replaced with a newly opened connection. Defaults to -1.

        :param echo: If True, connections being pulled and retrieved
          from the pool will be logged to the standard output, as well
          as pool sizing information.  Echoing can also be achieved by
          enabling logging for the \"sqlalchemy.pool\"
          namespace. Defaults to False.

        :param use_threadlocal: If set to True, repeated calls to
          :meth:`connect` within the same application thread will be
          guaranteed to return the same connection object, if one has
          already been retrieved from the pool and has not been
          returned yet.  Offers a slight performance advantage at the
          cost of individual transactions by default.  The
          :meth:`unique_connection` method is provided to bypass the
          threadlocal behavior installed into :meth:`connect`.

        :param reset_on_return: Determine steps to take on
          connections as they are returned to the pool.
          reset_on_return can have any of these values:

          * 'rollback' - call rollback() on the connection,
            to release locks and transaction resources.
            This is the default value.  The vast majority
            of use cases should leave this value set.
          * True - same as 'rollback', this is here for
            backwards compatibility.
          * 'commit' - call commit() on the connection,
            to release locks and transaction resources.
            A commit here may be desirable for databases that
            cache query plans if a commit is emitted,
            such as Microsoft SQL Server.  However, this
            value is more dangerous than 'rollback' because
            any data changes present on the transaction
            are committed unconditionally.
          * None - don't do anything on the connection.
            This setting should only be made on a database
            that has no transaction support at all,
            namely MySQL MyISAM.   By not doing anything,
            performance can be improved.   This
            setting should **never be selected** for a
            database that supports transactions,
            as it will lead to deadlocks and stale
            state.
          * False - same as None, this is here for
            backwards compatibility.

          .. versionchanged:: 0.7.6
              ``reset_on_return`` accepts values.

        :param listeners: A list of
          :class:`~sqlalchemy.interfaces.PoolListener`-like objects or
          dictionaries of callables that receive events when DB-API
          connections are created, checked out and checked in to the
          pool.

        \"\"\"" code nil (reparse-symbol indented_block_body) [21587 26093])
                            ("Pool" code nil (reparse-symbol indented_block_body) [26102 26136])
                            ("self" variable nil (reparse-symbol indented_block_body) [26145 26185])
                            ("self" code nil (reparse-symbol indented_block_body) [26194 26224])
                            ("self" variable nil (reparse-symbol indented_block_body) [26233 26266])
                            ("self" variable nil (reparse-symbol indented_block_body) [26275 26298])
                            ("DummyLock" code nil (reparse-symbol indented_block_body) [26416 26427]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21498 21502])
                            ("creator" variable nil (reparse-symbol function_parameters) [21504 21511])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [21513 21522])
                            ("max_overflow" variable nil (reparse-symbol function_parameters) [21526 21538])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21543 21550])
                            ("kw" variable nil (reparse-symbol function_parameters) [21572 21576]))                          
                        :documentation "
        Construct a QueuePool.

        :param creator: a callable function that returns a DB-API
          connection object.  The function will be called with
          parameters.

        :param pool_size: The size of the pool to be maintained,
          defaults to 5. This is the largest number of connections that
          will be kept persistently in the pool. Note that the pool
          begins with no connections; once this number of connections
          is requested, that number of connections will remain.
          ``pool_size`` can be set to 0 to indicate no size limit; to
          disable pooling, use a :class:`~sqlalchemy.pool.NullPool`
          instead.

        :param max_overflow: The maximum overflow size of the
          pool. When the number of checked-out connections reaches the
          size set in pool_size, additional connections will be
          returned up to this limit. When those additional connections
          are returned to the pool, they are disconnected and
          discarded. It follows then that the total number of
          simultaneous connections the pool will allow is pool_size +
          `max_overflow`, and the total number of \"sleeping\"
          connections the pool will allow is pool_size. `max_overflow`
          can be set to -1 to indicate no overflow limit; no limit
          will be placed on the total number of concurrent
          connections. Defaults to 10.

        :param timeout: The number of seconds to wait before giving up
          on returning a connection. Defaults to 30.

        :param recycle: If set to non -1, number of seconds between
          connection recycling, which means upon checkout, if this
          timeout is surpassed the connection will be closed and
          replaced with a newly opened connection. Defaults to -1.

        :param echo: If True, connections being pulled and retrieved
          from the pool will be logged to the standard output, as well
          as pool sizing information.  Echoing can also be achieved by
          enabling logging for the \"sqlalchemy.pool\"
          namespace. Defaults to False.

        :param use_threadlocal: If set to True, repeated calls to
          :meth:`connect` within the same application thread will be
          guaranteed to return the same connection object, if one has
          already been retrieved from the pool and has not been
          returned yet.  Offers a slight performance advantage at the
          cost of individual transactions by default.  The
          :meth:`unique_connection` method is provided to bypass the
          threadlocal behavior installed into :meth:`connect`.

        :param reset_on_return: Determine steps to take on
          connections as they are returned to the pool.
          reset_on_return can have any of these values:

          * 'rollback' - call rollback() on the connection,
            to release locks and transaction resources.
            This is the default value.  The vast majority
            of use cases should leave this value set.
          * True - same as 'rollback', this is here for
            backwards compatibility.
          * 'commit' - call commit() on the connection,
            to release locks and transaction resources.
            A commit here may be desirable for databases that
            cache query plans if a commit is emitted,
            such as Microsoft SQL Server.  However, this
            value is more dangerous than 'rollback' because
            any data changes present on the transaction
            are committed unconditionally.
          * None - don't do anything on the connection.
            This setting should only be made on a database
            that has no transaction support at all,
            namely MySQL MyISAM.   By not doing anything,
            performance can be improved.   This
            setting should **never be selected** for a
            database that supports transactions,
            as it will lead to deadlocks and stale
            state.
          * False - same as None, this is here for
            backwards compatibility.

          .. versionchanged:: 0.7.6
              ``reset_on_return`` accepts values.

        :param listeners: A list of
          :class:`~sqlalchemy.interfaces.PoolListener`-like objects or
          dictionaries of callables that receive events when DB-API
          connections are created, checked out and checked in to the
          pool.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21485 26428])
                    ("_do_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26453 26457])
                            ("conn" variable nil (reparse-symbol function_parameters) [26459 26463]))                          )
                        (reparse-symbol indented_block_body) [26433 26738])
                    ("_do_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26755 26759]))                          )
                        (reparse-symbol indented_block_body) [26743 27954])
                    ("recreate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27972 27976]))                          )
                        (reparse-symbol indented_block_body) [27959 28566])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28583 28587]))                          )
                        (reparse-symbol indented_block_body) [28571 28863])
                    ("_replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28881 28885]))                          )
                        (reparse-symbol indented_block_body) [28868 28987])
                    ("status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29003 29007]))                          )
                        (reparse-symbol indented_block_body) [28992 29341])
                    ("size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29355 29359]))                          )
                        (reparse-symbol indented_block_body) [29346 29396])
                    ("checkedin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29415 29419]))                          )
                        (reparse-symbol indented_block_body) [29401 29456])
                    ("overflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29474 29478]))                          )
                        (reparse-symbol indented_block_body) [29461 29511])
                    ("checkedout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29531 29535]))                          )
                        (reparse-symbol indented_block_body) [29516 29610]))                  
                :type "class")
                nil [21225 29610])
            ("NullPool" type
               (:documentation "A Pool which does not pool connections.

    Instead it literally opens and closes the underlying DB-API connection
    per each connection open/close.

    Reconnect-related functions such as ``recycle`` and connection
    invalidation are not supported by this Pool implementation, since
    no connections are held persistently.

    .. versionchanged:: 0.7
        :class:`.NullPool` is used by the SQlite dialect automatically
        when a file-based database is used. See :ref:`sqlite_toplevel`.

    "
                :superclasses ("Pool")
                :members 
                  ( ("status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30170 30174]))                          )
                        (reparse-symbol indented_block_body) [30159 30203])
                    ("_do_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30228 30232])
                            ("conn" variable nil (reparse-symbol function_parameters) [30234 30238]))                          )
                        (reparse-symbol indented_block_body) [30208 30262])
                    ("_do_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30279 30283]))                          )
                        (reparse-symbol indented_block_body) [30267 30327])
                    ("recreate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30345 30349]))                          )
                        (reparse-symbol indented_block_body) [30332 30730])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30747 30751]))                          )
                        (reparse-symbol indented_block_body) [30735 30767]))                  
                :type "class")
                nil [29612 30767])
            ("StaticPool" type
               (:documentation "A Pool of exactly one connection, used for all requests.

    Reconnect-related functions such as ``recycle`` and connection
    invalidation (which is also used to support auto-reconnect) are not
    currently supported by this Pool implementation but may be implemented
    in a future release.

    "
                :superclasses ("Pool")
                :members 
                  ( ("_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31144 31148]))                          
                        :decorators 
                          ( ("memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31111 31182])
                    ("connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31225 31229]))                          
                        :decorators 
                          ( ("memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31187 31271])
                    ("status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31287 31291]))                          )
                        (reparse-symbol indented_block_body) [31276 31322])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31339 31343]))                          )
                        (reparse-symbol indented_block_body) [31327 31444])
                    ("recreate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31462 31466]))                          )
                        (reparse-symbol indented_block_body) [31449 31980])
                    ("_create_connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32008 32012]))                          )
                        (reparse-symbol indented_block_body) [31985 32041])
                    ("_do_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32066 32070])
                            ("conn" variable nil (reparse-symbol function_parameters) [32072 32076]))                          )
                        (reparse-symbol indented_block_body) [32046 32092])
                    ("_do_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32109 32113]))                          )
                        (reparse-symbol indented_block_body) [32097 32147]))                  
                :type "class")
                nil [30769 32147])
            ("AssertionPool" type
               (:documentation "A :class:`.Pool` that allows at most one checked out connection at
    any given time.

    This will raise an exception if more than one connection is checked out
    at a time.  Useful for debugging code that is using more connections
    than desired.

    .. versionchanged:: 0.7
        :class:`.AssertionPool` also logs a traceback of where
        the original connection was checked out, and reports
        this in the assertion error raised.

    "
                :superclasses ("Pool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [32689 32706])
                            ("self" variable nil (reparse-symbol indented_block_body) [32715 32740])
                            ("self" variable nil (reparse-symbol indented_block_body) [32749 32804])
                            ("self" variable nil (reparse-symbol indented_block_body) [32813 32844])
                            ("Pool" code nil (reparse-symbol indented_block_body) [32853 32885]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32661 32665])
                            ("args" variable nil (reparse-symbol function_parameters) [32667 32672])
                            ("kw" variable nil (reparse-symbol function_parameters) [32674 32678]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32648 32886])
                    ("status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32902 32906]))                          )
                        (reparse-symbol indented_block_body) [32891 32940])
                    ("_do_return_conn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32965 32969])
                            ("conn" variable nil (reparse-symbol function_parameters) [32971 32975]))                          )
                        (reparse-symbol indented_block_body) [32945 33146])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33163 33167]))                          )
                        (reparse-symbol indented_block_body) [33151 33258])
                    ("recreate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33276 33280]))                          )
                        (reparse-symbol indented_block_body) [33263 33559])
                    ("_do_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33576 33580]))                          )
                        (reparse-symbol indented_block_body) [33564 34125]))                  
                :type "class")
                nil [32149 34125])
            ("_DBProxy" type
               (:documentation "Layers connection pooling behavior on top of a standard DB-API module.

    Proxies a DB-API 2.0 connect() call to a connection pool keyed to the
    specific connect parameters. Other functions and attributes are delegated
    to the underlying DB-API module.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initializes a new proxy.

        module
          a DB-API 2.0 module

        poolclass
          a Pool class, defaulting to QueuePool

        Other parameters are sent to the Pool object's constructor.

        \"\"\"" code nil (reparse-symbol indented_block_body) [34495 34717])
                            ("self" variable nil (reparse-symbol indented_block_body) [34727 34747])
                            ("self" variable nil (reparse-symbol indented_block_body) [34756 34768])
                            ("self" variable nil (reparse-symbol indented_block_body) [34777 34803])
                            ("self" variable nil (reparse-symbol indented_block_body) [34812 34827])
                            ("self" variable nil (reparse-symbol indented_block_body) [34836 34878]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34445 34449])
                            ("module" variable nil (reparse-symbol function_parameters) [34451 34457])
                            ("poolclass" variable nil (reparse-symbol function_parameters) [34459 34468])
                            ("kw" variable nil (reparse-symbol function_parameters) [34480 34484]))                          
                        :documentation "Initializes a new proxy.

        module
          a DB-API 2.0 module

        poolclass
          a Pool class, defaulting to QueuePool

        Other parameters are sent to the Pool object's constructor.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34432 34879])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34894 34898]))                          )
                        (reparse-symbol indented_block_body) [34884 34971])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34988 34992]))                          )
                        (reparse-symbol indented_block_body) [34976 35016])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35037 35041])
                            ("key" variable nil (reparse-symbol function_parameters) [35043 35046]))                          )
                        (reparse-symbol indented_block_body) [35021 35090])
                    ("get_pool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35108 35112])
                            ("args" variable nil (reparse-symbol function_parameters) [35114 35119])
                            ("kw" variable nil (reparse-symbol function_parameters) [35121 35125]))                          )
                        (reparse-symbol indented_block_body) [35095 35735])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35752 35756])
                            ("args" variable nil (reparse-symbol function_parameters) [35758 35763])
                            ("kw" variable nil (reparse-symbol function_parameters) [35765 35769]))                          
                        :documentation "Activate a connection to the database.

        Connect to the database using this DBProxy's module and the given
        connect arguments.  If the arguments match an existing pool, the
        connection will be returned from the pool's current thread-local
        connection instance, or if there is no thread-local connection
        instance it will be checked out from the set of pooled connections.

        If the pool has no available connections and allows new connections
        to be created, a new database connection will be made.

        ")
                        (reparse-symbol indented_block_body) [35740 36396])
                    ("dispose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36413 36417])
                            ("args" variable nil (reparse-symbol function_parameters) [36419 36424])
                            ("kw" variable nil (reparse-symbol function_parameters) [36426 36430]))                          
                        :documentation "Dispose the pool referenced by the given connect arguments.")
                        (reparse-symbol indented_block_body) [36401 36638])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36658 36662])
                            ("args" variable nil (reparse-symbol function_parameters) [36664 36669])
                            ("kw" variable nil (reparse-symbol function_parameters) [36671 36675]))                          )
                        (reparse-symbol indented_block_body) [36643 36850]))                  
                :type "class")
                nil [34127 36850]))          
      :file "pool.py"
      :pointmax 36850
      :fsize 36849
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax '((NAME 26307 . 26311) (IF 26346 . 26348) (ELSE 26411 . 26415) (FROM 765 . 769) (PERIOD 770 . 771) (FROM 727 . 731) (PERIOD 732 . 733) (FROM 671 . 675) (PERIOD 676 . 677)))
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"defines genericized SQL types, each represented by a subclass of
:class:`~sqlalchemy.types.AbstractType`.  Dialects define further subclasses
of these types.

For more information see the SQLAlchemy documentation on types.

\"\"\"" code nil nil [239 469])
            ("__all__" variable nil nil [470 1067])
            ("datetime" include nil nil [1069 1090])
            ("codecs" include nil nil [1091 1104])
            ("event" include nil nil [1113 1164])
            ("events" include nil nil [1113 1164])
            ("processors" include nil nil [1113 1164])
            ("util" include nil nil [1113 1164])
            ("schema" include nil nil [1113 1164])
            ("exc" include nil nil [1113 1164])
            ("operators" include nil nil [1175 1191])
            ("_DefaultColumnComparator" include nil nil [1213 1244])
            ("pickle" include nil nil [1256 1269])
            ("Visitable" include nil nil [1289 1305])
            ("decimal" include nil nil [1306 1320])
            ("default" variable nil nil [1321 1379])
            ("NoneType" variable nil nil [1381 1402])
            ("if" code nil nil [1403 1436])
            ("AbstractType" type
               (:documentation "Base for all types - not needed except for backwards
    compatibility."
                :superclasses ("Visitable")
                :type "class")
                nil [1438 1551])
            ("TypeEngine" type
               (:documentation "Base for built-in types."
                :superclasses ("AbstractType")
                :members 
                  ( ("Comparator" type
                       (:documentation "Base class for custom comparison operations defined at the
        type level.  See :attr:`.TypeEngine.comparator_factory`.

        The public base class for :class:`.TypeEngine.Comparator`
        is :class:`.ColumnOperators`.

        "
                        :superclasses ("_DefaultColumnComparator")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [1969 1985]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [1944 1948])
                                    ("expr" variable nil (reparse-symbol function_parameters) [1950 1954]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [1931 1986])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [2010 2014]))                                  )
                                (reparse-symbol indented_block_body) [1995 2076]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [1625 2076])
                    ("hashable" variable nil (reparse-symbol indented_block_body) [2081 2096])
                    ("\"\"\"Flag, if False, means values from this type aren't hashable.

    Used by the ORM when uniquing result lists.

    \"\"\"" code nil (reparse-symbol indented_block_body) [2101 2222])
                    ("comparator_factory" variable nil (reparse-symbol indented_block_body) [2228 2259])
                    ("\"\"\"A :class:`.TypeEngine.Comparator` class which will apply
    to operations performed by owning :class:`.ColumnElement` objects.

    The :attr:`.comparator_factory` attribute is a hook consulted by
    the core expression system when column and SQL expression operations
    are performed.   When a :class:`.TypeEngine.Comparator` class is
    associated with this attribute, it allows custom re-definition of
    all existing operators, as well as definition of new operators.
    Existing operators include those provided by Python operator overloading
    such as :meth:`.operators.ColumnOperators.__add__` and
    :meth:`.operators.ColumnOperators.__eq__`,
    those provided as standard
    attributes of :class:`.operators.ColumnOperators` such as
    :meth:`.operators.ColumnOperators.like`
    and :meth:`.operators.ColumnOperators.in_`.

    Rudimentary usage of this hook is allowed through simple subclassing
    of existing types, or alternatively by using :class:`.TypeDecorator`.
    See the documentation section :ref:`types_operators` for examples.

    .. versionadded:: 0.8  The expression system was enhanced to support
      customization of operators on a per-type level.

    \"\"\"" code nil (reparse-symbol indented_block_body) [2264 3468])
                    ("copy_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3489 3493])
                            ("value" variable nil (reparse-symbol function_parameters) [3495 3500]))                          )
                        (reparse-symbol indented_block_body) [3474 3524])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3548 3552])
                            ("dialect" variable nil (reparse-symbol function_parameters) [3554 3561]))                          
                        :documentation "Return a conversion function for processing bind values.

        Returns a callable which will receive a bind parameter value
        as the sole positional argument and will return a value to
        send to the DB-API.

        If processing is not necessary, the method should return ``None``.

        :param dialect: Dialect instance in use.

        ")
                        (reparse-symbol indented_block_body) [3529 3956])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3982 3986])
                            ("dialect" variable nil (reparse-symbol function_parameters) [3988 3995])
                            ("coltype" variable nil (reparse-symbol function_parameters) [3997 4004]))                          
                        :documentation "Return a conversion function for processing result row values.

        Returns a callable which will receive a result row column
        value as the sole positional argument and will return a value
        to return to the user.

        If processing is not necessary, the method should return ``None``.

        :param dialect: Dialect instance in use.

        :param coltype: DBAPI coltype argument received in cursor.description.

        ")
                        (reparse-symbol indented_block_body) [3961 4488])
                    ("column_expression" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4515 4519])
                            ("colexpr" variable nil (reparse-symbol function_parameters) [4521 4528]))                          
                        :documentation "Given a SELECT column expression, return a wrapping SQL expression.

        This is typically a SQL function that wraps a column expression
        as rendered in the columns clause of a SELECT statement.
        It is used for special data types that require
        columns to be wrapped in some special database function in order
        to coerce the value before being sent back to the application.
        It is the SQL analogue of the :meth:`.TypeEngine.result_processor`
        method.

        The method is evaluated at statement compile time, as opposed
        to statement construction time.

        See also:

        :ref:`types_sql_value_processing`

        ")
                        (reparse-symbol indented_block_body) [4493 5245])
                    ("_has_column_expression" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5305 5309]))                          
                        :documentation "memoized boolean, check if column_expression is implemented.

        Allows the method to be skipped for the vast majority of expression
        types that don't use this feature.

        ")
                        (reparse-symbol indented_block_body) [5250 5636])
                    ("bind_expression" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5661 5665])
                            ("bindvalue" variable nil (reparse-symbol function_parameters) [5667 5676]))                          
                        :documentation "\"Given a bind value (i.e. a :class:`.BindParameter` instance),
        return a SQL expression in its place.

        This is typically a SQL function that wraps the existing bound
        parameter within the statement.  It is used for special data types
        that require literals being wrapped in some special database function
        in order to coerce an application-level value into a database-specific
        format.  It is the SQL analogue of the
        :meth:`.TypeEngine.bind_processor` method.

        The method is evaluated at statement compile time, as opposed
        to statement construction time.

        Note that this method, when implemented, should always return
        the exact same structure, without any conditional logic, as it
        may be used in an executemany() call against an arbitrary number
        of bound parameter sets.

        See also:

        :ref:`types_sql_value_processing`

        ")
                        (reparse-symbol indented_block_body) [5641 6655])
                    ("_has_bind_expression" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6713 6717]))                          
                        :documentation "memoized boolean, check if bind_expression is implemented.

        Allows the method to be skipped for the vast majority of expression
        types that don't use this feature.

        ")
                        (reparse-symbol indented_block_body) [6660 7038])
                    ("compare_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7062 7066])
                            ("x" variable nil (reparse-symbol function_parameters) [7068 7069])
                            ("y" variable nil (reparse-symbol function_parameters) [7071 7072]))                          
                        :documentation "Compare two values for equality.")
                        (reparse-symbol indented_block_body) [7043 7145])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7169 7173])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [7175 7180]))                          
                        :documentation "Return the corresponding type object from the underlying DB-API, if
        any.

         This can be useful for calling ``setinputsizes()``, for example.

        ")
                        (reparse-symbol indented_block_body) [7150 7383])
                    ("python_type" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7418 7422]))                          
                        :documentation "Return the Python type object expected to be returned
        by instances of this type, if known.

        Basically, for those types which enforce a return type,
        or are known across the board to do such for all common
        DBAPIs (like ``int`` for example), will return that type.

        If a return type is not defined, raises
        ``NotImplementedError``.

        Note that any type also accommodates NULL in SQL which
        means you can also get back ``None`` from any type
        in practice.

        ")
                        (reparse-symbol indented_block_body) [7388 8005])
                    ("with_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8027 8031])
                            ("type_" variable nil (reparse-symbol function_parameters) [8033 8038])
                            ("dialect_name" variable nil (reparse-symbol function_parameters) [8040 8052]))                          
                        :documentation "Produce a new type object that will utilize the given
        type when applied to the dialect of the given name.

        e.g.::

            from sqlalchemy.types import String
            from sqlalchemy.dialects import mysql

            s = String()

            s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')

        The construction of :meth:`.TypeEngine.with_variant` is always
        from the \"fallback\" type to that which is dialect specific.
        The returned type is an instance of :class:`.Variant`, which
        itself provides a :meth:`~sqlalchemy.types.Variant.with_variant`
        that can be called repeatedly.

        :param type_: a :class:`.TypeEngine` that will be selected
         as a variant from the originating type, when a dialect
         of the given name is in use.
        :param dialect_name: base name of the dialect which uses
         this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)

        .. versionadded:: 0.7.2

        ")
                        (reparse-symbol indented_block_body) [8010 9111])
                    ("_type_affinity" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9163 9167]))                          
                        :documentation "Return a rudimental 'affinity' value expressing the general class
        of type.")
                        (reparse-symbol indented_block_body) [9116 9527])
                    ("dialect_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9549 9553])
                            ("dialect" variable nil (reparse-symbol function_parameters) [9555 9562]))                          
                        :documentation "Return a dialect-specific implementation for this
        :class:`.TypeEngine`.

        ")
                        (reparse-symbol indented_block_body) [9532 9815])
                    ("_cached_bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9847 9851])
                            ("dialect" variable nil (reparse-symbol function_parameters) [9853 9860]))                          
                        :documentation "Return a dialect-specific bind processor for this type.")
                        (reparse-symbol indented_block_body) [9820 10154])
                    ("_cached_result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10188 10192])
                            ("dialect" variable nil (reparse-symbol function_parameters) [10194 10201])
                            ("coltype" variable nil (reparse-symbol function_parameters) [10203 10210]))                          
                        :documentation "Return a dialect-specific result processor for this type.")
                        (reparse-symbol indented_block_body) [10159 10653])
                    ("_dialect_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10676 10680])
                            ("dialect" variable nil (reparse-symbol function_parameters) [10682 10689]))                          
                        :documentation "Return a dialect-specific registry which
        caches a dialect-specific implementation, bind processing
        function, and one or more result processing functions.")
                        (reparse-symbol indented_block_body) [10658 11275])
                    ("_gen_dialect_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11302 11306])
                            ("dialect" variable nil (reparse-symbol function_parameters) [11308 11315]))                          )
                        (reparse-symbol indented_block_body) [11280 11363])
                    ("adapt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11378 11382])
                            ("cls" variable nil (reparse-symbol function_parameters) [11384 11387])
                            ("kw" variable nil (reparse-symbol function_parameters) [11389 11393]))                          
                        :documentation "Produce an \"adapted\" form of this type, given an \"impl\" class
        to work with.

        This method is used internally to associate generic
        types with \"implementation\" types that are specific to a particular
        dialect.
        ")
                        (reparse-symbol indented_block_body) [11368 11711])
                    ("coerce_compared_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11742 11746])
                            ("op" variable nil (reparse-symbol function_parameters) [11748 11750])
                            ("value" variable nil (reparse-symbol function_parameters) [11752 11757]))                          
                        :documentation "Suggest a type for a 'coerced' Python value in an expression.

        Given an operator and value, gives the type a chance
        to return a type which the value should be coerced into.

        The default behavior here is conservative; if the right-hand
        side is already coerced into a SQL type based on its
        Python type, it is usually left alone.

        End-user functionality extension here should generally be via
        :class:`.TypeDecorator`, which provides more liberal behavior in that
        it defaults to coercing the other side of the expression into this
        type, thus applying special Python conversions above and beyond those
        needed by the DBAPI to both ides. It also provides the public method
        :meth:`.TypeDecorator.coerce_compared_value` which is intended for
        end-user customization of this behavior.

        ")
                        (reparse-symbol indented_block_body) [11716 12893])
                    ("_compare_type_affinity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12925 12929])
                            ("other" variable nil (reparse-symbol function_parameters) [12931 12936]))                          )
                        (reparse-symbol indented_block_body) [12898 12998])
                    ("compile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13015 13019])
                            ("dialect" variable nil (reparse-symbol function_parameters) [13021 13028]))                          
                        :documentation "Produce a string-compiled form of this :class:`.TypeEngine`.

        When called with no arguments, uses a \"default\" dialect
        to produce a string result.

        :param dialect: a :class:`.Dialect` instance.

        ")
                        (reparse-symbol indented_block_body) [13003 13503])
                    ("_default_dialect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13543 13547]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13508 13853])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13870 13874]))                          )
                        (reparse-symbol indented_block_body) [13858 14048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Support implementations that were passing arguments\"\"\"" code nil (reparse-symbol indented_block_body) [14117 14174])
                            ("if" code nil (reparse-symbol indented_block_body) [14183 14340]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14085 14089])
                            ("args" variable nil (reparse-symbol function_parameters) [14091 14096])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14098 14106]))                          
                        :documentation "Support implementations that were passing arguments"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14072 14340])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14358 14362]))                          )
                        (reparse-symbol indented_block_body) [14345 14404]))                  
                :type "class")
                nil [1553 14404])
            ("_reconstitute_comparator" function (:arguments 
              ( ("expression" variable nil (reparse-symbol function_parameters) [14435 14445]))              ) nil [14406 14481])
            ("UserDefinedType" type
               (:documentation "Base for user defined types.

    This should be the base of new types.  Note that
    for most cases, :class:`.TypeDecorator` is probably
    more appropriate::

      import sqlalchemy.types as types

      class MyType(types.UserDefinedType):
          def __init__(self, precision = 8):
              self.precision = precision

          def get_col_spec(self):
              return \"MYTYPE(%s)\" % self.precision

          def bind_processor(self, dialect):
              def process(value):
                  return value
              return process

          def result_processor(self, dialect, coltype):
              def process(value):
                  return value
              return process

    Once the type is made, it's immediately usable::

      table = Table('foo', meta,
          Column('id', Integer, primary_key=True),
          Column('data', MyType(16))
          )

    "
                :superclasses ("TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [15435 15466])
                    ("Comparator" type
                       (:superclasses ("TypeEngine.Comparator")
                        :members 
                          ( ("_adapt_expression" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [15543 15547])
                                    ("op" variable nil (reparse-symbol function_parameters) [15549 15551])
                                    ("other_comparator" variable nil (reparse-symbol function_parameters) [15553 15569]))                                  )
                                (reparse-symbol indented_block_body) [15521 16077]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [15472 16077])
                    ("comparator_factory" variable nil (reparse-symbol indented_block_body) [16082 16113])
                    ("coerce_compared_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16145 16149])
                            ("op" variable nil (reparse-symbol function_parameters) [16151 16153])
                            ("value" variable nil (reparse-symbol function_parameters) [16155 16160]))                          
                        :documentation "Suggest a type for a 'coerced' Python value in an expression.

        Default behavior for :class:`.UserDefinedType` is the
        same as that of :class:`.TypeDecorator`; by default it returns
        ``self``, assuming the compared value should be coerced into
        the same type as this one.  See
        :meth:`.TypeDecorator.coerce_compared_value` for more detail.

        .. versionchanged:: 0.8 :meth:`.UserDefinedType.coerce_compared_value`
           now returns ``self`` by default, rather than falling onto the
           more fundamental behavior of
           :meth:`.TypeEngine.coerce_compared_value`.

        ")
                        (reparse-symbol indented_block_body) [16119 16830]))                  
                :type "class")
                nil [14483 16830])
            ("TypeDecorator" type
               (:documentation "Allows the creation of types which add additional functionality
    to an existing type.

    This method is preferred to direct subclassing of SQLAlchemy's
    built-in types as it ensures that all required functionality of
    the underlying type is kept in place.

    Typical usage::

      import sqlalchemy.types as types

      class MyType(types.TypeDecorator):
          '''Prefixes Unicode values with \"PREFIX:\" on the way in and
          strips it off on the way out.
          '''

          impl = types.Unicode

          def process_bind_param(self, value, dialect):
              return \"PREFIX:\" + value

          def process_result_value(self, value, dialect):
              return value[7:]

          def copy(self):
              return MyType(self.impl.length)

    The class-level \"impl\" attribute is required, and can reference any
    TypeEngine class.  Alternatively, the load_dialect_impl() method
    can be used to provide different type classes based on the dialect
    given; in this case, the \"impl\" variable can reference
    ``TypeEngine`` as a placeholder.

    Types that receive a Python type that isn't similar to the ultimate type
    used may want to define the :meth:`TypeDecorator.coerce_compared_value`
    method. This is used to give the expression system a hint when coercing
    Python objects into bind parameters within expressions. Consider this
    expression::

        mytable.c.somecol + datetime.date(2009, 5, 15)

    Above, if \"somecol\" is an ``Integer`` variant, it makes sense that
    we're doing date arithmetic, where above is usually interpreted
    by databases as adding a number of days to the given date.
    The expression system does the right thing by not attempting to
    coerce the \"date()\" value into an integer-oriented bind parameter.

    However, in the case of ``TypeDecorator``, we are usually changing an
    incoming Python type to something new - ``TypeDecorator`` by default will
    \"coerce\" the non-typed side to be the same type as itself. Such as below,
    we define an \"epoch\" type that stores a date value as an integer::

        class MyEpochType(types.TypeDecorator):
            impl = types.Integer

            epoch = datetime.date(1970, 1, 1)

            def process_bind_param(self, value, dialect):
                return (value - self.epoch).days

            def process_result_value(self, value, dialect):
                return self.epoch + timedelta(days=value)

    Our expression of ``somecol + date`` with the above type will coerce the
    \"date\" on the right side to also be treated as ``MyEpochType``.

    This behavior can be overridden via the
    :meth:`~TypeDecorator.coerce_compared_value` method, which returns a type
    that should be used for the value of the expression. Below we set it such
    that an integer value will be treated as an ``Integer``, and any other
    value is assumed to be a date and will be treated as a ``MyEpochType``::

        def coerce_compared_value(self, op, value):
            if isinstance(value, int):
                return Integer()
            else:
                return self

    "
                :superclasses ("TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [20027 20060])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a :class:`.TypeDecorator`.

        Arguments sent here are passed to the constructor
        of the class assigned to the ``impl`` class level attribute,
        assuming the ``impl`` is a callable, and the resulting
        object is assigned to the ``self.impl`` instance attribute
        (thus overriding the class attribute of the same name).

        If the class level ``impl`` is not a callable (the unusual case),
        it will be assigned to the same instance attribute 'as-is',
        ignoring those arguments passed to the constructor.

        Subclasses can override this to customize the generation
        of ``self.impl`` entirely.

        \"\"\"" code nil (reparse-symbol indented_block_body) [20111 20789])
                            ("if" code nil (reparse-symbol indented_block_body) [20799 21101])
                            ("self" variable nil (reparse-symbol indented_block_body) [21109 21170]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20079 20083])
                            ("args" variable nil (reparse-symbol function_parameters) [20085 20090])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20092 20100]))                          
                        :documentation "Construct a :class:`.TypeDecorator`.

        Arguments sent here are passed to the constructor
        of the class assigned to the ``impl`` class level attribute,
        assuming the ``impl`` is a callable, and the resulting
        object is assigned to the ``self.impl`` instance attribute
        (thus overriding the class attribute of the same name).

        If the class level ``impl`` is not a callable (the unusual case),
        it will be assigned to the same instance attribute 'as-is',
        ignoring those arguments passed to the constructor.

        Subclasses can override this to customize the generation
        of ``self.impl`` entirely.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20066 21171])
                    ("coerce_to_is_types" variable nil (reparse-symbol indented_block_body) [21176 21214])
                    ("\"\"\"Specify those Python types which should be coerced at the expression
    level to \"IS <constant>\" when compared using ``==`` (and same for
        ``IS NOT`` in conjunction with ``!=``.

    For most SQLAlchemy types, this includes ``NoneType``, as well as ``bool``.

    :class:`.TypeDecorator` modifies this list to only include ``NoneType``,
    as typedecorator implementations that deal with boolean types are common.

    Custom :class:`.TypeDecorator` classes can override this attribute to
    return an empty tuple, in which case no values will be coerced to
    constants.

    ..versionadded:: 0.8.2
        Added :attr:`.TypeDecorator.coerce_to_is_types` to allow for easier
        control of ``__eq__()`` ``__ne__()`` operations.

    \"\"\"" code nil (reparse-symbol indented_block_body) [21219 21974])
                    ("Comparator" type
                       (:superclasses ("TypeEngine.Comparator")
                        :members 
                          ( ("operate" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [22041 22045])
                                    ("op" variable nil (reparse-symbol function_parameters) [22047 22049])
                                    ("other" variable nil (reparse-symbol function_parameters) [22051 22057])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [22059 22067]))                                  )
                                (reparse-symbol indented_block_body) [22029 22289])
                            ("reverse_operate" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [22318 22322])
                                    ("op" variable nil (reparse-symbol function_parameters) [22324 22326])
                                    ("other" variable nil (reparse-symbol function_parameters) [22328 22333])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [22335 22343]))                                  )
                                (reparse-symbol indented_block_body) [22298 22572]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [21980 22572])
                    ("comparator_factory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22614 22618]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22577 22759])
                    ("_gen_dialect_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22786 22790])
                            ("dialect" variable nil (reparse-symbol function_parameters) [22792 22799]))                          
                        :documentation "
        #todo
        ")
                        (reparse-symbol indented_block_body) [22764 23517])
                    ("_type_affinity" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23555 23559]))                          
                        :documentation "
        #todo
        ")
                        (reparse-symbol indented_block_body) [23522 23640])
                    ("type_engine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23661 23665])
                            ("dialect" variable nil (reparse-symbol function_parameters) [23667 23674]))                          
                        :documentation "Return a dialect-specific :class:`.TypeEngine` instance
        for this :class:`.TypeDecorator`.

        In most cases this returns a dialect-adapted form of
        the :class:`.TypeEngine` type represented by ``self.impl``.
        Makes usage of :meth:`dialect_impl` but also traverses
        into wrapped :class:`.TypeDecorator` instances.
        Behavior can be customized here by overriding
        :meth:`load_dialect_impl`.

        ")
                        (reparse-symbol indented_block_body) [23645 24422])
                    ("load_dialect_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24449 24453])
                            ("dialect" variable nil (reparse-symbol function_parameters) [24455 24462]))                          
                        :documentation "Return a :class:`.TypeEngine` object corresponding to a dialect.

        This is an end-user override hook that can be used to provide
        differing types depending on the given dialect.  It is used
        by the :class:`.TypeDecorator` implementation of :meth:`type_engine`
        to help determine what type should ultimately be returned
        for a given :class:`.TypeDecorator`.

        By default returns ``self.impl``.

        ")
                        (reparse-symbol indented_block_body) [24427 24949])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24970 24974])
                            ("key" variable nil (reparse-symbol function_parameters) [24976 24979]))                          
                        :documentation "Proxy all other undefined accessors to the underlying
        implementation.")
                        (reparse-symbol indented_block_body) [24954 25113])
                    ("process_bind_param" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25141 25145])
                            ("value" variable nil (reparse-symbol function_parameters) [25147 25152])
                            ("dialect" variable nil (reparse-symbol function_parameters) [25154 25161]))                          
                        :documentation "Receive a bound parameter value to be converted.

        Subclasses override this method to return the
        value that should be passed along to the underlying
        :class:`.TypeEngine` object, and from there to the
        DBAPI ``execute()`` method.

        The operation could be anything desired to perform custom
        behavior, such as transforming or serializing data.
        This could also be used as a hook for validating logic.

        This operation should be designed with the reverse operation
        in mind, which would be the process_result_value method of
        this class.

        :param value: Data to operate upon, of any type expected by
         this method in the subclass.  Can be ``None``.
        :param dialect: the :class:`.Dialect` in use.

        ")
                        (reparse-symbol indented_block_body) [25118 26011])
                    ("process_result_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26041 26045])
                            ("value" variable nil (reparse-symbol function_parameters) [26047 26052])
                            ("dialect" variable nil (reparse-symbol function_parameters) [26054 26061]))                          
                        :documentation "Receive a result-row column value to be converted.

        Subclasses should implement this method to operate on data
        fetched from the database.

        Subclasses override this method to return the
        value that should be passed back to the application,
        given a value that is already processed by
        the underlying :class:`.TypeEngine` object, originally
        from the DBAPI cursor method ``fetchone()`` or similar.

        The operation could be anything desired to perform custom
        behavior, such as transforming or serializing data.
        This could also be used as a hook for validating logic.

        :param value: Data to operate upon, of any type expected by
         this method in the subclass.  Can be ``None``.
        :param dialect: the :class:`.Dialect` in use.

        This operation should be designed to be reversible by
        the \"process_bind_param\" method of this class.

        ")
                        (reparse-symbol indented_block_body) [26016 27061])
                    ("_has_bind_processor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27118 27122]))                          
                        :documentation "memoized boolean, check if process_bind_param is implemented.

        Allows the base process_bind_param to raise
        NotImplementedError without needing to test an expensive
        exception throw.

        ")
                        (reparse-symbol indented_block_body) [27066 27478])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27502 27506])
                            ("dialect" variable nil (reparse-symbol function_parameters) [27508 27515]))                          
                        :documentation "Provide a bound value processing function for the
        given :class:`.Dialect`.

        This is the method that fulfills the :class:`.TypeEngine`
        contract for bound value conversion.   :class:`.TypeDecorator`
        will wrap a user-defined implementation of
        :meth:`process_bind_param` here.

        User-defined code can override this method directly,
        though its likely best to use :meth:`process_bind_param` so that
        the processing provided by ``self.impl`` is maintained.

        :param dialect: Dialect instance in use.

        This method is the reverse counterpart to the
        :meth:`result_processor` method of this class.

        ")
                        (reparse-symbol indented_block_body) [27483 28713])
                    ("_has_result_processor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28772 28776]))                          
                        :documentation "memoized boolean, check if process_result_value is implemented.

        Allows the base process_result_value to raise
        NotImplementedError without needing to test an expensive
        exception throw.

        ")
                        (reparse-symbol indented_block_body) [28718 29139])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29165 29169])
                            ("dialect" variable nil (reparse-symbol function_parameters) [29171 29178])
                            ("coltype" variable nil (reparse-symbol function_parameters) [29180 29187]))                          
                        :documentation "Provide a result value processing function for the given
        :class:`.Dialect`.

        This is the method that fulfills the :class:`.TypeEngine`
        contract for result value conversion.   :class:`.TypeDecorator`
        will wrap a user-defined implementation of
        :meth:`process_result_value` here.

        User-defined code can override this method directly,
        though its likely best to use :meth:`process_result_value` so that
        the processing provided by ``self.impl`` is maintained.

        :param dialect: Dialect instance in use.
        :param coltype: An SQLAlchemy data type

        This method is the reverse counterpart to the
        :meth:`bind_processor` method of this class.

        ")
                        (reparse-symbol indented_block_body) [29144 30483])
                    ("coerce_compared_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30514 30518])
                            ("op" variable nil (reparse-symbol function_parameters) [30520 30522])
                            ("value" variable nil (reparse-symbol function_parameters) [30524 30529]))                          
                        :documentation "Suggest a type for a 'coerced' Python value in an expression.

        By default, returns self.   This method is called by
        the expression system when an object using this type is
        on the left or right side of an expression against a plain Python
        object which does not yet have a SQLAlchemy type assigned::

            expr = table.c.somecolumn + 35

        Where above, if ``somecolumn`` uses this type, this method will
        be called with the value ``operator.add``
        and ``35``.  The return value is whatever SQLAlchemy type should
        be used for ``35`` for this particular operation.

        ")
                        (reparse-symbol indented_block_body) [30488 31204])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31218 31222]))                          
                        :documentation "Produce a copy of this :class:`.TypeDecorator` instance.

        This is a shallow copy and is provided to fulfill part of
        the :class:`.TypeEngine` contract.  It usually does not
        need to be overridden unless the user-defined :class:`.TypeDecorator`
        has local state that should be deep-copied.

        ")
                        (reparse-symbol indented_block_body) [31209 31698])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31722 31726])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [31728 31733]))                          
                        :documentation "Return the DBAPI type object represented by this
        :class:`.TypeDecorator`.

        By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the
        underlying \"impl\".
        ")
                        (reparse-symbol indented_block_body) [31703 31993])
                    ("compare_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32017 32021])
                            ("x" variable nil (reparse-symbol function_parameters) [32023 32024])
                            ("y" variable nil (reparse-symbol function_parameters) [32026 32027]))                          
                        :documentation "Given two values, compare them for equality.

        By default this calls upon :meth:`.TypeEngine.compare_values`
        of the underlying \"impl\", which in turn usually
        uses the Python equals operator ``==``.

        This function is used by the ORM to compare
        an original-loaded value with an intercepted
        \"changed\" value, to determine if a net change
        has occurred.

        ")
                        (reparse-symbol indented_block_body) [31998 32502])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32520 32524]))                          )
                        (reparse-symbol indented_block_body) [32507 32588]))                  
                :type "class")
                nil [16832 32588])
            ("Variant" type
               (:documentation "A wrapping type that selects among a variety of
    implementations based on dialect in use.

    The :class:`.Variant` type is typically constructed
    using the :meth:`.TypeEngine.with_variant` method.

    .. versionadded:: 0.7.2

    "
                :superclasses ("TypeDecorator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a new :class:`.Variant`.

        :param base: the base 'fallback' type
        :param mapping: dictionary of string dialect names to
          :class:`.TypeEngine` instances.

        \"\"\"" code nil (reparse-symbol indented_block_body) [32918 33119])
                            ("self" variable nil (reparse-symbol indented_block_body) [33128 33144])
                            ("self" variable nil (reparse-symbol indented_block_body) [33153 33175]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32888 32892])
                            ("base" variable nil (reparse-symbol function_parameters) [32894 32898])
                            ("mapping" variable nil (reparse-symbol function_parameters) [32900 32907]))                          
                        :documentation "Construct a new :class:`.Variant`.

        :param base: the base 'fallback' type
        :param mapping: dictionary of string dialect names to
          :class:`.TypeEngine` instances.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32875 33176])
                    ("load_dialect_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33203 33207])
                            ("dialect" variable nil (reparse-symbol function_parameters) [33209 33216]))                          )
                        (reparse-symbol indented_block_body) [33181 33349])
                    ("with_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33371 33375])
                            ("type_" variable nil (reparse-symbol function_parameters) [33377 33382])
                            ("dialect_name" variable nil (reparse-symbol function_parameters) [33384 33396]))                          
                        :documentation "Return a new :class:`.Variant` which adds the given
        type + dialect name to the mapping, in addition to the
        mapping present in this :class:`.Variant`.

        :param type_: a :class:`.TypeEngine` that will be selected
         as a variant from the originating type, when a dialect
         of the given name is in use.
        :param dialect_name: base name of the dialect which uses
         this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)

        ")
                        (reparse-symbol indented_block_body) [33354 34202]))                  
                :type "class")
                nil [32590 34202])
            ("to_instance" function (:arguments 
              ( ("typeobj" variable nil (reparse-symbol function_parameters) [34220 34227])
                ("arg" variable nil (reparse-symbol function_parameters) [34229 34233])
                ("kw" variable nil (reparse-symbol function_parameters) [34235 34239]))              ) nil [34204 34390])
            ("adapt_type" function (:arguments 
              ( ("typeobj" variable nil (reparse-symbol function_parameters) [34407 34414])
                ("colspecs" variable nil (reparse-symbol function_parameters) [34416 34424]))              ) nil [34392 35153])
            ("NullType" type
               (:documentation "An unknown type.

    NullTypes will stand in if :class:`~sqlalchemy.Table` reflection
    encounters a column data type unknown to SQLAlchemy.  The
    resulting columns are nearly fully usable: the DB-API adapter will
    handle all translation to and from the database data type.

    NullType does not have sufficient information to particpate in a
    ``CREATE TABLE`` statement and will raise an exception if
    encountered during a :meth:`~sqlalchemy.Table.create` operation.

    "
                :superclasses ("TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [35687 35710])
                    ("Comparator" type
                       (:superclasses ("TypeEngine.Comparator")
                        :members 
                          ( ("_adapt_expression" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [35787 35791])
                                    ("op" variable nil (reparse-symbol function_parameters) [35793 35795])
                                    ("other_comparator" variable nil (reparse-symbol function_parameters) [35797 35813]))                                  )
                                (reparse-symbol indented_block_body) [35765 36064]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [35716 36064])
                    ("comparator_factory" variable nil (reparse-symbol indented_block_body) [36068 36099]))                  
                :type "class")
                nil [35155 36100])
            ("NullTypeEngine" variable nil nil [36101 36126])
            ("Concatenable" type
               (:documentation "A mixin that marks a type as supporting 'concatenation',
    typically strings."
                :superclasses ("object")
                :members 
                  ( ("Comparator" type
                       (:superclasses ("TypeEngine.Comparator")
                        :members 
                          ( ("_adapt_expression" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [36323 36327])
                                    ("op" variable nil (reparse-symbol function_parameters) [36329 36331])
                                    ("other_comparator" variable nil (reparse-symbol function_parameters) [36333 36349]))                                  )
                                (reparse-symbol indented_block_body) [36301 36608]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [36252 36608])
                    ("comparator_factory" variable nil (reparse-symbol indented_block_body) [36613 36644]))                  
                :type "class")
                nil [36129 36645])
            ("_DateAffinity" type
               (:documentation "Mixin date/time specific expression adaptations.

    Rules are implemented within Date,Time,Interval,DateTime, Numeric,
    Integer. Based on http://www.postgresql.org/docs/current/static
    /functions-datetime.html.

    "
                :superclasses ("object")
                :members 
                  ( ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36958 36962]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36916 37001])
                    ("Comparator" type
                       (:superclasses ("TypeEngine.Comparator")
                        :members 
                          ( ("_blank_dict" variable nil (reparse-symbol indented_block_body) [37055 37089])
                            ("_adapt_expression" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [37121 37125])
                                    ("op" variable nil (reparse-symbol function_parameters) [37127 37129])
                                    ("other_comparator" variable nil (reparse-symbol function_parameters) [37131 37147]))                                  )
                                (reparse-symbol indented_block_body) [37099 37363]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [37006 37363])
                    ("comparator_factory" variable nil (reparse-symbol indented_block_body) [37367 37398]))                  
                :type "class")
                nil [36647 37399])
            ("String" type
               (:documentation "The base for all string and character types.

    In SQL, corresponds to VARCHAR.  Can also take Python unicode objects
    and encode to the database's encoding in bind params (and the reverse for
    result sets.)

    The `length` field is usually required when the `String` type is
    used within a CREATE TABLE statement, as VARCHAR requires a length
    on most databases.

    "
                :superclasses ("Concatenable" "TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [37842 37867])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a string-holding type.

        :param length: optional, a length for the column for use in
          DDL and CAST expressions.  May be safely omitted if no ``CREATE
          TABLE`` will be issued.  Certain databases may require a
          ``length`` for use in DDL, and will raise an exception when
          the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
          with no length is included.  Whether the value is
          interpreted as bytes or characters is database specific.

        :param collation: Optional, a column-level collation for
          use in DDL and CAST expressions.  Renders using the
          COLLATE keyword supported by SQLite, MySQL, and Postgresql.
          E.g.::

            >>> from sqlalchemy import cast, select, String
            >>> print select([cast('some string', String(collation='utf8'))])
            SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1

          .. versionadded:: 0.8 Added support for COLLATE to all
             string types.

        :param convert_unicode: When set to ``True``, the
          :class:`.String` type will assume that
          input is to be passed as Python ``unicode`` objects,
          and results returned as Python ``unicode`` objects.
          If the DBAPI in use does not support Python unicode
          (which is fewer and fewer these days), SQLAlchemy
          will encode/decode the value, using the
          value of the ``encoding`` parameter passed to
          :func:`.create_engine` as the encoding.

          When using a DBAPI that natively supports Python
          unicode objects, this flag generally does not
          need to be set.  For columns that are explicitly
          intended to store non-ASCII data, the :class:`.Unicode`
          or :class:`UnicodeText`
          types should be used regardless, which feature
          the same behavior of ``convert_unicode`` but
          also indicate an underlying column type that
          directly supports unicode, such as ``NVARCHAR``.

          For the extremely rare case that Python ``unicode``
          is to be encoded/decoded by SQLAlchemy on a backend
          that does natively support Python ``unicode``,
          the value ``force`` can be passed here which will
          cause SQLAlchemy's encode/decode services to be
          used unconditionally.

        :param unicode_error: Optional, a method to use to handle Unicode
          conversion errors. Behaves like the ``errors`` keyword argument to
          the standard library's ``string.decode()`` functions.   This flag
          requires that ``convert_unicode`` is set to ``force`` - otherwise,
          SQLAlchemy is not guaranteed to handle the task of unicode
          conversion.   Note that this flag adds significant performance
          overhead to row-fetching operations for backends that already
          return unicode objects natively (which most DBAPIs do).  This
          flag should only be used as a last resort for reading
          strings from a column with varied or corrupted encodings.

        \"\"\"" code nil (reparse-symbol indented_block_body) [38097 41202])
                            ("if" code nil (reparse-symbol indented_block_body) [41211 41413])
                            ("self" variable nil (reparse-symbol indented_block_body) [41422 41442])
                            ("self" variable nil (reparse-symbol indented_block_body) [41451 41477])
                            ("self" variable nil (reparse-symbol indented_block_body) [41486 41524])
                            ("self" variable nil (reparse-symbol indented_block_body) [41533 41567])
                            ("self" variable nil (reparse-symbol indented_block_body) [41576 41622]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37886 37890])
                            ("length" variable nil (reparse-symbol function_parameters) [37892 37898])
                            ("collation" variable nil (reparse-symbol function_parameters) [37905 37914])
                            ("convert_unicode" variable nil (reparse-symbol function_parameters) [37945 37960])
                            ("unicode_error" variable nil (reparse-symbol function_parameters) [37992 38005])
                            ("_warn_on_bytestring" variable nil (reparse-symbol function_parameters) [38036 38055]))                          
                        :documentation "
        Create a string-holding type.

        :param length: optional, a length for the column for use in
          DDL and CAST expressions.  May be safely omitted if no ``CREATE
          TABLE`` will be issued.  Certain databases may require a
          ``length`` for use in DDL, and will raise an exception when
          the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
          with no length is included.  Whether the value is
          interpreted as bytes or characters is database specific.

        :param collation: Optional, a column-level collation for
          use in DDL and CAST expressions.  Renders using the
          COLLATE keyword supported by SQLite, MySQL, and Postgresql.
          E.g.::

            >>> from sqlalchemy import cast, select, String
            >>> print select([cast('some string', String(collation='utf8'))])
            SELECT CAST(:param_1 AS VARCHAR COLLATE utf8) AS anon_1

          .. versionadded:: 0.8 Added support for COLLATE to all
             string types.

        :param convert_unicode: When set to ``True``, the
          :class:`.String` type will assume that
          input is to be passed as Python ``unicode`` objects,
          and results returned as Python ``unicode`` objects.
          If the DBAPI in use does not support Python unicode
          (which is fewer and fewer these days), SQLAlchemy
          will encode/decode the value, using the
          value of the ``encoding`` parameter passed to
          :func:`.create_engine` as the encoding.

          When using a DBAPI that natively supports Python
          unicode objects, this flag generally does not
          need to be set.  For columns that are explicitly
          intended to store non-ASCII data, the :class:`.Unicode`
          or :class:`UnicodeText`
          types should be used regardless, which feature
          the same behavior of ``convert_unicode`` but
          also indicate an underlying column type that
          directly supports unicode, such as ``NVARCHAR``.

          For the extremely rare case that Python ``unicode``
          is to be encoded/decoded by SQLAlchemy on a backend
          that does natively support Python ``unicode``,
          the value ``force`` can be passed here which will
          cause SQLAlchemy's encode/decode services to be
          used unconditionally.

        :param unicode_error: Optional, a method to use to handle Unicode
          conversion errors. Behaves like the ``errors`` keyword argument to
          the standard library's ``string.decode()`` functions.   This flag
          requires that ``convert_unicode`` is set to ``force`` - otherwise,
          SQLAlchemy is not guaranteed to handle the task of unicode
          conversion.   Note that this flag adds significant performance
          overhead to row-fetching operations for backends that already
          return unicode objects natively (which most DBAPIs do).  This
          flag should only be used as a last resort for reading
          strings from a column with varied or corrupted encodings.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37873 41623])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41647 41651])
                            ("dialect" variable nil (reparse-symbol function_parameters) [41653 41660]))                          )
                        (reparse-symbol indented_block_body) [41628 42960])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42986 42990])
                            ("dialect" variable nil (reparse-symbol function_parameters) [42992 42999])
                            ("coltype" variable nil (reparse-symbol function_parameters) [43001 43008]))                          )
                        (reparse-symbol indented_block_body) [42965 44195])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44230 44234]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44200 44334])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44358 44362])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [44364 44369]))                          )
                        (reparse-symbol indented_block_body) [44339 44400]))                  
                :type "class")
                nil [37401 44400])
            ("Text" type
               (:documentation "A variably sized string type.

    In SQL, usually corresponds to CLOB or TEXT. Can also take Python
    unicode objects and encode to the database's encoding in bind
    params (and the reverse for result sets.)  In general, TEXT objects
    do not have a length; while some databases will accept a length
    argument here, it will be rejected by others.

    "
                :superclasses ("String")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [44799 44822]))                  
                :type "class")
                nil [44402 44823])
            ("Unicode" type
               (:documentation "A variable length Unicode string type.

    The :class:`.Unicode` type is a :class:`.String` subclass
    that assumes input and output as Python ``unicode`` data,
    and in that regard is equivalent to the usage of the
    ``convert_unicode`` flag with the :class:`.String` type.
    However, unlike plain :class:`.String`, it also implies an
    underlying column type that is explicitly supporting of non-ASCII
    data, such as ``NVARCHAR`` on Oracle and SQL Server.
    This can impact the output of ``CREATE TABLE`` statements
    and ``CAST`` functions at the dialect level, and can
    also affect the handling of bound parameters in some
    specific DBAPI scenarios.

    The encoding used by the :class:`.Unicode` type is usually
    determined by the DBAPI itself; most modern DBAPIs
    feature support for Python ``unicode`` objects as bound
    values and result set values, and the encoding should
    be configured as detailed in the notes for the target
    DBAPI in the :ref:`dialect_toplevel` section.

    For those DBAPIs which do not support, or are not configured
    to accommodate Python ``unicode`` objects
    directly, SQLAlchemy does the encoding and decoding
    outside of the DBAPI.   The encoding in this scenario
    is determined by the ``encoding`` flag passed to
    :func:`.create_engine`.

    When using the :class:`.Unicode` type, it is only appropriate
    to pass Python ``unicode`` objects, and not plain ``str``.
    If a plain ``str`` is passed under Python 2, a warning
    is emitted.  If you notice your application emitting these warnings but
    you're not sure of the source of them, the Python
    ``warnings`` filter, documented at
    http://docs.python.org/library/warnings.html,
    can be used to turn these warnings into exceptions
    which will illustrate a stack trace::

      import warnings
      warnings.simplefilter('error')

    For an application that wishes to pass plain bytestrings
    and Python ``unicode`` objects to the ``Unicode`` type
    equally, the bytestrings must first be decoded into
    unicode.  The recipe at :ref:`coerce_to_unicode` illustrates
    how this is done.

    See also:

        :class:`.UnicodeText` - unlengthed textual counterpart
        to :class:`.Unicode`.

    "
                :superclasses ("String")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [47137 47163])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`.Unicode` object.

        Parameters are the same as that of :class:`.String`,
        with the exception that ``convert_unicode``
        defaults to ``True``.

        \"\"\"" code nil (reparse-symbol indented_block_body) [47220 47423])
                            ("kwargs" code nil (reparse-symbol indented_block_body) [47432 47474])
                            ("kwargs" code nil (reparse-symbol indented_block_body) [47483 47529])
                            ("super" code nil (reparse-symbol indented_block_body) [47538 47592]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47182 47186])
                            ("length" variable nil (reparse-symbol function_parameters) [47188 47194])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47201 47209]))                          
                        :documentation "
        Create a :class:`.Unicode` object.

        Parameters are the same as that of :class:`.String`,
        with the exception that ``convert_unicode``
        defaults to ``True``.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47169 47593]))                  
                :type "class")
                nil [44825 47593])
            ("UnicodeText" type
               (:documentation "An unbounded-length Unicode string type.

    See :class:`.Unicode` for details on the unicode
    behavior of this object.

    Like :class:`.Unicode`, usage the :class:`.UnicodeText` type implies a
    unicode-capable type being used on the backend, such as
    ``NCLOB``, ``NTEXT``.

    "
                :superclasses ("Text")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [47927 47958])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a Unicode-converting Text type.

        Parameters are the same as that of :class:`.Text`,
        with the exception that ``convert_unicode``
        defaults to ``True``.

        \"\"\"" code nil (reparse-symbol indented_block_body) [48015 48220])
                            ("kwargs" code nil (reparse-symbol indented_block_body) [48229 48271])
                            ("kwargs" code nil (reparse-symbol indented_block_body) [48280 48326])
                            ("super" code nil (reparse-symbol indented_block_body) [48335 48393]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47977 47981])
                            ("length" variable nil (reparse-symbol function_parameters) [47983 47989])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47996 48004]))                          
                        :documentation "
        Create a Unicode-converting Text type.

        Parameters are the same as that of :class:`.Text`,
        with the exception that ``convert_unicode``
        defaults to ``True``.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47964 48394]))                  
                :type "class")
                nil [47595 48394])
            ("Integer" type
               (:documentation "A type for ``int`` integers."
                :superclasses ("_DateAffinity" "TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [48482 48508])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48533 48537])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [48539 48544]))                          )
                        (reparse-symbol indented_block_body) [48514 48575])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48610 48614]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [48580 48636])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48697 48701]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [48641 49551]))                  
                :type "class")
                nil [48396 49551])
            ("SmallInteger" type
               (:documentation "A type for smaller ``int`` integers.

    Typically generates a ``SMALLINT`` in DDL, and otherwise acts like
    a normal :class:`.Integer` on the Python side.

    "
                :superclasses ("Integer")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [49763 49795]))                  
                :type "class")
                nil [49553 49796])
            ("BigInteger" type
               (:documentation "A type for bigger ``int`` integers.

    Typically generates a ``BIGINT`` in DDL, and otherwise acts like
    a normal :class:`.Integer` on the Python side.

    "
                :superclasses ("Integer")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [50003 50033]))                  
                :type "class")
                nil [49798 50034])
            ("Numeric" type
               (:documentation "A type for fixed precision numbers.

    Typically generates DECIMAL or NUMERIC.  Returns
    ``decimal.Decimal`` objects by default, applying
    conversion as needed.

    .. note::

       The `cdecimal <http://pypi.python.org/pypi/cdecimal/>`_ library
       is a high performing alternative to Python's built-in
       ``decimal.Decimal`` type, which performs very poorly in high volume
       situations. SQLAlchemy 0.7 is tested against ``cdecimal`` and supports
       it fully. The type is not necessarily supported by DBAPI
       implementations however, most of which contain an import for plain
       ``decimal`` in their source code, even though some such as psycopg2
       provide hooks for alternate adapters. SQLAlchemy imports ``decimal``
       globally as well.  The most straightforward and
       foolproof way to use \"cdecimal\" given current DBAPI and Python support
       is to patch it directly into sys.modules before anything else is
       imported::

           import sys
           import cdecimal
           sys.modules[\"decimal\"] = cdecimal

       While the global patch is a little ugly, it's particularly
       important to use just one decimal library at a time since
       Python Decimal and cdecimal Decimal objects
       are not currently compatible *with each other*::

           >>> import cdecimal
           >>> import decimal
           >>> decimal.Decimal(\"10\") == cdecimal.Decimal(\"10\")
           False

       SQLAlchemy will provide more natural support of
       cdecimal if and when it becomes a standard part of Python
       installations and is supported by all DBAPIs.

    "
                :superclasses ("_DateAffinity" "TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [51731 51757])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Construct a Numeric.

        :param precision: the numeric precision for use in DDL ``CREATE
          TABLE``.

        :param scale: the numeric scale for use in DDL ``CREATE TABLE``.

        :param asdecimal: default True.  Return whether or not
          values should be sent as Python Decimal objects, or
          as floats.   Different DBAPIs send one or the other based on
          datatypes - the Numeric type will ensure that return values
          are one or the other across DBAPIs consistently.

        When using the ``Numeric`` type, care should be taken to ensure
        that the asdecimal setting is apppropriate for the DBAPI in use -
        when Numeric applies a conversion from Decimal->float or float->
        Decimal, this conversion incurs an additional performance overhead
        for all result columns received.

        DBAPIs that return Decimal natively (e.g. psycopg2) will have
        better accuracy and higher performance with a setting of ``True``,
        as the native translation to Decimal reduces the amount of floating-
        point issues at play, and the Numeric type itself doesn't need
        to apply any further conversions.  However, another DBAPI which
        returns floats natively *will* incur an additional conversion
        overhead, and is still subject to floating point data loss - in
        which case ``asdecimal=False`` will at least remove the extra
        conversion overhead.

        \"\"\"" code nil (reparse-symbol indented_block_body) [51835 53315])
                            ("self" variable nil (reparse-symbol indented_block_body) [53324 53350])
                            ("self" variable nil (reparse-symbol indented_block_body) [53359 53377])
                            ("self" variable nil (reparse-symbol indented_block_body) [53386 53412]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51776 51780])
                            ("precision" variable nil (reparse-symbol function_parameters) [51782 51791])
                            ("scale" variable nil (reparse-symbol function_parameters) [51798 51803])
                            ("asdecimal" variable nil (reparse-symbol function_parameters) [51810 51819]))                          
                        :documentation "
        Construct a Numeric.

        :param precision: the numeric precision for use in DDL ``CREATE
          TABLE``.

        :param scale: the numeric scale for use in DDL ``CREATE TABLE``.

        :param asdecimal: default True.  Return whether or not
          values should be sent as Python Decimal objects, or
          as floats.   Different DBAPIs send one or the other based on
          datatypes - the Numeric type will ensure that return values
          are one or the other across DBAPIs consistently.

        When using the ``Numeric`` type, care should be taken to ensure
        that the asdecimal setting is apppropriate for the DBAPI in use -
        when Numeric applies a conversion from Decimal->float or float->
        Decimal, this conversion incurs an additional performance overhead
        for all result columns received.

        DBAPIs that return Decimal natively (e.g. psycopg2) will have
        better accuracy and higher performance with a setting of ``True``,
        as the native translation to Decimal reduces the amount of floating-
        point issues at play, and the Numeric type itself doesn't need
        to apply any further conversions.  However, another DBAPI which
        returns floats natively *will* incur an additional conversion
        overhead, and is still subject to floating point data loss - in
        which case ``asdecimal=False`` will at least remove the extra
        conversion overhead.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51763 53413])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53437 53441])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [53443 53448]))                          )
                        (reparse-symbol indented_block_body) [53418 53479])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53514 53518]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [53484 53622])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53646 53650])
                            ("dialect" variable nil (reparse-symbol function_parameters) [53652 53659]))                          )
                        (reparse-symbol indented_block_body) [53627 53783])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53809 53813])
                            ("dialect" variable nil (reparse-symbol function_parameters) [53815 53822])
                            ("coltype" variable nil (reparse-symbol function_parameters) [53824 53831]))                          )
                        (reparse-symbol indented_block_body) [53788 55050])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55111 55115]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55055 55856]))                  
                :type "class")
                nil [50036 55856])
            ("Float" type
               (:documentation "A type for ``float`` numbers.

    Returns Python ``float`` objects by default, applying
    conversion as needed.

    "
                :superclasses ("Numeric")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [56016 56040])
                    ("scale" variable nil (reparse-symbol indented_block_body) [56046 56058])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Construct a Float.

        :param precision: the numeric precision for use in DDL ``CREATE
           TABLE``.

        :param asdecimal: the same flag as that of :class:`.Numeric`, but
          defaults to ``False``.   Note that setting this flag to ``True``
          results in floating point conversion.

        :param \\**kwargs: deprecated.  Additional arguments here are ignored
         by the default :class:`.Float` type.  For database specific
         floats that support additional arguments, see that dialect's
         documentation for details, such as
         :class:`sqlalchemy.dialects.mysql.FLOAT`.

        \"\"\"" code nil (reparse-symbol indented_block_body) [56135 56781])
                            ("self" variable nil (reparse-symbol indented_block_body) [56790 56816])
                            ("self" variable nil (reparse-symbol indented_block_body) [56825 56851])
                            ("if" code nil (reparse-symbol indented_block_body) [56860 56996]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56077 56081])
                            ("precision" variable nil (reparse-symbol function_parameters) [56083 56092])
                            ("asdecimal" variable nil (reparse-symbol function_parameters) [56099 56108])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56116 56124]))                          
                        :documentation "
        Construct a Float.

        :param precision: the numeric precision for use in DDL ``CREATE
           TABLE``.

        :param asdecimal: the same flag as that of :class:`.Numeric`, but
          defaults to ``False``.   Note that setting this flag to ``True``
          results in floating point conversion.

        :param \\**kwargs: deprecated.  Additional arguments here are ignored
         by the default :class:`.Float` type.  For database specific
         floats that support additional arguments, see that dialect's
         documentation for details, such as
         :class:`sqlalchemy.dialects.mysql.FLOAT`.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56064 56996])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57022 57026])
                            ("dialect" variable nil (reparse-symbol function_parameters) [57028 57035])
                            ("coltype" variable nil (reparse-symbol function_parameters) [57037 57044]))                          )
                        (reparse-symbol indented_block_body) [57001 57188])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57249 57253]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [57193 57789]))                  
                :type "class")
                nil [55858 57789])
            ("DateTime" type
               (:documentation "A type for ``datetime.datetime()`` objects.

    Date and time types return objects from the Python ``datetime``
    module.  Most DBAPIs have built in support for the datetime
    module, with the noted exception of SQLite.  In the case of
    SQLite, date and time types are stored as strings which are then
    converted back to datetime objects when rows are returned.

    "
                :superclasses ("_DateAffinity" "TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [58228 58255])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a new :class:`.DateTime`.

        :param timezone: boolean.  If True, and supported by the
        backend, will produce 'TIMESTAMP WITH TIMEZONE'. For backends
        that don't support timezone aware timestamps, has no
        effect.

        \"\"\"" code nil (reparse-symbol indented_block_body) [58305 58569])
                            ("self" variable nil (reparse-symbol indented_block_body) [58578 58602]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58274 58278])
                            ("timezone" variable nil (reparse-symbol function_parameters) [58280 58288]))                          
                        :documentation "Construct a new :class:`.DateTime`.

        :param timezone: boolean.  If True, and supported by the
        backend, will produce 'TIMESTAMP WITH TIMEZONE'. For backends
        that don't support timezone aware timestamps, has no
        effect.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58261 58603])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58627 58631])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [58633 58638]))                          )
                        (reparse-symbol indented_block_body) [58608 58671])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58706 58710]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58676 58740])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58801 58805]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58745 59043]))                  
                :type "class")
                nil [57791 59043])
            ("Date" type
               (:documentation "A type for ``datetime.date()`` objects."
                :superclasses ("_DateAffinity" "TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [59139 59162])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59187 59191])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [59193 59198]))                          )
                        (reparse-symbol indented_block_body) [59168 59231])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59266 59270]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59236 59296])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59357 59361]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59301 59939]))                  
                :type "class")
                nil [59045 59939])
            ("Time" type
               (:documentation "A type for ``datetime.time()`` objects."
                :superclasses ("_DateAffinity" "TypeEngine")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [60035 60058])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [60108 60132]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60077 60081])
                            ("timezone" variable nil (reparse-symbol function_parameters) [60083 60091]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [60064 60133])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60157 60161])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [60163 60168]))                          )
                        (reparse-symbol indented_block_body) [60138 60201])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60236 60240]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60206 60266])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60327 60331]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60271 60596]))                  
                :type "class")
                nil [59941 60596])
            ("_Binary" type
               (:documentation "Define base behavior for binary types."
                :superclasses ("TypeEngine")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [60720 60740]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60692 60696])
                            ("length" variable nil (reparse-symbol function_parameters) [60698 60704]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [60679 60741])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60776 60780]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60746 60854])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61010 61014])
                            ("dialect" variable nil (reparse-symbol function_parameters) [61016 61023]))                          )
                        (reparse-symbol indented_block_body) [60991 61264])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61649 61653])
                            ("dialect" variable nil (reparse-symbol function_parameters) [61655 61662])
                            ("coltype" variable nil (reparse-symbol function_parameters) [61664 61671]))                          )
                        (reparse-symbol indented_block_body) [61628 62040])
                    ("coerce_compared_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62086 62090])
                            ("op" variable nil (reparse-symbol function_parameters) [62092 62094])
                            ("value" variable nil (reparse-symbol function_parameters) [62096 62101]))                          
                        :documentation "See :meth:`.TypeEngine.coerce_compared_value` for a description.")
                        (reparse-symbol indented_block_body) [62060 62337])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62361 62365])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [62367 62372]))                          )
                        (reparse-symbol indented_block_body) [62342 62403]))                  
                :type "class")
                nil [60598 62403])
            ("LargeBinary" type
               (:documentation "A type for large binary byte data.

    The Binary type generates BLOB or BYTEA when tables are created,
    and also converts incoming values using the ``Binary`` callable
    provided by each DB-API.

    "
                :superclasses ("_Binary")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [62656 62687])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Construct a LargeBinary type.

        :param length: optional, a length for the column for use in
          DDL statements, for those BLOB types that accept a length
          (i.e. MySQL).  It does *not* produce a small BINARY/VARBINARY
          type - use the BINARY/VARBINARY types specifically for those.
          May be safely omitted if no ``CREATE
          TABLE`` will be issued.  Certain databases may require a
          *length* for use in DDL, and will raise an exception when
          the ``CREATE TABLE`` DDL is issued.

        \"\"\"" code nil (reparse-symbol indented_block_body) [62734 63297])
                            ("_Binary" code nil (reparse-symbol indented_block_body) [63306 63343]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62706 62710])
                            ("length" variable nil (reparse-symbol function_parameters) [62712 62718]))                          
                        :documentation "
        Construct a LargeBinary type.

        :param length: optional, a length for the column for use in
          DDL statements, for those BLOB types that accept a length
          (i.e. MySQL).  It does *not* produce a small BINARY/VARBINARY
          type - use the BINARY/VARBINARY types specifically for those.
          May be safely omitted if no ``CREATE
          TABLE`` will be issued.  Certain databases may require a
          *length* for use in DDL, and will raise an exception when
          the ``CREATE TABLE`` DDL is issued.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [62693 63344]))                  
                :type "class")
                nil [62405 63344])
            ("Binary" type
               (:documentation "Deprecated.  Renamed to LargeBinary."
                :superclasses ("LargeBinary")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("util" code nil (reparse-symbol indented_block_body) [63465 63569])
                            ("LargeBinary" code nil (reparse-symbol indented_block_body) [63578 63616]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63438 63442])
                            ("arg" variable nil (reparse-symbol function_parameters) [63444 63448])
                            ("kw" variable nil (reparse-symbol function_parameters) [63450 63454]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [63425 63617]))                  
                :type "class")
                nil [63346 63617])
            ("SchemaType" type
               (:documentation "Mark a type as possibly requiring schema-level DDL for usage.

    Supports types that must be explicitly created/dropped (i.e. PG ENUM type)
    as well as types that are complimented by table or schema level
    constraints, triggers, and other rules.

    :class:`.SchemaType` classes can also be targets for the
    :meth:`.DDLEvents.before_parent_attach` and
    :meth:`.DDLEvents.after_parent_attach` events, where the events fire off
    surrounding the association of the type object with a parent
    :class:`.Column`.

    .. seealso::

        :class:`.Enum`

        :class:`.Boolean`


    "
                :superclasses ("events.SchemaEventTarget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [64316 64348])
                            ("self" variable nil (reparse-symbol indented_block_body) [64357 64391])
                            ("self" variable nil (reparse-symbol indented_block_body) [64400 64436])
                            ("self" variable nil (reparse-symbol indented_block_body) [64445 64485])
                            ("self" variable nil (reparse-symbol indented_block_body) [64494 64547])
                            ("if" code nil (reparse-symbol indented_block_body) [64556 64919]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64295 64299])
                            ("kw" variable nil (reparse-symbol function_parameters) [64301 64305]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [64282 64919])
                    ("_set_parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64940 64944])
                            ("column" variable nil (reparse-symbol function_parameters) [64946 64952]))                          )
                        (reparse-symbol indented_block_body) [64924 65034])
                    ("_set_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65054 65058])
                            ("column" variable nil (reparse-symbol function_parameters) [65060 65066])
                            ("table" variable nil (reparse-symbol function_parameters) [65068 65073]))                          )
                        (reparse-symbol indented_block_body) [65039 65939])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65953 65957])
                            ("kw" variable nil (reparse-symbol function_parameters) [65959 65963]))                          )
                        (reparse-symbol indented_block_body) [65944 66008])
                    ("adapt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66023 66027])
                            ("impltype" variable nil (reparse-symbol function_parameters) [66029 66037])
                            ("kw" variable nil (reparse-symbol function_parameters) [66039 66043]))                          )
                        (reparse-symbol indented_block_body) [66013 66401])
                    ("bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66429 66433]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66406 66496])
                    ("create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66512 66516])
                            ("bind" variable nil (reparse-symbol function_parameters) [66518 66522])
                            ("checkfirst" variable nil (reparse-symbol function_parameters) [66529 66539]))                          
                        :documentation "Issue CREATE ddl for this type, if applicable.")
                        (reparse-symbol indented_block_body) [66501 66857])
                    ("drop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66871 66875])
                            ("bind" variable nil (reparse-symbol function_parameters) [66877 66881])
                            ("checkfirst" variable nil (reparse-symbol function_parameters) [66888 66898]))                          
                        :documentation "Issue DROP ddl for this type, if applicable.")
                        (reparse-symbol indented_block_body) [66862 67212])
                    ("_on_table_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67238 67242])
                            ("target" variable nil (reparse-symbol function_parameters) [67244 67250])
                            ("bind" variable nil (reparse-symbol function_parameters) [67252 67256])
                            ("kw" variable nil (reparse-symbol function_parameters) [67258 67262]))                          )
                        (reparse-symbol indented_block_body) [67217 67436])
                    ("_on_table_drop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67460 67464])
                            ("target" variable nil (reparse-symbol function_parameters) [67466 67472])
                            ("bind" variable nil (reparse-symbol function_parameters) [67474 67478])
                            ("kw" variable nil (reparse-symbol function_parameters) [67480 67484]))                          )
                        (reparse-symbol indented_block_body) [67441 67656])
                    ("_on_metadata_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67685 67689])
                            ("target" variable nil (reparse-symbol function_parameters) [67691 67697])
                            ("bind" variable nil (reparse-symbol function_parameters) [67699 67703])
                            ("kw" variable nil (reparse-symbol function_parameters) [67705 67709]))                          )
                        (reparse-symbol indented_block_body) [67661 67886])
                    ("_on_metadata_drop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67913 67917])
                            ("target" variable nil (reparse-symbol function_parameters) [67919 67925])
                            ("bind" variable nil (reparse-symbol function_parameters) [67927 67931])
                            ("kw" variable nil (reparse-symbol function_parameters) [67933 67937]))                          )
                        (reparse-symbol indented_block_body) [67891 68112]))                  
                :type "class")
                nil [63619 68112])
            ("Enum" type
               (:documentation "Generic Enum Type.

    The Enum type provides a set of possible string values which the
    column is constrained towards.

    By default, uses the backend's native ENUM type if available,
    else uses VARCHAR + a CHECK constraint.

    .. seealso::

        :class:`~.postgresql.ENUM` - PostgreSQL-specific type,
        which has additional functionality.

    "
                :superclasses ("String" "SchemaType")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [68528 68551])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct an enum.

        Keyword arguments which don't apply to a specific backend are ignored
        by that backend.

        :param \\*enums: string or unicode enumeration labels. If unicode
           labels are present, the `convert_unicode` flag is auto-enabled.

        :param convert_unicode: Enable unicode-aware bind parameter and
           result-set processing for this Enum's data. This is set
           automatically based on the presence of unicode label strings.

        :param metadata: Associate this type directly with a ``MetaData``
           object. For types that exist on the target database as an
           independent schema construct (Postgresql), this type will be
           created and dropped within ``create_all()`` and ``drop_all()``
           operations. If the type is not associated with any ``MetaData``
           object, it will associate itself with each ``Table`` in which it is
           used, and will be created when any of those individual tables are
           created, after a check is performed for it's existence. The type is
           only dropped when ``drop_all()`` is called for that ``Table``
           object's metadata, however.

        :param name: The name of this type. This is required for Postgresql
           and any future supported database which requires an explicitly
           named type, or an explicitly named constraint in order to generate
           the type and/or a table that uses it.

        :param native_enum: Use the database's native ENUM type when
           available. Defaults to True. When False, uses VARCHAR + check
           constraint for all backends.

        :param schema: Schema name of this type. For types that exist on the
           target database as an independent schema construct (Postgresql),
           this parameter specifies the named schema in which the type is
           present.

           .. note::

                The ``schema`` of the :class:`.Enum` type does not
                by default make use of the ``schema`` established on the
                owning :class:`.Table`.  If this behavior is desired,
                set the ``inherit_schema`` flag to ``True``.

        :param quote: Force quoting to be on or off on the type's name. If
           left as the default of `None`, the usual schema-level \"case
           sensitive\"/\"reserved name\" rules are used to determine if this
           type's name should be quoted.

        :param inherit_schema: When ``True``, the \"schema\" from the owning
           :class:`.Table` will be copied to the \"schema\" attribute of this
           :class:`.Enum`, replacing whatever value was passed for the
           ``schema`` attribute.   This also takes effect when using the
           :meth:`.Table.tometadata` operation.

           .. versionadded:: 0.8

        \"\"\"" code nil (reparse-symbol indented_block_body) [68599 71454])
                            ("self" variable nil (reparse-symbol indented_block_body) [71463 71481])
                            ("self" variable nil (reparse-symbol indented_block_body) [71490 71536])
                            ("convert_unicode" variable nil (reparse-symbol indented_block_body) [71545 71594])
                            ("if" code nil (reparse-symbol indented_block_body) [71603 71829])
                            ("if" code nil (reparse-symbol indented_block_body) [71838 71943])
                            ("String" code nil (reparse-symbol indented_block_body) [71951 72094])
                            ("SchemaType" code nil (reparse-symbol indented_block_body) [72103 72134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68570 68574])
                            ("enums" variable nil (reparse-symbol function_parameters) [68576 68582])
                            ("kw" variable nil (reparse-symbol function_parameters) [68584 68588]))                          
                        :documentation "Construct an enum.

        Keyword arguments which don't apply to a specific backend are ignored
        by that backend.

        :param \\*enums: string or unicode enumeration labels. If unicode
           labels are present, the `convert_unicode` flag is auto-enabled.

        :param convert_unicode: Enable unicode-aware bind parameter and
           result-set processing for this Enum's data. This is set
           automatically based on the presence of unicode label strings.

        :param metadata: Associate this type directly with a ``MetaData``
           object. For types that exist on the target database as an
           independent schema construct (Postgresql), this type will be
           created and dropped within ``create_all()`` and ``drop_all()``
           operations. If the type is not associated with any ``MetaData``
           object, it will associate itself with each ``Table`` in which it is
           used, and will be created when any of those individual tables are
           created, after a check is performed for it's existence. The type is
           only dropped when ``drop_all()`` is called for that ``Table``
           object's metadata, however.

        :param name: The name of this type. This is required for Postgresql
           and any future supported database which requires an explicitly
           named type, or an explicitly named constraint in order to generate
           the type and/or a table that uses it.

        :param native_enum: Use the database's native ENUM type when
           available. Defaults to True. When False, uses VARCHAR + check
           constraint for all backends.

        :param schema: Schema name of this type. For types that exist on the
           target database as an independent schema construct (Postgresql),
           this parameter specifies the named schema in which the type is
           present.

           .. note::

                The ``schema`` of the :class:`.Enum` type does not
                by default make use of the ``schema`` established on the
                owning :class:`.Table`.  If this behavior is desired,
                set the ``inherit_schema`` flag to ``True``.

        :param quote: Force quoting to be on or off on the type's name. If
           left as the default of `None`, the usual schema-level \"case
           sensitive\"/\"reserved name\" rules are used to determine if this
           type's name should be quoted.

        :param inherit_schema: When ``True``, the \"schema\" from the owning
           :class:`.Table` will be copied to the \"schema\" attribute of this
           :class:`.Enum`, replacing whatever value was passed for the
           ``schema`` attribute.   This also takes effect when using the
           :meth:`.Table.tometadata` operation.

           .. versionadded:: 0.8

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [68557 72135])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72153 72157]))                          )
                        (reparse-symbol indented_block_body) [72140 72310])
                    ("_should_create_constraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72345 72349])
                            ("compiler" variable nil (reparse-symbol function_parameters) [72351 72359]))                          )
                        (reparse-symbol indented_block_body) [72315 72465])
                    ("_set_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72485 72489])
                            ("column" variable nil (reparse-symbol function_parameters) [72491 72497])
                            ("table" variable nil (reparse-symbol function_parameters) [72499 72504]))                          )
                        (reparse-symbol indented_block_body) [72470 72912])
                    ("adapt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72927 72931])
                            ("impltype" variable nil (reparse-symbol function_parameters) [72933 72941])
                            ("kw" variable nil (reparse-symbol function_parameters) [72943 72947]))                          )
                        (reparse-symbol indented_block_body) [72917 73598]))                  
                :type "class")
                nil [68114 73598])
            ("PickleType" type
               (:documentation "Holds Python objects, which are serialized using pickle.

    PickleType builds upon the Binary type to apply Python's
    ``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on
    the way out, allowing any pickleable Python object to be stored as
    a serialized binary field.

    To allow ORM change events to propagate for elements associated
    with :class:`.PickleType`, see :ref:`mutable_toplevel`.

    "
                :superclasses ("TypeDecorator")
                :members 
                  ( ("impl" variable nil (reparse-symbol indented_block_body) [74074 74092])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Construct a PickleType.

        :param protocol: defaults to ``pickle.HIGHEST_PROTOCOL``.

        :param pickler: defaults to cPickle.pickle or pickle.pickle if
          cPickle is not available.  May be any object with
          pickle-compatible ``dumps` and ``loads`` methods.

        :param comparator: a 2-arg callable predicate used
          to compare values of this type.  If left as ``None``,
          the Python \"equals\" operator is used to compare values.

        \"\"\"" code nil (reparse-symbol indented_block_body) [74211 74708])
                            ("self" variable nil (reparse-symbol indented_block_body) [74717 74741])
                            ("self" code nil (reparse-symbol indented_block_body) [74750 74782])
                            ("self" variable nil (reparse-symbol indented_block_body) [74791 74819])
                            ("super" code nil (reparse-symbol indented_block_body) [74828 74862]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74111 74115])
                            ("protocol" variable nil (reparse-symbol function_parameters) [74117 74125])
                            ("pickler" variable nil (reparse-symbol function_parameters) [74171 74178])
                            ("comparator" variable nil (reparse-symbol function_parameters) [74185 74195]))                          
                        :documentation "
        Construct a PickleType.

        :param protocol: defaults to ``pickle.HIGHEST_PROTOCOL``.

        :param pickler: defaults to cPickle.pickle or pickle.pickle if
          cPickle is not available.  May be any object with
          pickle-compatible ``dumps` and ``loads`` methods.

        :param comparator: a 2-arg callable predicate used
          to compare values of this type.  If left as ``None``,
          the Python \"equals\" operator is used to compare values.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74098 74863])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74883 74887]))                          )
                        (reparse-symbol indented_block_body) [74868 75012])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75036 75040])
                            ("dialect" variable nil (reparse-symbol function_parameters) [75042 75049]))                          )
                        (reparse-symbol indented_block_body) [75017 75559])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75585 75589])
                            ("dialect" variable nil (reparse-symbol function_parameters) [75591 75598])
                            ("coltype" variable nil (reparse-symbol function_parameters) [75600 75607]))                          )
                        (reparse-symbol indented_block_body) [75564 76093])
                    ("compare_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76117 76121])
                            ("x" variable nil (reparse-symbol function_parameters) [76123 76124])
                            ("y" variable nil (reparse-symbol function_parameters) [76126 76127]))                          )
                        (reparse-symbol indented_block_body) [76098 76239]))                  
                :type "class")
                nil [73600 76239])
            ("Boolean" type
               (:documentation "A bool datatype.

    Boolean typically uses BOOLEAN or SMALLINT on the DDL side, and on
    the Python side deals in ``True`` or ``False``.

    "
                :superclasses ("TypeEngine" "SchemaType")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [76442 76468])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a Boolean.

        :param create_constraint: defaults to True.  If the boolean
          is generated as an int/smallint, also create a CHECK constraint
          on the table that ensures 1 or 0 as a value.

        :param name: if a CHECK constraint is generated, specify
          the name of the constraint.

        \"\"\"" code nil (reparse-symbol indented_block_body) [76537 76875])
                            ("self" variable nil (reparse-symbol indented_block_body) [76884 76926])
                            ("self" variable nil (reparse-symbol indented_block_body) [76935 76951]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76487 76491])
                            ("create_constraint" variable nil (reparse-symbol function_parameters) [76493 76510])
                            ("name" variable nil (reparse-symbol function_parameters) [76517 76521]))                          
                        :documentation "Construct a Boolean.

        :param create_constraint: defaults to True.  If the boolean
          is generated as an int/smallint, also create a CHECK constraint
          on the table that ensures 1 or 0 as a value.

        :param name: if a CHECK constraint is generated, specify
          the name of the constraint.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [76474 76952])
                    ("_should_create_constraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76987 76991])
                            ("compiler" variable nil (reparse-symbol function_parameters) [76993 77001]))                          )
                        (reparse-symbol indented_block_body) [76957 77064])
                    ("_set_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77084 77088])
                            ("column" variable nil (reparse-symbol function_parameters) [77090 77096])
                            ("table" variable nil (reparse-symbol function_parameters) [77098 77103]))                          )
                        (reparse-symbol indented_block_body) [77069 77477])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77512 77516]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [77482 77539])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77563 77567])
                            ("dialect" variable nil (reparse-symbol function_parameters) [77569 77576]))                          )
                        (reparse-symbol indented_block_body) [77544 77706])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77732 77736])
                            ("dialect" variable nil (reparse-symbol function_parameters) [77738 77745])
                            ("coltype" variable nil (reparse-symbol function_parameters) [77747 77754]))                          )
                        (reparse-symbol indented_block_body) [77711 77884]))                  
                :type "class")
                nil [76241 77884])
            ("Interval" type
               (:documentation "A type for ``datetime.timedelta()`` objects.

    The Interval type deals with ``datetime.timedelta`` objects.  In
    PostgreSQL, the native ``INTERVAL`` type is used; for others, the
    value is stored as a date which is relative to the \"epoch\"
    (Jan. 1, 1970).

    Note that the ``Interval`` type does not currently provide date arithmetic
    operations on platforms which do not support interval types natively. Such
    operations usually require transformation of both sides of the expression
    (such as, conversion of both sides into integer epoch values first) which
    currently is a manual procedure (such as via
    :attr:`~sqlalchemy.sql.expression.func`).

    "
                :superclasses ("_DateAffinity" "TypeDecorator")
                :members 
                  ( ("impl" variable nil (reparse-symbol indented_block_body) [78631 78646])
                    ("epoch" variable nil (reparse-symbol indented_block_body) [78651 78690])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct an Interval object.

        :param native: when True, use the actual
          INTERVAL type provided by the database, if
          supported (currently Postgresql, Oracle).
          Otherwise, represent the interval data as
          an epoch value regardless.

        :param second_precision: For native interval types
          which support a \"fractional seconds precision\" parameter,
          i.e. Oracle and Postgresql

        :param day_precision: for native interval types which
          support a \"day precision\" parameter, i.e. Oracle.

        \"\"\"" code nil (reparse-symbol indented_block_body) [78828 79405])
                            ("super" code nil (reparse-symbol indented_block_body) [79414 79446])
                            ("self" variable nil (reparse-symbol indented_block_body) [79455 79475])
                            ("self" variable nil (reparse-symbol indented_block_body) [79484 79524])
                            ("self" variable nil (reparse-symbol indented_block_body) [79533 79567]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78709 78713])
                            ("native" variable nil (reparse-symbol function_parameters) [78715 78721])
                            ("second_precision" variable nil (reparse-symbol function_parameters) [78752 78768])
                            ("day_precision" variable nil (reparse-symbol function_parameters) [78799 78812]))                          
                        :documentation "Construct an Interval object.

        :param native: when True, use the actual
          INTERVAL type provided by the database, if
          supported (currently Postgresql, Oracle).
          Otherwise, represent the interval data as
          an epoch value regardless.

        :param second_precision: For native interval types
          which support a \"fractional seconds precision\" parameter,
          i.e. Oracle and Postgresql

        :param day_precision: for native interval types which
          support a \"day precision\" parameter, i.e. Oracle.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78696 79568])
                    ("adapt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79583 79587])
                            ("cls" variable nil (reparse-symbol function_parameters) [79589 79592])
                            ("kw" variable nil (reparse-symbol function_parameters) [79594 79598]))                          )
                        (reparse-symbol indented_block_body) [79573 79983])
                    ("python_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80018 80022]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [79988 80053])
                    ("bind_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80077 80081])
                            ("dialect" variable nil (reparse-symbol function_parameters) [80083 80090]))                          )
                        (reparse-symbol indented_block_body) [80058 80541])
                    ("result_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80567 80571])
                            ("dialect" variable nil (reparse-symbol function_parameters) [80573 80580])
                            ("coltype" variable nil (reparse-symbol function_parameters) [80582 80589]))                          )
                        (reparse-symbol indented_block_body) [80546 81069])
                    ("_expression_adaptations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81130 81134]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [81074 81728])
                    ("_type_affinity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81766 81770]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [81733 81797])
                    ("coerce_compared_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81828 81832])
                            ("op" variable nil (reparse-symbol function_parameters) [81834 81836])
                            ("value" variable nil (reparse-symbol function_parameters) [81838 81843]))                          
                        :documentation "See :meth:`.TypeEngine.coerce_compared_value` for a description.")
                        (reparse-symbol indented_block_body) [81802 81984]))                  
                :type "class")
                nil [77886 81984])
            ("REAL" type
               (:documentation "The SQL REAL type."
                :superclasses ("Float")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82039 82062]))                  
                :type "class")
                nil [81986 82063])
            ("FLOAT" type
               (:documentation "The SQL FLOAT type."
                :superclasses ("Float")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82120 82144]))                  
                :type "class")
                nil [82065 82145])
            ("NUMERIC" type
               (:documentation "The SQL NUMERIC type."
                :superclasses ("Numeric")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82208 82234]))                  
                :type "class")
                nil [82147 82235])
            ("DECIMAL" type
               (:documentation "The SQL DECIMAL type."
                :superclasses ("Numeric")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82298 82324]))                  
                :type "class")
                nil [82237 82325])
            ("INTEGER" type
               (:documentation "The SQL INT or INTEGER type."
                :superclasses ("Integer")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82395 82421]))                  
                :type "class")
                nil [82327 82422])
            ("INT" variable nil nil [82422 82435])
            ("SMALLINT" type
               (:documentation "The SQL SMALLINT type."
                :superclasses ("SmallInteger")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82506 82533]))                  
                :type "class")
                nil [82438 82534])
            ("BIGINT" type
               (:documentation "The SQL BIGINT type."
                :superclasses ("BigInteger")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82598 82623]))                  
                :type "class")
                nil [82536 82624])
            ("TIMESTAMP" type
               (:documentation "The SQL TIMESTAMP type."
                :superclasses ("DateTime")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82692 82720])
                    ("get_dbapi_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82745 82749])
                            ("dbapi" variable nil (reparse-symbol function_parameters) [82751 82756]))                          )
                        (reparse-symbol indented_block_body) [82726 82790]))                  
                :type "class")
                nil [82626 82790])
            ("DATETIME" type
               (:documentation "The SQL DATETIME type."
                :superclasses ("DateTime")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82856 82883]))                  
                :type "class")
                nil [82792 82884])
            ("DATE" type
               (:documentation "The SQL DATE type."
                :superclasses ("Date")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [82938 82961]))                  
                :type "class")
                nil [82886 82962])
            ("TIME" type
               (:documentation "The SQL TIME type."
                :superclasses ("Time")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83016 83039]))                  
                :type "class")
                nil [82964 83040])
            ("TEXT" type
               (:documentation "The SQL TEXT type."
                :superclasses ("Text")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83094 83117]))                  
                :type "class")
                nil [83042 83118])
            ("CLOB" type
               (:documentation "The CLOB type.

    This type is found in Oracle and Informix.
    "
                :superclasses ("Text")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83221 83244]))                  
                :type "class")
                nil [83120 83245])
            ("VARCHAR" type
               (:documentation "The SQL VARCHAR type."
                :superclasses ("String")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83307 83333]))                  
                :type "class")
                nil [83247 83334])
            ("NVARCHAR" type
               (:documentation "The SQL NVARCHAR type."
                :superclasses ("Unicode")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83399 83426]))                  
                :type "class")
                nil [83336 83427])
            ("CHAR" type
               (:documentation "The SQL CHAR type."
                :superclasses ("String")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83483 83506]))                  
                :type "class")
                nil [83429 83507])
            ("NCHAR" type
               (:documentation "The SQL NCHAR type."
                :superclasses ("Unicode")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83566 83590]))                  
                :type "class")
                nil [83509 83591])
            ("BLOB" type
               (:documentation "The SQL BLOB type."
                :superclasses ("LargeBinary")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83652 83675]))                  
                :type "class")
                nil [83593 83676])
            ("BINARY" type
               (:documentation "The SQL BINARY type."
                :superclasses ("_Binary")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83737 83762]))                  
                :type "class")
                nil [83678 83763])
            ("VARBINARY" type
               (:documentation "The SQL VARBINARY type."
                :superclasses ("_Binary")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83830 83858]))                  
                :type "class")
                nil [83765 83859])
            ("BOOLEAN" type
               (:documentation "The SQL BOOLEAN type."
                :superclasses ("Boolean")
                :members 
                  ( ("__visit_name__" variable nil (reparse-symbol indented_block_body) [83922 83948]))                  
                :type "class")
                nil [83861 83949])
            ("NULLTYPE" variable nil nil [83950 83971])
            ("BOOLEANTYPE" variable nil nil [83972 83995])
            ("STRINGTYPE" variable nil nil [83996 84017])
            ("_type_map" variable nil nil [84019 84362]))          
      :file "types.py"
      :pointmax 84363
      :fsize 84362
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax '((FROM 1270 . 1274) (PERIOD 1275 . 1276) (FROM 1245 . 1249) (PERIOD 1250 . 1251) (FROM 1192 . 1196) (PERIOD 1197 . 1198) (FROM 1165 . 1169) (PERIOD 1170 . 1171) (FROM 1106 . 1110) (PERIOD 1111 . 1112)))
    (semanticdb-table "exc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Exceptions used with SQLAlchemy.

The base exception class is :class:`.SQLAlchemyError`.  Exceptions which are
raised as a result of DBAPI exceptions are all subclasses of
:class:`.DBAPIError`.

\"\"\"" code nil nil [237 438])
            ("traceback" include nil nil [440 456])
            ("SQLAlchemyError" type
               (:documentation "Generic error class."
                :superclasses ("Exception")
                :type "class")
                nil [459 524])
            ("ArgumentError" type
               (:documentation "Raised when an invalid or conflicting function argument is supplied.

    This error generally corresponds to construction time state errors.

    "
                :superclasses ("SQLAlchemyError")
                :type "class")
                nil [526 722])
            ("NoForeignKeysError" type
               (:documentation "Raised when no foreign keys can be located between two selectables
    during a join."
                :superclasses ("ArgumentError")
                :type "class")
                nil [724 861])
            ("AmbiguousForeignKeysError" type
               (:documentation "Raised when more than one foreign key matching can be located
    between two selectables during a join."
                :superclasses ("ArgumentError")
                :type "class")
                nil [863 1026])
            ("CircularDependencyError" type
               (:documentation "Raised by topological sorts when a circular dependency is detected.

    There are two scenarios where this error occurs:

    * In a Session flush operation, if two objects are mutually dependent
      on each other, they can not be inserted or deleted via INSERT or
      DELETE statements alone; an UPDATE will be needed to post-associate
      or pre-deassociate one of the foreign key constrained values.
      The ``post_update`` flag described at :ref:`post_update` can resolve
      this cycle.
    * In a :meth:`.MetaData.create_all`, :meth:`.MetaData.drop_all`,
      :attr:`.MetaData.sorted_tables` operation, two :class:`.ForeignKey`
      or :class:`.ForeignKeyConstraint` objects mutually refer to each
      other.  Apply the ``use_alter=True`` flag to one or both,
      see :ref:`use_alter`.

    "
                :superclasses ("SQLAlchemyError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1967 2092])
                            ("SQLAlchemyError" code nil (reparse-symbol indented_block_body) [2100 2139])
                            ("self" variable nil (reparse-symbol indented_block_body) [2148 2168])
                            ("self" variable nil (reparse-symbol indented_block_body) [2177 2195]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1918 1922])
                            ("message" variable nil (reparse-symbol function_parameters) [1924 1931])
                            ("cycles" variable nil (reparse-symbol function_parameters) [1933 1939])
                            ("edges" variable nil (reparse-symbol function_parameters) [1941 1946])
                            ("msg" variable nil (reparse-symbol function_parameters) [1948 1951]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1905 2196])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2216 2220]))                          )
                        (reparse-symbol indented_block_body) [2201 2328]))                  
                :type "class")
                nil [1028 2328])
            ("CompileError" type
               (:documentation "Raised when an error occurs during SQL compilation"
                :superclasses ("SQLAlchemyError")
                :type "class")
                nil [2330 2428])
            ("IdentifierError" type
               (:documentation "Raised when a schema name is beyond the max character limit"
                :superclasses ("SQLAlchemyError")
                :type "class")
                nil [2430 2540])
            ("DisconnectionError" type
               (:documentation "A disconnect is detected on a raw DB-API connection.

    This error is raised and consumed internally by a connection pool.  It can
    be raised by the :meth:`.PoolEvents.checkout` event so that the host pool
    forces a retry; the exception will be caught three times in a row before
    the pool gives up and raises :class:`~sqlalchemy.exc.InvalidRequestError`
    regarding the connection attempt.

    "
                :superclasses ("SQLAlchemyError")
                :type "class")
                nil [2542 3005])
            ("TimeoutError" type
               (:documentation "Raised when a connection pool times out on getting a connection."
                :superclasses ("SQLAlchemyError")
                :type "class")
                nil [3007 3119])
            ("InvalidRequestError" type
               (:documentation "SQLAlchemy was asked to do something it can't do.

    This error generally corresponds to runtime state errors.

    "
                :superclasses ("SQLAlchemyError")
                :type "class")
                nil [3121 3294])
            ("NoInspectionAvailable" type
               (:documentation "A subject passed to :func:`sqlalchemy.inspection.inspect` produced
    no context for inspection."
                :superclasses ("InvalidRequestError")
                :type "class")
                nil [3296 3454])
            ("ResourceClosedError" type
               (:documentation "An operation was requested from a connection, cursor, or other
    object that's in a closed state."
                :superclasses ("InvalidRequestError")
                :type "class")
                nil [3456 3614])
            ("NoSuchColumnError" type
               (:documentation "A nonexistent column is requested from a ``RowProxy``."
                :superclasses ("KeyError" "InvalidRequestError")
                :type "class")
                nil [3616 3737])
            ("NoReferenceError" type
               (:documentation "Raised by ``ForeignKey`` to indicate a reference cannot be resolved."
                :superclasses ("InvalidRequestError")
                :type "class")
                nil [3739 3863])
            ("NoReferencedTableError" type
               (:documentation "Raised by ``ForeignKey`` when the referred ``Table`` cannot be
    located.

    "
                :superclasses ("NoReferenceError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("NoReferenceError" code nil (reparse-symbol indented_block_body) [4053 4093])
                            ("self" variable nil (reparse-symbol indented_block_body) [4102 4125]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4022 4026])
                            ("message" variable nil (reparse-symbol function_parameters) [4028 4035])
                            ("tname" variable nil (reparse-symbol function_parameters) [4037 4042]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4009 4126])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4146 4150]))                          )
                        (reparse-symbol indented_block_body) [4131 4216]))                  
                :type "class")
                nil [3865 4216])
            ("NoReferencedColumnError" type
               (:documentation "Raised by ``ForeignKey`` when the referred ``Column`` cannot be
    located.

    "
                :superclasses ("NoReferenceError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("NoReferenceError" code nil (reparse-symbol indented_block_body) [4415 4455])
                            ("self" variable nil (reparse-symbol indented_block_body) [4464 4487])
                            ("self" variable nil (reparse-symbol indented_block_body) [4496 4520]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4377 4381])
                            ("message" variable nil (reparse-symbol function_parameters) [4383 4390])
                            ("tname" variable nil (reparse-symbol function_parameters) [4392 4397])
                            ("cname" variable nil (reparse-symbol function_parameters) [4399 4404]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4364 4521])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4541 4545]))                          )
                        (reparse-symbol indented_block_body) [4526 4657]))                  
                :type "class")
                nil [4218 4657])
            ("NoSuchTableError" type
               (:documentation "Table does not exist or is not visible to a connection."
                :superclasses ("InvalidRequestError")
                :type "class")
                nil [4659 4770])
            ("UnboundExecutionError" type
               (:documentation "SQL was attempted without a database connection to execute it on."
                :superclasses ("InvalidRequestError")
                :type "class")
                nil [4772 4898])
            ("DontWrapMixin" type
               (:documentation "A mixin class which, when applied to a user-defined Exception class,
    will not be wrapped inside of :class:`.StatementError` if the error is
    emitted within the process of executing a statement.

    E.g.::

        from sqlalchemy.exc import DontWrapMixin

        class MyCustomException(Exception, DontWrapMixin):
            pass

        class MySpecialType(TypeDecorator):
            impl = String

            def process_bind_param(self, value, dialect):
                if value == 'invalid':
                    raise MyCustomException(\"invalid!\")

    "
                :superclasses ("object")
                :type "class")
                nil [4900 5510])
            ("sys" include nil nil [5510 5520])
            ("if" code nil nil [5521 5589])
            ("UnmappedColumnError" variable nil nil [5669 5695])
            ("StatementError" type
               (:documentation "An error occurred during execution of a SQL statement.

    :class:`StatementError` wraps the exception raised
    during execution, and features :attr:`.statement`
    and :attr:`.params` attributes which supply context regarding
    the specifics of the statement which had an issue.

    The wrapped exception object is available in
    the :attr:`.orig` attribute.

    "
                :superclasses ("SQLAlchemyError")
                :members 
                  ( ("statement" variable nil (reparse-symbol indented_block_body) [6127 6143])
                    ("\"\"\"The string SQL statement being invoked when this exception occurred.\"\"\"" code nil (reparse-symbol indented_block_body) [6148 6222])
                    ("params" variable nil (reparse-symbol indented_block_body) [6228 6241])
                    ("\"\"\"The parameter list being used when this exception occurred.\"\"\"" code nil (reparse-symbol indented_block_body) [6246 6311])
                    ("orig" variable nil (reparse-symbol indented_block_body) [6317 6328])
                    ("\"\"\"The DBAPI exception object.\"\"\"" code nil (reparse-symbol indented_block_body) [6333 6366])
                    ("__init__" function
                       (:suite 
                          ( ("SQLAlchemyError" code nil (reparse-symbol indented_block_body) [6434 6473])
                            ("self" variable nil (reparse-symbol indented_block_body) [6482 6508])
                            ("self" variable nil (reparse-symbol indented_block_body) [6517 6537])
                            ("self" variable nil (reparse-symbol indented_block_body) [6546 6562]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6385 6389])
                            ("message" variable nil (reparse-symbol function_parameters) [6391 6398])
                            ("statement" variable nil (reparse-symbol function_parameters) [6400 6409])
                            ("params" variable nil (reparse-symbol function_parameters) [6411 6417])
                            ("orig" variable nil (reparse-symbol function_parameters) [6419 6423]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6372 6563])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6583 6587]))                          )
                        (reparse-symbol indented_block_body) [6568 6708])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6725 6729]))                          )
                        (reparse-symbol indented_block_body) [6713 6952])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6973 6977]))                          )
                        (reparse-symbol indented_block_body) [6957 7010]))                  
                :type "class")
                nil [5698 7010])
            ("DBAPIError" type
               (:documentation "Raised when the execution of a database operation fails.

    Wraps exceptions raised by the DB-API underlying the
    database operation.  Driver-specific implementations of the standard
    DB-API exception types are wrapped by matching sub-types of SQLAlchemy's
    :class:`DBAPIError` when possible.  DB-API's ``Error`` type maps to
    :class:`DBAPIError` in SQLAlchemy, otherwise the names are identical.  Note
    that there is no guarantee that different DB-API implementations will
    raise the same exception type for any given error condition.

    :class:`DBAPIError` features :attr:`~.StatementError.statement`
    and :attr:`~.StatementError.params` attributes which supply context
    regarding the specifics of the statement which had an issue, for the
    typical case when the error was raised within the context of
    emitting a SQL statement.

    The wrapped exception object is available in the
    :attr:`~.StatementError.orig` attribute. Its type and properties are
    DB-API implementation specific.

    "
                :superclasses ("StatementError")
                :members 
                  ( ("instance" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8125 8128])
                            ("statement" variable nil (reparse-symbol function_parameters) [8130 8139])
                            ("params" variable nil (reparse-symbol function_parameters) [8141 8147])
                            ("orig" variable nil (reparse-symbol function_parameters) [8173 8177])
                            ("dbapi_base_err" variable nil (reparse-symbol function_parameters) [8203 8217])
                            ("connection_invalidated" variable nil (reparse-symbol function_parameters) [8243 8265]))                          )
                        (reparse-symbol indented_block_body) [8095 9171])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9191 9195]))                          )
                        (reparse-symbol indented_block_body) [9176 9319])
                    ("__init__" function
                       (:suite 
                          ( ("try" code nil (reparse-symbol indented_block_body) [9407 9613])
                            ("StatementError" code nil (reparse-symbol indented_block_body) [9621 9810])
                            ("self" variable nil (reparse-symbol indented_block_body) [9819 9871]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9337 9341])
                            ("statement" variable nil (reparse-symbol function_parameters) [9343 9352])
                            ("params" variable nil (reparse-symbol function_parameters) [9354 9360])
                            ("orig" variable nil (reparse-symbol function_parameters) [9362 9366])
                            ("connection_invalidated" variable nil (reparse-symbol function_parameters) [9368 9390]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9324 9872]))                  
                :type "class")
                nil [7012 9872])
            ("InterfaceError" type
               (:documentation "Wraps a DB-API InterfaceError."
                :superclasses ("DBAPIError")
                :type "class")
                nil [9874 9949])
            ("DatabaseError" type
               (:documentation "Wraps a DB-API DatabaseError."
                :superclasses ("DBAPIError")
                :type "class")
                nil [9951 10024])
            ("DataError" type
               (:documentation "Wraps a DB-API DataError."
                :superclasses ("DatabaseError")
                :type "class")
                nil [10026 10094])
            ("OperationalError" type
               (:documentation "Wraps a DB-API OperationalError."
                :superclasses ("DatabaseError")
                :type "class")
                nil [10096 10178])
            ("IntegrityError" type
               (:documentation "Wraps a DB-API IntegrityError."
                :superclasses ("DatabaseError")
                :type "class")
                nil [10180 10258])
            ("InternalError" type
               (:documentation "Wraps a DB-API InternalError."
                :superclasses ("DatabaseError")
                :type "class")
                nil [10260 10336])
            ("ProgrammingError" type
               (:documentation "Wraps a DB-API ProgrammingError."
                :superclasses ("DatabaseError")
                :type "class")
                nil [10338 10420])
            ("NotSupportedError" type
               (:documentation "Wraps a DB-API NotSupportedError."
                :superclasses ("DatabaseError")
                :type "class")
                nil [10422 10506])
            ("SADeprecationWarning" type
               (:documentation "Issued once per usage of a deprecated API."
                :superclasses ("DeprecationWarning")
                :type "class")
                nil [10520 10621])
            ("SAPendingDeprecationWarning" type
               (:documentation "Issued once per usage of a deprecated API."
                :superclasses ("PendingDeprecationWarning")
                :type "class")
                nil [10623 10738])
            ("SAWarning" type
               (:documentation "Issued at runtime."
                :superclasses ("RuntimeWarning")
                :type "class")
                nil [10740 10802]))          
      :file "exc.py"
      :pointmax 10802
      :fsize 10801
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "interfaces.py"
      :file "interfaces.py"
      :fsize 10918
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "events.py"
      :file "events.py"
      :fsize 27008
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "event.py"
      :file "event.py"
      :fsize 17634
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "log.py"
      :file "log.py"
      :fsize 6796
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "processors.py"
      :file "processors.py"
      :fsize 4527
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "schema.py"
      :file "schema.py"
      :fsize 131491
      :lastmodtime '(21002 33914 0 0)))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!sqlalchemy!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
