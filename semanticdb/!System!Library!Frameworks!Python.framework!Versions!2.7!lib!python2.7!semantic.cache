;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("errno" include nil nil [1169 1186])
            ("sys" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770])
            ("if" code nil nil [25771 26301]))          
      :file "os.py"
      :pointmax 26301
      :fsize 26300
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "hashlib.py"
      :major-mode 'python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2057])
            ("__always_supported" variable nil nil [2169 2245])
            ("algorithms" variable nil nil [2247 2278])
            ("__all__" code nil nil [2280 2332])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2365 2369]))              ) nil [2335 3203])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3235 3239]))              ) nil [3205 3612])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3627 3631])
                    ("string" variable nil (reparse-symbol function_parameters) [3633 3639]))                  )
                nil [3614 3831])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3848 3852])
                    ("string" variable nil (reparse-symbol function_parameters) [3854 3860]))                  )
                nil [3833 4393])
            ("try" code nil nil [4395 4566])
            ("for" code nil nil [4567 4894])
            ("del" code nil nil [4914 4961])
            ("del" code nil nil [4962 5013]))          
      :file "hashlib.py"
      :pointmax 5014
      :fsize 5013
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base64.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [25 78])
            ("re" include nil nil [210 219])
            ("struct" include nil nil [220 233])
            ("binascii" include nil nil [234 249])
            ("__all__" variable nil nil [252 826])
            ("_translation" variable nil nil [828 873])
            ("EMPTYSTRING" variable nil nil [874 890])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [908 909])
                ("altchars" variable nil (reparse-symbol function_parameters) [911 919]))              ) nil [893 1067])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1127 1128])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1130 1138]))                  )
                nil [1113 1721])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1737 1738])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1740 1748]))                  )
                nil [1723 2433])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2458 2459]))                  )
                nil [2435 2618])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2642 2643]))                  )
                nil [2619 2939])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2962 2963]))                  )
                nil [2940 3192])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3215 3216]))                  )
                nil [3193 3584])
            ("_b32alphabet" variable nil nil [3638 3975])
            ("_b32tab" variable nil nil [3977 4007])
            ("_b32tab" code nil nil [4008 4022])
            ("_b32tab" variable nil nil [4023 4056])
            ("_b32rev" variable nil nil [4057 4120])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4137 4138]))                  )
                nil [4123 5900])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5916 5917])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5919 5927])
                    ("map01" variable nil (reparse-symbol function_parameters) [5935 5940]))                  )
                nil [5902 8386])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8560 8561]))                  )
                nil [8546 8713])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8729 8730])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8732 8740]))                  )
                nil [8715 9291])
            ("MAXLINESIZE" variable nil nil [9454 9470])
            ("MAXBINSIZE" code nil nil [9492 9523])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9536 9541])
                    ("output" variable nil (reparse-symbol function_parameters) [9543 9549]))                  )
                nil [9525 9876])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9889 9894])
                    ("output" variable nil (reparse-symbol function_parameters) [9896 9902]))                  )
                nil [9878 10079])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10098 10099]))                  )
                nil [10081 10339])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10358 10359]))                  )
                nil [10341 10423])
            ("test" function (:documentation "Small test program") nil [10452 11193])
            ("test1" function nil nil [11195 11318])
            ("if" code nil nil [11320 11358]))          
      :file "base64.py"
      :pointmax 11358
      :fsize 11357
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "urlparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("__all__" variable nil nil [1132 1254])
            ("uses_relative" variable nil nil [1314 1487])
            ("uses_netloc" variable nil nil [1488 1739])
            ("non_hierarchical" variable nil nil [1740 1864])
            ("uses_params" variable nil nil [1865 2020])
            ("uses_query" variable nil nil [2021 2143])
            ("uses_fragment" variable nil nil [2144 2301])
            ("scheme_chars" variable nil nil [2338 2479])
            ("MAX_CACHE_SIZE" variable nil nil [2481 2500])
            ("_parse_cache" variable nil nil [2501 2518])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2520 2597])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2714 2718]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2687 2957])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2989 2993]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2962 3200])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3232 3236]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3205 3554])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3582 3586]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3559 3785]))                  
                :type "class")
                nil [2599 3785])
            ("collections" include nil nil [3786 3820])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3923 3937])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3954 3958]))                          )
                        (reparse-symbol indented_block_body) [3943 3993]))                  
                :type "class")
                nil [3822 3993])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4103 4117])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4134 4138]))                          )
                        (reparse-symbol indented_block_body) [4123 4173]))                  
                :type "class")
                nil [3995 4173])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4188 4191])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4193 4199])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4204 4219]))                  )
                nil [4175 4813])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4831 4834]))              ) nil [4814 5010])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5028 5031])
                ("start" variable nil (reparse-symbol function_parameters) [5033 5038]))              ) nil [5011 5459])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5473 5476])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5478 5484])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5489 5504]))                  )
                nil [5460 7721])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7737 7741]))                  )
                nil [7722 8176])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8192 8196]))                  )
                nil [8177 8948])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [8961 8965])
                    ("url" variable nil (reparse-symbol function_parameters) [8967 8970])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [8972 8987]))                  )
                nil [8949 10751])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [10766 10769]))                  )
                nil [10752 11147])
            ("_hexdig" variable nil nil [11427 11461])
            ("_hextochr" variable nil nil [11462 11554])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11568 11569]))                  )
                nil [11556 11950])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [11964 11966])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [11968 11985])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [11989 12003]))                  )
                nil [11951 12921])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12936 12938])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12940 12957])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12961 12975]))                  )
                nil [12922 14380]))          
      :file "urlparse.py"
      :pointmax 14380
      :fsize 14379
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((COMMA 4082 . 4083) (NAME 4013 . 4023) (PAREN_BLOCK 4023 . 4082) (COMMA 3902 . 3903) (NAME 3840 . 3850) (PAREN_BLOCK 3850 . 3902)))
    (semanticdb-table "ast.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
\"\"\"" code nil nil [25 1127])
            ("_ast" include nil nil [1128 1146])
            ("_ast" include nil nil [1147 1175])
            ("parse" function
               (:documentation "
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [1188 1194])
                    ("filename" variable nil (reparse-symbol function_parameters) [1196 1204])
                    ("mode" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1178 1411])
            ("literal_eval" function
               (:documentation "
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
    "
                :arguments 
                  ( ("node_or_string" variable nil (reparse-symbol function_parameters) [1430 1444]))                  )
                nil [1413 3139])
            ("dump" function
               (:documentation "
    Return a formatted dump of the tree in *node*.  This is mainly useful for
    debugging purposes.  The returned string will show the names and the values
    for fields.  This makes the code impossible to evaluate, so if evaluation is
    wanted *annotate_fields* must be set to False.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    *include_attributes* can be set to True.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [3150 3154])
                    ("annotate_fields" variable nil (reparse-symbol function_parameters) [3156 3171])
                    ("include_attributes" variable nil (reparse-symbol function_parameters) [3178 3196]))                  )
                nil [3141 4518])
            ("copy_location" function
               (:documentation "
    Copy source location (`lineno` and `col_offset` attributes) from
    *old_node* to *new_node* if possible, and return *new_node*.
    "
                :arguments 
                  ( ("new_node" variable nil (reparse-symbol function_parameters) [4538 4546])
                    ("old_node" variable nil (reparse-symbol function_parameters) [4548 4556]))                  )
                nil [4520 4945])
            ("fix_missing_locations" function
               (:documentation "
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [4973 4977]))                  )
                nil [4947 5914])
            ("increment_lineno" function
               (:documentation "
    Increment the line number of each node in the tree starting at *node* by *n*.
    This is useful to \"move code\" to a different location in a file.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [5937 5941])
                    ("n" variable nil (reparse-symbol function_parameters) [5943 5944]))                  )
                nil [5916 6262])
            ("iter_fields" function
               (:documentation "
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6280 6284]))                  )
                nil [6264 6551])
            ("iter_child_nodes" function
               (:documentation "
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6574 6578]))                  )
                nil [6553 6972])
            ("get_docstring" function
               (:documentation "
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6992 6996])
                    ("clean" variable nil (reparse-symbol function_parameters) [6998 7003]))                  )
                nil [6974 7573])
            ("walk" function
               (:documentation "
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [7584 7588]))                  )
                nil [7575 7999])
            ("NodeVisitor" type
               (:documentation "
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    "
                :superclasses ("object")
                :members 
                  ( ("visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8882 8886])
                            ("node" variable nil (reparse-symbol function_parameters) [8888 8892]))                          
                        :documentation "Visit a node.")
                        (reparse-symbol indented_block_body) [8872 9064])
                    ("generic_visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9087 9091])
                            ("node" variable nil (reparse-symbol function_parameters) [9093 9097]))                          
                        :documentation "Called if no explicit visitor function exists for a node.")
                        (reparse-symbol indented_block_body) [9069 9456]))                  
                :type "class")
                nil [8001 9456])
            ("NodeTransformer" type
               (:documentation "
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return copy_location(Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Index(value=Str(s=node.id)),
                   ctx=node.ctx
               ), node)

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    "
                :superclasses ("NodeVisitor")
                :members 
                  ( ("generic_visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10900 10904])
                            ("node" variable nil (reparse-symbol function_parameters) [10906 10910]))                          )
                        (reparse-symbol indented_block_body) [10882 11806]))                  
                :type "class")
                nil [9458 11806]))          
      :file "ast.py"
      :pointmax 11806
      :fsize 11805
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "uuid.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"UUID objects (universally unique identifiers) according to RFC 4122.

This module provides immutable UUID objects (class UUID) and the functions
uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5
UUIDs as specified in RFC 4122.

If all you want is a unique ID, you should probably call uuid1() or uuid4().
Note that uuid1() may compromise privacy since it creates a UUID containing
the computer's network address.  uuid4() creates a random UUID.

Typical usage:

    >>> import uuid

    # make a UUID based on the host ID and current time
    >>> uuid.uuid1()
    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

    # make a UUID using an MD5 hash of a namespace UUID and a name
    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

    # make a random UUID
    >>> uuid.uuid4()
    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

    # make a UUID using a SHA-1 hash of a namespace UUID and a name
    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

    # make a UUID from a string of hex digits (braces and hyphens ignored)
    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

    # convert a UUID to a string of hex digits in standard form
    >>> str(x)
    '00010203-0405-0607-0809-0a0b0c0d0e0f'

    # get the raw 16 bytes of the UUID
    >>> x.bytes
    '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'

    # make a UUID from a 16-byte string
    >>> uuid.UUID(bytes=x.bytes)
    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
\"\"\"" code nil nil [1 1584])
            ("__author__" variable nil nil [1586 1628])
            ("RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, RESERVED_FUTURE" code nil nil [1630 1834])
            ("UUID" type
               (:documentation "Instances of the UUID class represent UUIDs as specified in RFC 4122.
    UUID objects are immutable, hashable, and usable as dictionary keys.
    Converting a UUID to a string with str() yields something in the form
    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts
    five possible forms: a similar string of hexadecimal digits, or a tuple
    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and
    48-bit values respectively) as an argument named 'fields', or a string
    of 16 bytes (with all the integer fields in big-endian order) as an
    argument named 'bytes', or a string of 16 bytes (with the first three
    fields in little-endian order) as an argument named 'bytes_le', or a
    single 128-bit integer as an argument named 'int'.

    UUIDs have these read-only attributes:

        bytes       the UUID as a 16-byte string (containing the six
                    integer fields in big-endian byte order)

        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,
                    and time_hi_version in little-endian byte order)

        fields      a tuple of the six integer fields of the UUID,
                    which are also available as six individual attributes
                    and two derived attributes:

            time_low                the first 32 bits of the UUID
            time_mid                the next 16 bits of the UUID
            time_hi_version         the next 16 bits of the UUID
            clock_seq_hi_variant    the next 8 bits of the UUID
            clock_seq_low           the next 8 bits of the UUID
            node                    the last 48 bits of the UUID

            time                    the 60-bit timestamp
            clock_seq               the 14-bit sequence number

        hex         the UUID as a 32-character hexadecimal string

        int         the UUID as a 128-bit integer

        urn         the UUID as a URN as specified in RFC 4122

        variant     the UUID variant (one of the constants RESERVED_NCS,
                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)

        version     the UUID version number (1 through 5, meaningful only
                    when the variant is RFC_4122)
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:

        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\\x12\\x34\\x56\\x78'*4)
        UUID(bytes_le='\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +
                      '\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)

        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4263 5659])
                            ("if" code nil (reparse-symbol indented_block_body) [5669 5806])
                            ("if" code nil (reparse-symbol indented_block_body) [5814 6084])
                            ("if" code nil (reparse-symbol indented_block_body) [6092 6411])
                            ("if" code nil (reparse-symbol indented_block_body) [6419 6605])
                            ("if" code nil (reparse-symbol indented_block_body) [6613 7795])
                            ("if" code nil (reparse-symbol indented_block_body) [7803 7941])
                            ("if" code nil (reparse-symbol indented_block_body) [7949 8290])
                            ("self" variable nil (reparse-symbol indented_block_body) [8298 8324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4151 4155])
                            ("hex" variable nil (reparse-symbol function_parameters) [4157 4160])
                            ("bytes" variable nil (reparse-symbol function_parameters) [4167 4172])
                            ("bytes_le" variable nil (reparse-symbol function_parameters) [4179 4187])
                            ("fields" variable nil (reparse-symbol function_parameters) [4194 4200])
                            ("int" variable nil (reparse-symbol function_parameters) [4230 4233])
                            ("version" variable nil (reparse-symbol function_parameters) [4240 4247]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4138 8325])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8342 8346])
                            ("other" variable nil (reparse-symbol function_parameters) [8348 8353]))                          )
                        (reparse-symbol indented_block_body) [8330 8466])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8484 8488]))                          )
                        (reparse-symbol indented_block_body) [8471 8521])
                    ("__int__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8538 8542]))                          )
                        (reparse-symbol indented_block_body) [8526 8569])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8587 8591]))                          )
                        (reparse-symbol indented_block_body) [8574 8632])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8653 8657])
                            ("name" variable nil (reparse-symbol function_parameters) [8659 8663])
                            ("value" variable nil (reparse-symbol function_parameters) [8665 8670]))                          )
                        (reparse-symbol indented_block_body) [8637 8727])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8744 8748]))                          )
                        (reparse-symbol indented_block_body) [8732 8886])
                    ("get_bytes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8905 8909]))                          )
                        (reparse-symbol indented_block_body) [8891 9051])
                    ("bytes" variable nil (reparse-symbol indented_block_body) [9056 9083])
                    ("get_bytes_le" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9106 9110]))                          )
                        (reparse-symbol indented_block_body) [9089 9271])
                    ("bytes_le" variable nil (reparse-symbol indented_block_body) [9276 9309])
                    ("get_fields" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9330 9334]))                          )
                        (reparse-symbol indented_block_body) [9315 9479])
                    ("fields" variable nil (reparse-symbol indented_block_body) [9484 9513])
                    ("get_time_low" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9536 9540]))                          )
                        (reparse-symbol indented_block_body) [9519 9574])
                    ("time_low" variable nil (reparse-symbol indented_block_body) [9579 9612])
                    ("get_time_mid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9635 9639]))                          )
                        (reparse-symbol indented_block_body) [9618 9684])
                    ("time_mid" variable nil (reparse-symbol indented_block_body) [9689 9722])
                    ("get_time_hi_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9752 9756]))                          )
                        (reparse-symbol indented_block_body) [9728 9801])
                    ("time_hi_version" variable nil (reparse-symbol indented_block_body) [9806 9853])
                    ("get_clock_seq_hi_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9888 9892]))                          )
                        (reparse-symbol indented_block_body) [9859 9935])
                    ("clock_seq_hi_variant" variable nil (reparse-symbol indented_block_body) [9940 9997])
                    ("get_clock_seq_low" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10025 10029]))                          )
                        (reparse-symbol indented_block_body) [10003 10072])
                    ("clock_seq_low" variable nil (reparse-symbol indented_block_body) [10077 10120])
                    ("get_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10139 10143]))                          )
                        (reparse-symbol indented_block_body) [10126 10262])
                    ("time" variable nil (reparse-symbol indented_block_body) [10267 10292])
                    ("get_clock_seq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10316 10320]))                          )
                        (reparse-symbol indented_block_body) [10298 10421])
                    ("clock_seq" variable nil (reparse-symbol indented_block_body) [10426 10461])
                    ("get_node" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10480 10484]))                          )
                        (reparse-symbol indented_block_body) [10467 10528])
                    ("node" variable nil (reparse-symbol indented_block_body) [10533 10558])
                    ("get_hex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10576 10580]))                          )
                        (reparse-symbol indented_block_body) [10564 10617])
                    ("hex" variable nil (reparse-symbol indented_block_body) [10622 10645])
                    ("get_urn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10663 10667]))                          )
                        (reparse-symbol indented_block_body) [10651 10709])
                    ("urn" variable nil (reparse-symbol indented_block_body) [10714 10737])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10759 10763]))                          )
                        (reparse-symbol indented_block_body) [10743 11046])
                    ("variant" variable nil (reparse-symbol indented_block_body) [11051 11082])
                    ("get_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11104 11108]))                          )
                        (reparse-symbol indented_block_body) [11088 11263])
                    ("version" variable nil (reparse-symbol indented_block_body) [11268 11299]))                  
                :type "class")
                nil [1836 11300])
            ("_find_mac" function (:arguments 
              ( ("command" variable nil (reparse-symbol function_parameters) [11315 11322])
                ("args" variable nil (reparse-symbol function_parameters) [11324 11328])
                ("hw_identifiers" variable nil (reparse-symbol function_parameters) [11330 11344])
                ("get_index" variable nil (reparse-symbol function_parameters) [11346 11355]))              ) nil [11301 12109])
            ("_ifconfig_getnode" function (:documentation "Get the hardware address on Unix by running ifconfig.") nil [12110 12811])
            ("_ipconfig_getnode" function (:documentation "Get the hardware address on Windows by running ipconfig.exe.") nil [12812 13641])
            ("_netbios_getnode" function (:documentation "Get the hardware address on Windows using NetBIOS calls.
    See http://support.microsoft.com/kb/118623 for details.") nil [13642 14688])
            ("_uuid_generate_random" variable nil nil [14841 14905])
            ("try" code nil nil [14906 16749])
            ("_unixdll_getnode" function (:documentation "Get the hardware address on Unix using ctypes.") nil [16750 16950])
            ("_windll_getnode" function (:documentation "Get the hardware address on Windows using ctypes.") nil [16951 17158])
            ("_random_getnode" function (:documentation "Get a random node ID, with eighth bit set as suggested by RFC 4122.") nil [17159 17335])
            ("_node" variable nil nil [17336 17348])
            ("getnode" function (:documentation "Get the hardware address as a 48-bit positive integer.

    The first time this runs, it may launch a separate program, which could
    be quite slow.  If all attempts to obtain the hardware address fail, we
    choose a random 48-bit number with its eighth bit set to 1 as recommended
    in RFC 4122.
    ") nil [17350 18117])
            ("_last_timestamp" variable nil nil [18118 18140])
            ("uuid1" function
               (:documentation "Generate a UUID from a host ID, sequence number, and the current time.
    If 'node' is not given, getnode() is used to obtain the hardware
    address.  If 'clock_seq' is given, it is used as the sequence number;
    otherwise a random 14-bit sequence number is chosen."
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [18152 18156])
                    ("clock_seq" variable nil (reparse-symbol function_parameters) [18163 18172]))                  )
                nil [18142 19761])
            ("uuid3" function
               (:documentation "Generate a UUID from the MD5 hash of a namespace UUID and a name."
                :arguments 
                  ( ("namespace" variable nil (reparse-symbol function_parameters) [19772 19781])
                    ("name" variable nil (reparse-symbol function_parameters) [19783 19787]))                  )
                nil [19762 19986])
            ("uuid4" function (:documentation "Generate a random UUID.") nil [19987 20552])
            ("uuid5" function
               (:documentation "Generate a UUID from the SHA-1 hash of a namespace UUID and a name."
                :arguments 
                  ( ("namespace" variable nil (reparse-symbol function_parameters) [20563 20572])
                    ("name" variable nil (reparse-symbol function_parameters) [20574 20578]))                  )
                nil [20553 20781])
            ("NAMESPACE_DNS" variable nil nil [20851 20911])
            ("NAMESPACE_URL" variable nil nil [20912 20972])
            ("NAMESPACE_OID" variable nil nil [20973 21033])
            ("NAMESPACE_X500" variable nil nil [21034 21095]))          
      :file "uuid.py"
      :pointmax 21096
      :fsize 21095
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((INDENT_BLOCK 13616 . 13641) (NEWLINE 13615 . 13616) (COLON 13614 . 13615) (FINALLY 13607 . 13614)))
    (semanticdb-table "socket.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 2950])
            ("warnings" include nil nil [2951 2975])
            ("sys" include nil nil [2951 2975])
            ("os" include nil nil [2951 2975])
            ("try" code nil nil [2977 3071])
            ("try" code nil nil [3072 3131])
            ("EBADF" variable nil nil [3131 3165])
            ("EINTR" variable nil nil [3166 3200])
            ("__all__" variable nil nil [3202 3244])
            ("__all__" code nil nil [3245 3290])
            ("_realsocket" variable nil nil [3293 3313])
            ("if" code nil nil [3333 4229])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4244 4248]))                  )
                nil [4232 4923])
            ("_socketmethods" variable nil nil [4925 5136])
            ("if" code nil nil [5138 5207])
            ("if" code nil nil [5208 5291])
            ("_delegate_methods" variable nil nil [5402 5511])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5546 5560])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5576 5581]))                      ) (reparse-symbol indented_block_body) [5565 5634])
                    ("send" variable nil (reparse-symbol indented_block_body) [5697 5765])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5770 5790]))                  
                :type "class")
                nil [5513 5791])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6031 6060])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6066 6128])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6217 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6314])
                            ("for" code nil (reparse-symbol indented_block_body) [6323 6414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("family" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("type" variable nil (reparse-symbol function_parameters) [6169 6173])
                            ("proto" variable nil (reparse-symbol function_parameters) [6187 6192])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6196 6201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6134 6414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6429 6433])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6435 6448])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6478 6495])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6515 6522]))                          )
                        (reparse-symbol indented_block_body) [6419 6763])
                    ("close" variable nil (reparse-symbol indented_block_body) [6767 6808])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6825 6829]))                          )
                        (reparse-symbol indented_block_body) [6814 6920])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6924 6967])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6973 7147])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7165 7169])
                            ("mode" variable nil (reparse-symbol function_parameters) [7171 7175])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7181 7188]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7152 7453])
                    ("family" variable nil (reparse-symbol indented_block_body) [7458 7532])
                    ("type" variable nil (reparse-symbol indented_block_body) [7537 7605])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7610 7684]))                  
                :type "class")
                nil [5997 7685])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7695 7699])
                ("self" variable nil (reparse-symbol function_parameters) [7700 7704])
                ("args" variable nil (reparse-symbol function_parameters) [7705 7710]))              ) nil [7686 7756])
            ("for" code nil nil [7757 7949])
            ("socket" variable nil nil [7950 7985])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8075 8097])
                    ("name" variable nil (reparse-symbol indented_block_body) [8102 8119])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8125 8332])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8408 8425])
                            ("self" variable nil (reparse-symbol indented_block_body) [8434 8450])
                            ("if" code nil (reparse-symbol indented_block_body) [8495 8554])
                            ("self" variable nil (reparse-symbol indented_block_body) [8562 8584])
                            ("self" variable nil (reparse-symbol indented_block_body) [8593 8615])
                            ("if" code nil (reparse-symbol indented_block_body) [8842 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9026 9050])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9362])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9386])
                            ("self" variable nil (reparse-symbol indented_block_body) [9415 9433])
                            ("self" variable nil (reparse-symbol indented_block_body) [9442 9461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("sock" variable nil (reparse-symbol function_parameters) [8357 8361])
                            ("mode" variable nil (reparse-symbol function_parameters) [8363 8367])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8374 8381])
                            ("close" variable nil (reparse-symbol function_parameters) [8386 8391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8338 9462])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9482 9486]))                          )
                        (reparse-symbol indented_block_body) [9467 9523])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9527 9590])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610]))                          )
                        (reparse-symbol indented_block_body) [9596 9792])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813]))                          )
                        (reparse-symbol indented_block_body) [9797 9946])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9951 10724])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10740 10744]))                          )
                        (reparse-symbol indented_block_body) [10729 10782])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10797 10801])
                            ("data" variable nil (reparse-symbol function_parameters) [10803 10807]))                          )
                        (reparse-symbol indented_block_body) [10787 11152])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11172 11176])
                            ("list" variable nil (reparse-symbol function_parameters) [11178 11182]))                          )
                        (reparse-symbol indented_block_body) [11157 11533])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11547 11551])
                            ("size" variable nil (reparse-symbol function_parameters) [11553 11557]))                          )
                        (reparse-symbol indented_block_body) [11538 14505])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14523 14527])
                            ("size" variable nil (reparse-symbol function_parameters) [14529 14533]))                          )
                        (reparse-symbol indented_block_body) [14510 18528])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18547 18551])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18553 18561]))                          )
                        (reparse-symbol indented_block_body) [18533 18854])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18898 18902]))                          )
                        (reparse-symbol indented_block_body) [18885 18925])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18939 18943]))                          )
                        (reparse-symbol indented_block_body) [18930 19050]))                  
                :type "class")
                nil [7987 19050])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19051 19085])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19109 19116])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19118 19125])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19173 19187]))                  )
                nil [19087 20486]))          
      :file "socket.py"
      :pointmax 20486
      :fsize 20485
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20294 . 20376) (NEWLINE 20293 . 20294) (COLON 20292 . 20293) (TRY 19992 . 19995) (AS 20288 . 20290)))
    (semanticdb-table "urllib.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("urlparse" include nil nil [1025 1065])
            ("__all__" variable nil nil [1067 1517])
            ("__version__" variable nil nil [1519 1539])
            ("MAXFTPCACHE" variable nil nil [1589 1605])
            ("if" code nil nil [1682 2255])
            ("_urlopener" variable nil nil [2519 2536])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2549 2552])
                    ("data" variable nil (reparse-symbol function_parameters) [2554 2558])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2565 2572]))                  )
                nil [2537 3136])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3152 3155])
                ("filename" variable nil (reparse-symbol function_parameters) [3157 3165])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3172 3182])
                ("data" variable nil (reparse-symbol function_parameters) [3189 3193]))              ) nil [3136 3348])
            ("urlcleanup" function nil nil [3348 3461])
            ("try" code nil nil [3478 3555])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3713 3744])
                            ("self" variable nil (reparse-symbol indented_block_body) [3753 3775]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3680 3684])
                            ("message" variable nil (reparse-symbol function_parameters) [3686 3693])
                            ("content" variable nil (reparse-symbol function_parameters) [3695 3702]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3667 3776]))                  
                :type "class")
                nil [3626 3776])
            ("ftpcache" variable nil nil [3777 3790])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4124 4142])
                    ("version" code nil (reparse-symbol indented_block_body) [4148 4190])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4264 4319])
                            ("assert" code nil (reparse-symbol indented_block_body) [4327 4390])
                            ("self" variable nil (reparse-symbol indented_block_body) [4399 4421])
                            ("self" variable nil (reparse-symbol indented_block_body) [4430 4466])
                            ("self" variable nil (reparse-symbol indented_block_body) [4475 4513])
                            ("self" variable nil (reparse-symbol indented_block_body) [4522 4570])
                            ("self" variable nil (reparse-symbol indented_block_body) [4579 4600])
                            ("self" variable nil (reparse-symbol indented_block_body) [4609 4634])
                            ("self" variable nil (reparse-symbol indented_block_body) [4659 4680])
                            ("self" variable nil (reparse-symbol indented_block_body) [5001 5025]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4227 4231])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4233 4240])
                            ("x509" variable nil (reparse-symbol function_parameters) [4247 4253]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4214 5026])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5262 5266]))                          )
                        (reparse-symbol indented_block_body) [5250 5290])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5305 5309]))                          )
                        (reparse-symbol indented_block_body) [5295 5335])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5352 5356]))                          )
                        (reparse-symbol indented_block_body) [5340 5804])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5823 5827])
                            ("args" variable nil (reparse-symbol function_parameters) [5829 5834]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5809 5989])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6028 6032])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6034 6041])
                            ("data" variable nil (reparse-symbol function_parameters) [6043 6047]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6019 7481])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7503 7507])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7509 7516])
                            ("data" variable nil (reparse-symbol function_parameters) [7518 7522]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7486 7694])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7722 7726])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7728 7733])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7735 7742])
                            ("data" variable nil (reparse-symbol function_parameters) [7744 7748]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7699 7932])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7975 7979])
                            ("url" variable nil (reparse-symbol function_parameters) [7981 7984])
                            ("filename" variable nil (reparse-symbol function_parameters) [7986 7994])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8001 8011])
                            ("data" variable nil (reparse-symbol function_parameters) [8018 8022]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [7962 10407])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10498 10502])
                            ("url" variable nil (reparse-symbol function_parameters) [10504 10507])
                            ("data" variable nil (reparse-symbol function_parameters) [10509 10513]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10484 13362])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13382 13386])
                            ("url" variable nil (reparse-symbol function_parameters) [13388 13391])
                            ("fp" variable nil (reparse-symbol function_parameters) [13393 13395])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13397 13404])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13406 13412])
                            ("headers" variable nil (reparse-symbol function_parameters) [13414 13421])
                            ("data" variable nil (reparse-symbol function_parameters) [13423 13427]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13367 14084])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14112 14116])
                            ("url" variable nil (reparse-symbol function_parameters) [14118 14121])
                            ("fp" variable nil (reparse-symbol function_parameters) [14123 14125])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14127 14134])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14136 14142])
                            ("headers" variable nil (reparse-symbol function_parameters) [14144 14151]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14089 14339])
                    ("if" code nil (reparse-symbol indented_block_body) [14344 17569])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17588 17592])
                            ("url" variable nil (reparse-symbol function_parameters) [17594 17597]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17574 17985])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18010 18014])
                            ("url" variable nil (reparse-symbol function_parameters) [18016 18019]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [17990 19382])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19400 19404])
                            ("url" variable nil (reparse-symbol function_parameters) [19406 19409]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19387 21845])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21864 21868])
                            ("url" variable nil (reparse-symbol function_parameters) [21870 21873])
                            ("data" variable nil (reparse-symbol function_parameters) [21875 21879]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [21850 23537]))                  
                :type "class")
                nil [3791 23537])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23696 23737])
                            ("self" variable nil (reparse-symbol indented_block_body) [23746 23766])
                            ("self" variable nil (reparse-symbol indented_block_body) [23775 23789])
                            ("self" variable nil (reparse-symbol indented_block_body) [23798 23816]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23664 23668])
                            ("args" variable nil (reparse-symbol function_parameters) [23670 23675])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23677 23685]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23651 23817])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23845 23849])
                            ("url" variable nil (reparse-symbol function_parameters) [23851 23854])
                            ("fp" variable nil (reparse-symbol function_parameters) [23856 23858])
                            ("errcode" variable nil (reparse-symbol function_parameters) [23860 23867])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [23869 23875])
                            ("headers" variable nil (reparse-symbol function_parameters) [23877 23884]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [23822 24016])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24040 24044])
                            ("url" variable nil (reparse-symbol function_parameters) [24046 24049])
                            ("fp" variable nil (reparse-symbol function_parameters) [24051 24053])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24055 24062])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24064 24070])
                            ("headers" variable nil (reparse-symbol function_parameters) [24072 24079])
                            ("data" variable nil (reparse-symbol function_parameters) [24081 24085]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24021 24692])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24719 24723])
                            ("url" variable nil (reparse-symbol function_parameters) [24725 24728])
                            ("fp" variable nil (reparse-symbol function_parameters) [24730 24732])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24734 24741])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24743 24749])
                            ("headers" variable nil (reparse-symbol function_parameters) [24751 24758])
                            ("data" variable nil (reparse-symbol function_parameters) [24760 24764]))                          )
                        (reparse-symbol indented_block_body) [24697 25661])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25685 25689])
                            ("url" variable nil (reparse-symbol function_parameters) [25691 25694])
                            ("fp" variable nil (reparse-symbol function_parameters) [25696 25698])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25700 25707])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25709 25715])
                            ("headers" variable nil (reparse-symbol function_parameters) [25717 25724])
                            ("data" variable nil (reparse-symbol function_parameters) [25726 25730]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25666 25871])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25895 25899])
                            ("url" variable nil (reparse-symbol function_parameters) [25901 25904])
                            ("fp" variable nil (reparse-symbol function_parameters) [25906 25908])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25910 25917])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25919 25925])
                            ("headers" variable nil (reparse-symbol function_parameters) [25927 25934])
                            ("data" variable nil (reparse-symbol function_parameters) [25936 25940]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [25876 26098])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26122 26126])
                            ("url" variable nil (reparse-symbol function_parameters) [26128 26131])
                            ("fp" variable nil (reparse-symbol function_parameters) [26133 26135])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26137 26144])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26146 26152])
                            ("headers" variable nil (reparse-symbol function_parameters) [26154 26161])
                            ("data" variable nil (reparse-symbol function_parameters) [26163 26167]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26103 26436])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26460 26464])
                            ("url" variable nil (reparse-symbol function_parameters) [26466 26469])
                            ("fp" variable nil (reparse-symbol function_parameters) [26471 26473])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26475 26482])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26484 26490])
                            ("headers" variable nil (reparse-symbol function_parameters) [26492 26499])
                            ("data" variable nil (reparse-symbol function_parameters) [26501 26505]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26441 27468])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27492 27496])
                            ("url" variable nil (reparse-symbol function_parameters) [27498 27501])
                            ("fp" variable nil (reparse-symbol function_parameters) [27503 27505])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27507 27514])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27516 27522])
                            ("headers" variable nil (reparse-symbol function_parameters) [27524 27531])
                            ("data" variable nil (reparse-symbol function_parameters) [27533 27537]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27473 28516])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28553 28557])
                            ("url" variable nil (reparse-symbol function_parameters) [28559 28562])
                            ("realm" variable nil (reparse-symbol function_parameters) [28564 28569])
                            ("data" variable nil (reparse-symbol function_parameters) [28571 28575]))                          )
                        (reparse-symbol indented_block_body) [28521 29265])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29303 29307])
                            ("url" variable nil (reparse-symbol function_parameters) [29309 29312])
                            ("realm" variable nil (reparse-symbol function_parameters) [29314 29319])
                            ("data" variable nil (reparse-symbol function_parameters) [29321 29325]))                          )
                        (reparse-symbol indented_block_body) [29270 30019])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30050 30054])
                            ("url" variable nil (reparse-symbol function_parameters) [30056 30059])
                            ("realm" variable nil (reparse-symbol function_parameters) [30061 30066])
                            ("data" variable nil (reparse-symbol function_parameters) [30068 30072]))                          )
                        (reparse-symbol indented_block_body) [30024 30524])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30556 30560])
                            ("url" variable nil (reparse-symbol function_parameters) [30562 30565])
                            ("realm" variable nil (reparse-symbol function_parameters) [30567 30572])
                            ("data" variable nil (reparse-symbol function_parameters) [30574 30578]))                          )
                        (reparse-symbol indented_block_body) [30529 31031])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31056 31060])
                            ("host" variable nil (reparse-symbol function_parameters) [31062 31066])
                            ("realm" variable nil (reparse-symbol function_parameters) [31068 31073])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31075 31086]))                          )
                        (reparse-symbol indented_block_body) [31036 31451])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31479 31483])
                            ("host" variable nil (reparse-symbol function_parameters) [31485 31489])
                            ("realm" variable nil (reparse-symbol function_parameters) [31491 31496]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31456 31955]))                  
                :type "class")
                nil [23539 31955])
            ("_localhost" variable nil nil [31978 31995])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [31996 32206])
            ("_thishost" variable nil nil [32207 32223])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32224 32424])
            ("_ftperrors" variable nil nil [32425 32442])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32443 32652])
            ("_noheaders" variable nil nil [32653 32670])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32671 33074])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33305 33321])
                            ("self" variable nil (reparse-symbol indented_block_body) [33330 33350])
                            ("self" variable nil (reparse-symbol indented_block_body) [33359 33375])
                            ("self" variable nil (reparse-symbol indented_block_body) [33384 33400])
                            ("self" variable nil (reparse-symbol indented_block_body) [33409 33425])
                            ("self" variable nil (reparse-symbol indented_block_body) [33434 33456])
                            ("self" code nil (reparse-symbol indented_block_body) [33465 33476]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33201 33205])
                            ("user" variable nil (reparse-symbol function_parameters) [33207 33211])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33213 33219])
                            ("host" variable nil (reparse-symbol function_parameters) [33221 33225])
                            ("port" variable nil (reparse-symbol function_parameters) [33227 33231])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33233 33237])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33256 33263]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33188 33477])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33491 33495]))                          )
                        (reparse-symbol indented_block_body) [33482 33742])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33760 33764])
                            ("file" variable nil (reparse-symbol function_parameters) [33766 33770])
                            ("type" variable nil (reparse-symbol function_parameters) [33772 33776]))                          )
                        (reparse-symbol indented_block_body) [33747 35285])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35305 35309]))                          )
                        (reparse-symbol indented_block_body) [35289 35469])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35484 35488]))                          )
                        (reparse-symbol indented_block_body) [35474 35605]))                  
                :type "class")
                nil [33095 35605])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [35709 35721])
                            ("self" variable nil (reparse-symbol indented_block_body) [35730 35754])
                            ("self" variable nil (reparse-symbol indented_block_body) [35763 35795])
                            ("if" code nil (reparse-symbol indented_block_body) [35804 35873])
                            ("if" code nil (reparse-symbol indented_block_body) [35881 36006])
                            ("if" code nil (reparse-symbol indented_block_body) [36014 36174]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35690 35694])
                            ("fp" variable nil (reparse-symbol function_parameters) [35696 35698]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35677 36174])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36192 36196]))                          )
                        (reparse-symbol indented_block_body) [36179 36333])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36348 36352]))                          )
                        (reparse-symbol indented_block_body) [36338 36525]))                  
                :type "class")
                nil [35606 36525])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [36667 36693])
                            ("self" variable nil (reparse-symbol indented_block_body) [36702 36728])
                            ("self" variable nil (reparse-symbol indented_block_body) [36737 36761]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36626 36630])
                            ("fp" variable nil (reparse-symbol function_parameters) [36632 36634])
                            ("closehook" variable nil (reparse-symbol function_parameters) [36636 36645])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [36647 36656]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36613 36762])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36777 36781]))                          )
                        (reparse-symbol indented_block_body) [36767 36949]))                  
                :type "class")
                nil [36526 36949])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37077 37103])
                            ("self" variable nil (reparse-symbol indented_block_body) [37112 37134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37049 37053])
                            ("fp" variable nil (reparse-symbol function_parameters) [37055 37057])
                            ("headers" variable nil (reparse-symbol function_parameters) [37059 37066]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37036 37135])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37149 37153]))                          )
                        (reparse-symbol indented_block_body) [37140 37184]))                  
                :type "class")
                nil [36950 37184])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37342 37368])
                            ("self" variable nil (reparse-symbol indented_block_body) [37377 37399])
                            ("self" variable nil (reparse-symbol indented_block_body) [37408 37422])
                            ("self" variable nil (reparse-symbol indented_block_body) [37431 37447]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37298 37302])
                            ("fp" variable nil (reparse-symbol function_parameters) [37304 37306])
                            ("headers" variable nil (reparse-symbol function_parameters) [37308 37315])
                            ("url" variable nil (reparse-symbol function_parameters) [37317 37320])
                            ("code" variable nil (reparse-symbol function_parameters) [37322 37326]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37285 37448])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37462 37466]))                          )
                        (reparse-symbol indented_block_body) [37453 37497])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37514 37518]))                          )
                        (reparse-symbol indented_block_body) [37502 37546])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37562 37566]))                          )
                        (reparse-symbol indented_block_body) [37551 37593]))                  
                :type "class")
                nil [37185 37593])
            ("try" code nil nil [38332 38476])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [38489 38492]))                  )
                nil [38477 38860])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [38872 38875]))                  )
                nil [38861 39105])
            ("_typeprog" variable nil nil [39106 39122])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39137 39140]))                  )
                nil [39123 39476])
            ("_hostprog" variable nil nil [39477 39493])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39508 39511]))                  )
                nil [39494 39941])
            ("_userprog" variable nil nil [39942 39958])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [39973 39977]))                  )
                nil [39959 40272])
            ("_passwdprog" variable nil nil [40273 40291])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [40308 40312]))                  )
                nil [40292 40596])
            ("_portprog" variable nil nil [40640 40656])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40671 40675]))                  )
                nil [40657 40942])
            ("_nportprog" variable nil nil [40943 40960])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40976 40980])
                    ("defport" variable nil (reparse-symbol function_parameters) [40982 40989]))                  )
                nil [40961 41630])
            ("_queryprog" variable nil nil [41631 41648])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [41664 41667]))                  )
                nil [41649 41941])
            ("_tagprog" variable nil nil [41942 41957])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [41971 41974]))                  )
                nil [41958 42233])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42248 42251]))                  )
                nil [42234 42430])
            ("_valueprog" variable nil nil [42431 42448])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [42464 42468]))                  )
                nil [42449 42741])
            ("_hexdig" variable nil nil [42934 42968])
            ("_hextochr" variable nil nil [42969 43066])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43080 43081]))                  )
                nil [43068 43462])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43480 43481]))                  )
                nil [43463 43582])
            ("always_safe" variable nil nil [43583 43705])
            ("_safe_map" variable nil nil [43706 43720])
            ("for" code nil nil [43721 43860])
            ("_safe_quoters" variable nil nil [43860 43878])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43890 43891])
                    ("safe" variable nil (reparse-symbol function_parameters) [43893 43897]))                  )
                nil [43880 45220])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45236 45237])
                    ("safe" variable nil (reparse-symbol function_parameters) [45239 45243]))                  )
                nil [45221 45428])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [45443 45448])
                    ("doseq" variable nil (reparse-symbol function_parameters) [45450 45455]))                  )
                nil [45429 47856])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [47874 48387])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [48417 48421]))                  )
                nil [48388 49099])
            ("if" code nil nil [49101 56512])
            ("test1" function nil nil [56551 56841])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [56858 56866])
                ("blocksize" variable nil (reparse-symbol function_parameters) [56868 56877])
                ("totalsize" variable nil (reparse-symbol function_parameters) [56879 56888]))              ) nil [56843 57033])
            ("test" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [57058 57062]))              ) nil [57049 58009])
            ("main" function nil nil [58010 58678])
            ("if" code nil nil [58719 58757]))          
      :file "urllib.py"
      :pointmax 58757
      :fsize 58756
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((NAME 43784 . 43793) (IF 43801 . 43803) (ELSE 43835 . 43839)))
    (semanticdb-table "pprint.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

\"\"\"" code nil nil [489 1054])
            ("sys" include nil nil [1056 1074])
            ("warnings" include nil nil [1075 1090])
            ("cStringIO" include nil nil [1092 1135])
            ("__all__" variable nil nil [1137 1233])
            ("_commajoin" variable nil nil [1268 1290])
            ("_id" variable nil nil [1291 1299])
            ("_len" variable nil nil [1300 1310])
            ("_type" variable nil nil [1311 1323])
            ("pprint" function
               (:documentation "Pretty-print a Python object to a stream [default is sys.stdout]."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1337 1343])
                    ("stream" variable nil (reparse-symbol function_parameters) [1345 1351])
                    ("indent" variable nil (reparse-symbol function_parameters) [1358 1364])
                    ("width" variable nil (reparse-symbol function_parameters) [1368 1373])
                    ("depth" variable nil (reparse-symbol function_parameters) [1378 1383]))                  )
                nil [1326 1587])
            ("pformat" function
               (:documentation "Format a Python object into a pretty-printed representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1600 1606])
                    ("indent" variable nil (reparse-symbol function_parameters) [1608 1614])
                    ("width" variable nil (reparse-symbol function_parameters) [1618 1623])
                    ("depth" variable nil (reparse-symbol function_parameters) [1628 1633]))                  )
                nil [1588 1794])
            ("saferepr" function
               (:documentation "Version of repr() which can handle recursive data structures."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1808 1814]))                  )
                nil [1795 1935])
            ("isreadable" function
               (:documentation "Determine if saferepr(object) is readable by eval()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1951 1957]))                  )
                nil [1936 2069])
            ("isrecursive" function
               (:documentation "Determine if object requires a recursive representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2086 2092]))                  )
                nil [2070 2208])
            ("_sorted" function (:arguments 
              ( ("iterable" variable nil (reparse-symbol function_parameters) [2221 2229]))              ) nil [2209 2475])
            ("PrettyPrinter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [2574 3078])
                            ("indent" variable nil (reparse-symbol indented_block_body) [3087 3107])
                            ("width" variable nil (reparse-symbol indented_block_body) [3116 3134])
                            ("assert" code nil (reparse-symbol indented_block_body) [3143 3184])
                            ("assert" code nil (reparse-symbol indented_block_body) [3193 3247])
                            ("assert" code nil (reparse-symbol indented_block_body) [3256 3290])
                            ("self" variable nil (reparse-symbol indented_block_body) [3299 3318])
                            ("self" variable nil (reparse-symbol indented_block_body) [3327 3358])
                            ("self" variable nil (reparse-symbol indented_block_body) [3367 3386])
                            ("if" code nil (reparse-symbol indented_block_body) [3395 3505]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2514 2518])
                            ("indent" variable nil (reparse-symbol function_parameters) [2520 2526])
                            ("width" variable nil (reparse-symbol function_parameters) [2530 2535])
                            ("depth" variable nil (reparse-symbol function_parameters) [2540 2545])
                            ("stream" variable nil (reparse-symbol function_parameters) [2552 2558]))                          
                        :documentation "Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2501 3505])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3521 3525])
                            ("object" variable nil (reparse-symbol function_parameters) [3527 3533]))                          )
                        (reparse-symbol indented_block_body) [3510 3625])
                    ("pformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3642 3646])
                            ("object" variable nil (reparse-symbol function_parameters) [3648 3654]))                          )
                        (reparse-symbol indented_block_body) [3630 3760])
                    ("isrecursive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3781 3785])
                            ("object" variable nil (reparse-symbol function_parameters) [3787 3793]))                          )
                        (reparse-symbol indented_block_body) [3765 3844])
                    ("isreadable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3864 3868])
                            ("object" variable nil (reparse-symbol function_parameters) [3870 3876]))                          )
                        (reparse-symbol indented_block_body) [3849 3984])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4001 4005])
                            ("object" variable nil (reparse-symbol function_parameters) [4007 4013])
                            ("stream" variable nil (reparse-symbol function_parameters) [4015 4021])
                            ("indent" variable nil (reparse-symbol function_parameters) [4023 4029])
                            ("allowance" variable nil (reparse-symbol function_parameters) [4031 4040])
                            ("context" variable nil (reparse-symbol function_parameters) [4042 4049])
                            ("level" variable nil (reparse-symbol function_parameters) [4051 4056]))                          )
                        (reparse-symbol indented_block_body) [3989 7808])
                    ("_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7823 7827])
                            ("object" variable nil (reparse-symbol function_parameters) [7829 7835])
                            ("context" variable nil (reparse-symbol function_parameters) [7837 7844])
                            ("level" variable nil (reparse-symbol function_parameters) [7846 7851]))                          )
                        (reparse-symbol indented_block_body) [7813 8131])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8147 8151])
                            ("object" variable nil (reparse-symbol function_parameters) [8153 8159])
                            ("context" variable nil (reparse-symbol function_parameters) [8161 8168])
                            ("maxlevels" variable nil (reparse-symbol function_parameters) [8170 8179])
                            ("level" variable nil (reparse-symbol function_parameters) [8181 8186]))                          
                        :documentation "Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        ")
                        (reparse-symbol indented_block_body) [8136 8465]))                  
                :type "class")
                nil [2476 8465])
            ("_safe_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [8539 8545])
                ("context" variable nil (reparse-symbol function_parameters) [8547 8554])
                ("maxlevels" variable nil (reparse-symbol function_parameters) [8556 8565])
                ("level" variable nil (reparse-symbol function_parameters) [8567 8572]))              ) nil [8524 11419])
            ("_recursion" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11436 11442]))              ) nil [11421 11541])
            ("_perfcheck" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11558 11564]))              ) nil [11543 11888])
            ("if" code nil nil [11889 11933]))          
      :file "pprint.py"
      :pointmax 11933
      :fsize 11932
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "collections.py"
      :major-mode 'python-mode
      :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 379])
            ("keyword" include nil nil [380 423])
            ("sys" include nil nil [424 442])
            ("heapq" include nil nil [443 465])
            ("itertools" include nil nil [466 543])
            ("try" code nil nil [545 670])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [880 923])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1532 1735])
                            ("if" code nil (reparse-symbol indented_block_body) [1744 1842])
                            ("try" code nil (reparse-symbol indented_block_body) [1850 2051])
                            ("self" code nil (reparse-symbol indented_block_body) [2059 2087]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1502 1506])
                            ("args" variable nil (reparse-symbol function_parameters) [1508 1513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1515 1521]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1489 2088])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2109 2113])
                            ("key" variable nil (reparse-symbol function_parameters) [2115 2118])
                            ("value" variable nil (reparse-symbol function_parameters) [2120 2125])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2127 2131])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2135 2139])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2143 2155]))                          )
                        (reparse-symbol indented_block_body) [2093 2579])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604])
                            ("key" variable nil (reparse-symbol function_parameters) [2606 2609])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2611 2615])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2619 2623])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2627 2639]))                          )
                        (reparse-symbol indented_block_body) [2584 3022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3040 3044]))                          )
                        (reparse-symbol indented_block_body) [3027 3298])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3320 3324]))                          )
                        (reparse-symbol indented_block_body) [3303 3594])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3609 3613]))                          )
                        (reparse-symbol indented_block_body) [3599 3858])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951]))                          )
                        (reparse-symbol indented_block_body) [3938 4022])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4038 4042]))                          )
                        (reparse-symbol indented_block_body) [4027 4134])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4149 4153]))                          )
                        (reparse-symbol indented_block_body) [4139 4263])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4281 4285]))                          )
                        (reparse-symbol indented_block_body) [4268 4373])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4393 4397]))                          )
                        (reparse-symbol indented_block_body) [4378 4510])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4529 4533]))                          )
                        (reparse-symbol indented_block_body) [4515 4662])
                    ("update" variable nil (reparse-symbol indented_block_body) [4667 4697])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4703 4720])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [4785 4804])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4818 4822])
                            ("key" variable nil (reparse-symbol function_parameters) [4824 4827])
                            ("default" variable nil (reparse-symbol function_parameters) [4829 4836]))                          )
                        (reparse-symbol indented_block_body) [4810 5240])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5260 5264])
                            ("key" variable nil (reparse-symbol function_parameters) [5266 5269])
                            ("default" variable nil (reparse-symbol function_parameters) [5271 5278]))                          )
                        (reparse-symbol indented_block_body) [5245 5469])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5486 5490])
                            ("last" variable nil (reparse-symbol function_parameters) [5492 5496]))                          )
                        (reparse-symbol indented_block_body) [5474 5858])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5876 5880])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [5882 5895]))                          )
                        (reparse-symbol indented_block_body) [5863 6304])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6324 6328]))                          )
                        (reparse-symbol indented_block_body) [6309 6654])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6668 6672]))                          )
                        (reparse-symbol indented_block_body) [6659 6755])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6790 6793])
                            ("iterable" variable nil (reparse-symbol function_parameters) [6795 6803])
                            ("value" variable nil (reparse-symbol function_parameters) [6805 6810]))                          )
                        (reparse-symbol indented_block_body) [6760 7060])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7076 7080])
                            ("other" variable nil (reparse-symbol function_parameters) [7082 7087]))                          )
                        (reparse-symbol indented_block_body) [7065 7410])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7426 7430])
                            ("other" variable nil (reparse-symbol function_parameters) [7432 7437]))                          )
                        (reparse-symbol indented_block_body) [7415 7507])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7602 7606]))                          )
                        (reparse-symbol indented_block_body) [7589 7714])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7734 7738]))                          )
                        (reparse-symbol indented_block_body) [7719 7844])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7863 7867]))                          )
                        (reparse-symbol indented_block_body) [7849 7978]))                  
                :type "class")
                nil [851 7978])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [8173 8181])
                    ("field_names" variable nil (reparse-symbol function_parameters) [8183 8194])
                    ("verbose" variable nil (reparse-symbol function_parameters) [8196 8203])
                    ("rename" variable nil (reparse-symbol function_parameters) [8211 8217]))                  )
                nil [8158 13450])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [13637 15338])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [15723 16250])
                            ("super" code nil (reparse-symbol indented_block_body) [16259 16290])
                            ("self" code nil (reparse-symbol indented_block_body) [16299 16328]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15685 15689])
                            ("iterable" variable nil (reparse-symbol function_parameters) [15691 15699])
                            ("kwds" variable nil (reparse-symbol function_parameters) [15706 15712]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15672 16329])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16350 16354])
                            ("key" variable nil (reparse-symbol function_parameters) [16356 16359]))                          )
                        (reparse-symbol indented_block_body) [16334 16507])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16528 16532])
                            ("n" variable nil (reparse-symbol function_parameters) [16534 16535]))                          )
                        (reparse-symbol indented_block_body) [16512 17021])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17039 17043]))                          )
                        (reparse-symbol indented_block_body) [17026 17844])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17924 17927])
                            ("iterable" variable nil (reparse-symbol function_parameters) [17929 17937])
                            ("v" variable nil (reparse-symbol function_parameters) [17939 17940]))                          )
                        (reparse-symbol indented_block_body) [17894 18203])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18219 18223])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18225 18233])
                            ("kwds" variable nil (reparse-symbol function_parameters) [18240 18246]))                          )
                        (reparse-symbol indented_block_body) [18208 19749])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19767 19771])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19773 19781])
                            ("kwds" variable nil (reparse-symbol function_parameters) [19788 19794]))                          )
                        (reparse-symbol indented_block_body) [19754 20890])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20904 20908]))                          )
                        (reparse-symbol indented_block_body) [20895 20980])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21000 21004]))                          )
                        (reparse-symbol indented_block_body) [20985 21052])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21073 21077])
                            ("elem" variable nil (reparse-symbol function_parameters) [21079 21083]))                          )
                        (reparse-symbol indented_block_body) [21057 21244])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21262 21266]))                          )
                        (reparse-symbol indented_block_body) [21249 21472])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21829 21833])
                            ("other" variable nil (reparse-symbol function_parameters) [21835 21840]))                          )
                        (reparse-symbol indented_block_body) [21817 22390])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22407 22411])
                            ("other" variable nil (reparse-symbol function_parameters) [22413 22418]))                          )
                        (reparse-symbol indented_block_body) [22395 22997])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23013 23017])
                            ("other" variable nil (reparse-symbol function_parameters) [23019 23024]))                          )
                        (reparse-symbol indented_block_body) [23002 23671])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23688 23692])
                            ("other" variable nil (reparse-symbol function_parameters) [23694 23699]))                          )
                        (reparse-symbol indented_block_body) [23676 24195]))                  
                :type "class")
                nil [13612 24195])
            ("if" code nil nil [24197 25364]))          
      :file "collections.py"
      :pointmax 25364
      :fsize 25363
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax '((NAME 24822 . 24832) (PAREN_BLOCK 24832 . 24848) (NAME 24480 . 24490) (PAREN_BLOCK 24490 . 24506) (NAME 24047 . 24055) (IF 24064 . 24066) (ELSE 24087 . 24091) (NAME 23397 . 23405) (IF 23420 . 23422) (ELSE 23443 . 23447)))
    (semanticdb-table "copy_reg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "re.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9263])
            ("for" code nil nil [9264 9361])
            ("del" code nil nil [9361 9366])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9379 9386]))              ) nil [9368 12985]))          
      :file "re.py"
      :pointmax 12985
      :fsize 12984
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "struct.py"
      :major-mode 'python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "functools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
      :file "types.py"
      :pointmax 2041
      :fsize 2040
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "warnings.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
      :file "warnings.py"
      :pointmax 14045
      :fsize 14044
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430)))
    (semanticdb-table "string.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
      :file "string.py"
      :pointmax 20757
      :fsize 20756
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "_abcoll.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 1936])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          )
                        (reparse-symbol indented_block_body) [1941 1981])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2024 2027])
                            ("C" variable nil (reparse-symbol function_parameters) [2029 2030]))                          )
                        (reparse-symbol indented_block_body) [1986 2183]))                  
                :type "class")
                nil [1841 2183])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2202 2225])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2263 2267]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2231 2287])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2330 2333])
                            ("C" variable nil (reparse-symbol function_parameters) [2335 2336]))                          )
                        (reparse-symbol indented_block_body) [2292 2461]))                  
                :type "class")
                nil [2185 2461])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2484 2507])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2550 2554])
                            ("x" variable nil (reparse-symbol function_parameters) [2556 2557]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2513 2581])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2624 2627])
                            ("C" variable nil (reparse-symbol function_parameters) [2629 2630]))                          )
                        (reparse-symbol indented_block_body) [2586 2764]))                  
                :type "class")
                nil [2463 2764])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2786 2809])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2848 2852])
                            ("args" variable nil (reparse-symbol function_parameters) [2854 2859])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2861 2867]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2815 2891])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2934 2937])
                            ("C" variable nil (reparse-symbol function_parameters) [2939 2940]))                          )
                        (reparse-symbol indented_block_body) [2896 3069]))                  
                :type "class")
                nil [2766 3069])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("other" variable nil (reparse-symbol function_parameters) [3518 3523]))                          )
                        (reparse-symbol indented_block_body) [3501 3768])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3784 3788])
                            ("other" variable nil (reparse-symbol function_parameters) [3790 3795]))                          )
                        (reparse-symbol indented_block_body) [3773 3932])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3948 3952])
                            ("other" variable nil (reparse-symbol function_parameters) [3954 3959]))                          )
                        (reparse-symbol indented_block_body) [3937 4063])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4079 4083])
                            ("other" variable nil (reparse-symbol function_parameters) [4085 4090]))                          )
                        (reparse-symbol indented_block_body) [4068 4195])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4211 4215])
                            ("other" variable nil (reparse-symbol function_parameters) [4217 4222]))                          )
                        (reparse-symbol indented_block_body) [4200 4360])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4376 4380])
                            ("other" variable nil (reparse-symbol function_parameters) [4382 4387]))                          )
                        (reparse-symbol indented_block_body) [4365 4425])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4466 4469])
                            ("it" variable nil (reparse-symbol function_parameters) [4471 4473]))                          )
                        (reparse-symbol indented_block_body) [4430 4702])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4719 4723])
                            ("other" variable nil (reparse-symbol function_parameters) [4725 4730]))                          )
                        (reparse-symbol indented_block_body) [4707 4889])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4909 4913])
                            ("other" variable nil (reparse-symbol function_parameters) [4915 4920]))                          )
                        (reparse-symbol indented_block_body) [4894 5030])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5046 5050])
                            ("other" variable nil (reparse-symbol function_parameters) [5052 5057]))                          )
                        (reparse-symbol indented_block_body) [5035 5234])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5251 5255])
                            ("other" variable nil (reparse-symbol function_parameters) [5257 5262]))                          )
                        (reparse-symbol indented_block_body) [5239 5554])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5571 5575])
                            ("other" variable nil (reparse-symbol function_parameters) [5577 5582]))                          )
                        (reparse-symbol indented_block_body) [5559 5804])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [5880 5895])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5911 5915]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [5901 6904]))                  
                :type "class")
                nil [3086 6904])
            ("Set" code nil nil [6905 6928])
            ("MutableSet" type
               (:superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6987 6991])
                            ("value" variable nil (reparse-symbol function_parameters) [6993 6998]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [6959 7065])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7102 7106])
                            ("value" variable nil (reparse-symbol function_parameters) [7108 7113]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7070 7221])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("value" variable nil (reparse-symbol function_parameters) [7243 7248]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7226 7411])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7424 7428]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7416 7668])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7683 7687]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [7673 7865])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7882 7886])
                            ("it" variable nil (reparse-symbol function_parameters) [7888 7890]))                          )
                        (reparse-symbol indented_block_body) [7870 7966])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7984 7988])
                            ("it" variable nil (reparse-symbol function_parameters) [7990 7992]))                          )
                        (reparse-symbol indented_block_body) [7971 8081])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8099 8103])
                            ("it" variable nil (reparse-symbol function_parameters) [8105 8107]))                          )
                        (reparse-symbol indented_block_body) [8086 8438])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8456 8460])
                            ("it" variable nil (reparse-symbol function_parameters) [8462 8464]))                          )
                        (reparse-symbol indented_block_body) [8443 8614]))                  
                :type "class")
                nil [6931 8614])
            ("MutableSet" code nil nil [8615 8639])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8745 8749])
                            ("key" variable nil (reparse-symbol function_parameters) [8751 8754]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8709 8780])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8793 8797])
                            ("key" variable nil (reparse-symbol function_parameters) [8799 8802])
                            ("default" variable nil (reparse-symbol function_parameters) [8804 8811]))                          )
                        (reparse-symbol indented_block_body) [8785 8913])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8935 8939])
                            ("key" variable nil (reparse-symbol function_parameters) [8941 8944]))                          )
                        (reparse-symbol indented_block_body) [8918 9070])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9088 9092]))                          )
                        (reparse-symbol indented_block_body) [9075 9121])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9141 9145]))                          )
                        (reparse-symbol indented_block_body) [9126 9201])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9220 9224]))                          )
                        (reparse-symbol indented_block_body) [9206 9287])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9301 9305]))                          )
                        (reparse-symbol indented_block_body) [9292 9334])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9349 9353]))                          )
                        (reparse-symbol indented_block_body) [9339 9406])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9422 9426]))                          )
                        (reparse-symbol indented_block_body) [9411 9472])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9552 9567])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9584 9588])
                            ("other" variable nil (reparse-symbol function_parameters) [9590 9595]))                          )
                        (reparse-symbol indented_block_body) [9573 9732])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9748 9752])
                            ("other" variable nil (reparse-symbol function_parameters) [9754 9759]))                          )
                        (reparse-symbol indented_block_body) [9737 9797]))                  
                :type "class")
                nil [8661 9797])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9866 9889]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9842 9846])
                            ("mapping" variable nil (reparse-symbol function_parameters) [9848 9855]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9829 9890])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9907 9911]))                          )
                        (reparse-symbol indented_block_body) [9895 9948])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9966 9970]))                          )
                        (reparse-symbol indented_block_body) [9953 10042]))                  
                :type "class")
                nil [9798 10042])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10119 10123])
                            ("it" variable nil (reparse-symbol function_parameters) [10125 10127]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10083 10153])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10175 10179])
                            ("key" variable nil (reparse-symbol function_parameters) [10181 10184]))                          )
                        (reparse-symbol indented_block_body) [10158 10223])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10241 10245]))                          )
                        (reparse-symbol indented_block_body) [10228 10304]))                  
                :type "class")
                nil [10044 10304])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10382 10386])
                            ("it" variable nil (reparse-symbol function_parameters) [10388 10390]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10346 10416])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10438 10442])
                            ("item" variable nil (reparse-symbol function_parameters) [10444 10448]))                          )
                        (reparse-symbol indented_block_body) [10421 10619])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10637 10641]))                          )
                        (reparse-symbol indented_block_body) [10624 10722]))                  
                :type "class")
                nil [10306 10722])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10777 10781])
                            ("value" variable nil (reparse-symbol function_parameters) [10783 10788]))                          )
                        (reparse-symbol indented_block_body) [10760 10918])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10936 10940]))                          )
                        (reparse-symbol indented_block_body) [10923 11014]))                  
                :type "class")
                nil [10724 11014])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11088 11092])
                            ("key" variable nil (reparse-symbol function_parameters) [11094 11097])
                            ("value" variable nil (reparse-symbol function_parameters) [11099 11104]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11052 11130])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11171 11175])
                            ("key" variable nil (reparse-symbol function_parameters) [11177 11180]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11135 11206])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [11211 11230])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11244 11248])
                            ("key" variable nil (reparse-symbol function_parameters) [11250 11253])
                            ("default" variable nil (reparse-symbol function_parameters) [11255 11262]))                          )
                        (reparse-symbol indented_block_body) [11236 11497])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11514 11518]))                          )
                        (reparse-symbol indented_block_body) [11502 11700])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11715 11719]))                          )
                        (reparse-symbol indented_block_body) [11705 11832])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [11848 11853])
                        ("kwds" variable nil (reparse-symbol function_parameters) [11855 11861]))                      ) (reparse-symbol indented_block_body) [11837 12576])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12596 12600])
                            ("key" variable nil (reparse-symbol function_parameters) [12602 12605])
                            ("default" variable nil (reparse-symbol function_parameters) [12607 12614]))                          )
                        (reparse-symbol indented_block_body) [12581 12744]))                  
                :type "class")
                nil [11016 12744])
            ("MutableMapping" code nil nil [12745 12774])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13031 13035])
                            ("index" variable nil (reparse-symbol function_parameters) [13037 13042]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12995 13070])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13088 13092]))                          )
                        (reparse-symbol indented_block_body) [13075 13267])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13289 13293])
                            ("value" variable nil (reparse-symbol function_parameters) [13295 13300]))                          )
                        (reparse-symbol indented_block_body) [13272 13402])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13424 13428]))                          )
                        (reparse-symbol indented_block_body) [13407 13502])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13517 13521])
                            ("value" variable nil (reparse-symbol function_parameters) [13523 13528]))                          )
                        (reparse-symbol indented_block_body) [13507 13645])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13660 13664])
                            ("value" variable nil (reparse-symbol function_parameters) [13666 13671]))                          )
                        (reparse-symbol indented_block_body) [13650 13724]))                  
                :type "class")
                nil [12797 13724])
            ("Sequence" code nil nil [13725 13749])
            ("Sequence" code nil nil [13750 13779])
            ("Sequence" code nil nil [13780 13805])
            ("Sequence" code nil nil [13806 13831])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13908 13912])
                            ("index" variable nil (reparse-symbol function_parameters) [13914 13919])
                            ("value" variable nil (reparse-symbol function_parameters) [13921 13926]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13872 13954])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13995 13999])
                            ("index" variable nil (reparse-symbol function_parameters) [14001 14006]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13959 14034])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14070 14074])
                            ("index" variable nil (reparse-symbol function_parameters) [14076 14081])
                            ("value" variable nil (reparse-symbol function_parameters) [14083 14088]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14039 14116])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14132 14136])
                            ("value" variable nil (reparse-symbol function_parameters) [14138 14143]))                          )
                        (reparse-symbol indented_block_body) [14121 14184])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14201 14205]))                          )
                        (reparse-symbol indented_block_body) [14189 14316])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14332 14336])
                            ("values" variable nil (reparse-symbol function_parameters) [14338 14344]))                          )
                        (reparse-symbol indented_block_body) [14321 14399])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14412 14416])
                            ("index" variable nil (reparse-symbol function_parameters) [14418 14423]))                          )
                        (reparse-symbol indented_block_body) [14404 14494])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14510 14514])
                            ("value" variable nil (reparse-symbol function_parameters) [14516 14521]))                          )
                        (reparse-symbol indented_block_body) [14499 14560])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14578 14582])
                            ("values" variable nil (reparse-symbol function_parameters) [14584 14590]))                          )
                        (reparse-symbol indented_block_body) [14565 14641]))                  
                :type "class")
                nil [13834 14641])
            ("MutableSequence" code nil nil [14642 14672]))          
      :file "_abcoll.py"
      :pointmax 14673
      :fsize 14672
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax '((NAME 12157 . 12162) (IF 12173 . 12175) (ELSE 12191 . 12195)))
    (semanticdb-table "keyword.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    python Lib/keyword.py
\"\"\"" code nil nil [25 280])
            ("__all__" variable nil nil [282 315])
            ("kwlist" variable nil nil [317 880])
            ("iskeyword" variable nil nil [882 924])
            ("main" function nil nil [926 1956])
            ("if" code nil nil [1957 1995]))          
      :file "keyword.py"
      :pointmax 1995
      :fsize 1994
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "heapq.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6118])
            ("__all__" variable nil nil [6120 6239])
            ("itertools" include nil nil [6241 6308])
            ("operator" include nil nil [6309 6340])
            ("bisect" include nil nil [6341 6354])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6367 6368])
                ("y" variable nil (reparse-symbol function_parameters) [6370 6371]))              ) nil [6356 6533])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6547 6551])
                    ("item" variable nil (reparse-symbol function_parameters) [6553 6557]))                  )
                nil [6534 6681])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6694 6698]))                  )
                nil [6682 7010])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7027 7031])
                    ("item" variable nil (reparse-symbol function_parameters) [7033 7037]))                  )
                nil [7011 7624])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7641 7645])
                    ("item" variable nil (reparse-symbol function_parameters) [7647 7651]))                  )
                nil [7625 7832])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7845 7846]))                  )
                nil [7833 8361])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8375 8376])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8378 8386]))                  )
                nil [8362 8754])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8769 8770])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8772 8780]))                  )
                nil [8755 9928])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [10112 10116])
                ("startpos" variable nil (reparse-symbol function_parameters) [10118 10126])
                ("pos" variable nil (reparse-symbol function_parameters) [10128 10131]))              ) nil [10098 10962])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12578 12582])
                ("pos" variable nil (reparse-symbol function_parameters) [12584 12587]))              ) nil [12566 13306])
            ("try" code nil nil [13344 13403])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [13414 13424]))              ) nil [13404 14599])
            ("_nsmallest" variable nil nil [14678 14700])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [14715 14716])
                    ("iterable" variable nil (reparse-symbol function_parameters) [14718 14726])
                    ("key" variable nil (reparse-symbol function_parameters) [14728 14731]))                  )
                nil [14701 15852])
            ("_nlargest" variable nil nil [15853 15873])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15887 15888])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15890 15898])
                    ("key" variable nil (reparse-symbol function_parameters) [15900 15903]))                  )
                nil [15874 17050])
            ("if" code nil nil [17051 17332]))          
      :file "heapq.py"
      :pointmax 17332
      :fsize 17331
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((RETURN 6476 . 6482) (IF 6491 . 6493) (ELSE 6515 . 6519)))
    (semanticdb-table "sre_compile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("sys" include nil nil [264 280])
            ("_sre" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10012 10019])
                ("fixup" variable nil (reparse-symbol function_parameters) [10021 10026]))              ) nil [9990 11581])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11594 11596]))              ) nil [11582 11802])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11821 11825])
                ("pattern" variable nil (reparse-symbol function_parameters) [11827 11834])
                ("flags" variable nil (reparse-symbol function_parameters) [11836 11841]))              ) nil [11803 15201])
            ("try" code nil nil [15202 15323])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15337 15340]))              ) nil [15324 15437])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15448 15449])
                ("flags" variable nil (reparse-symbol function_parameters) [15451 15456]))              ) nil [15438 15683])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15696 15697])
                ("flags" variable nil (reparse-symbol function_parameters) [15699 15704]))              ) nil [15684 16428]))          
      :file "sre_compile.py"
      :pointmax 16428
      :fsize 16427
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_parse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5340]))                  
                :type "class")
                nil [2365 5340])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5398 5418])
                            ("self" variable nil (reparse-symbol indented_block_body) [5427 5441])
                            ("self" code nil (reparse-symbol indented_block_body) [5450 5463]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("string" variable nil (reparse-symbol function_parameters) [5381 5387]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5362 5464])
                    ("raise" code nil (reparse-symbol indented_block_body) [7715 7761]))                  
                :type "class")
                nil [5341 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 26393])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [26414 26422])
                ("match" variable nil (reparse-symbol function_parameters) [26424 26429]))              ) nil [26394 26799]))          
      :file "sre_parse.py"
      :pointmax 26799
      :fsize 26798
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((ASSIGN 26106 . 26107) (INDENT_BLOCK 7698 . 7711) (NEWLINE 7697 . 7698) (COLON 7696 . 7697)))
    (semanticdb-table "linecache.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 3965]))          
      :file "linecache.py"
      :pointmax 3965
      :fsize 3964
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "bisect.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
      :file "bisect.py"
      :pointmax 2596
      :fsize 2595
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_constants.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("MAXREPEAT" variable nil nil [432 449])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [557 561]))                  
                :type "class")
                nil [529 562])
            ("FAILURE" variable nil nil [576 595])
            ("SUCCESS" variable nil nil [596 615])
            ("ANY" variable nil nil [617 628])
            ("ANY_ALL" variable nil nil [629 648])
            ("ASSERT" variable nil nil [649 666])
            ("ASSERT_NOT" variable nil nil [667 692])
            ("AT" variable nil nil [693 702])
            ("BIGCHARSET" variable nil nil [703 728])
            ("BRANCH" variable nil nil [729 746])
            ("CALL" variable nil nil [747 760])
            ("CATEGORY" variable nil nil [761 782])
            ("CHARSET" variable nil nil [783 802])
            ("GROUPREF" variable nil nil [803 824])
            ("GROUPREF_IGNORE" variable nil nil [825 860])
            ("GROUPREF_EXISTS" variable nil nil [861 896])
            ("IN" variable nil nil [897 906])
            ("IN_IGNORE" variable nil nil [907 930])
            ("INFO" variable nil nil [931 944])
            ("JUMP" variable nil nil [945 958])
            ("LITERAL" variable nil nil [959 978])
            ("LITERAL_IGNORE" variable nil nil [979 1012])
            ("MARK" variable nil nil [1013 1026])
            ("MAX_REPEAT" variable nil nil [1027 1052])
            ("MAX_UNTIL" variable nil nil [1053 1076])
            ("MIN_REPEAT" variable nil nil [1077 1102])
            ("MIN_UNTIL" variable nil nil [1103 1126])
            ("NEGATE" variable nil nil [1127 1144])
            ("NOT_LITERAL" variable nil nil [1145 1172])
            ("NOT_LITERAL_IGNORE" variable nil nil [1173 1214])
            ("RANGE" variable nil nil [1215 1230])
            ("REPEAT" variable nil nil [1231 1248])
            ("REPEAT_ONE" variable nil nil [1249 1274])
            ("SUBPATTERN" variable nil nil [1275 1300])
            ("MIN_REPEAT_ONE" variable nil nil [1301 1334])
            ("AT_BEGINNING" variable nil nil [1348 1377])
            ("AT_BEGINNING_LINE" variable nil nil [1378 1417])
            ("AT_BEGINNING_STRING" variable nil nil [1418 1461])
            ("AT_BOUNDARY" variable nil nil [1462 1489])
            ("AT_NON_BOUNDARY" variable nil nil [1490 1525])
            ("AT_END" variable nil nil [1526 1543])
            ("AT_END_LINE" variable nil nil [1544 1571])
            ("AT_END_STRING" variable nil nil [1572 1603])
            ("AT_LOC_BOUNDARY" variable nil nil [1604 1639])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1640 1683])
            ("AT_UNI_BOUNDARY" variable nil nil [1684 1719])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1720 1763])
            ("CATEGORY_DIGIT" variable nil nil [1778 1811])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1812 1853])
            ("CATEGORY_SPACE" variable nil nil [1854 1887])
            ("CATEGORY_NOT_SPACE" variable nil nil [1888 1929])
            ("CATEGORY_WORD" variable nil nil [1930 1961])
            ("CATEGORY_NOT_WORD" variable nil nil [1962 2001])
            ("CATEGORY_LINEBREAK" variable nil nil [2002 2043])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2044 2093])
            ("CATEGORY_LOC_WORD" variable nil nil [2094 2133])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2134 2181])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2182 2223])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2224 2273])
            ("CATEGORY_UNI_SPACE" variable nil nil [2274 2315])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2316 2365])
            ("CATEGORY_UNI_WORD" variable nil nil [2366 2405])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2406 2453])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2454 2503])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2504 2561])
            ("OPCODES" variable nil nil [2563 3060])
            ("ATCODES" variable nil nil [3062 3286])
            ("CHCODES" variable nil nil [3288 3702])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3717 3721]))              ) nil [3704 3818])
            ("OPCODES" variable nil nil [3819 3846])
            ("ATCODES" variable nil nil [3847 3874])
            ("CHCODES" variable nil nil [3875 3902])
            ("OP_IGNORE" variable nil nil [3952 4082])
            ("AT_MULTILINE" variable nil nil [4084 4163])
            ("AT_LOCALE" variable nil nil [4165 4255])
            ("AT_UNICODE" variable nil nil [4257 4348])
            ("CH_LOCALE" variable nil nil [4350 4704])
            ("CH_UNICODE" variable nil nil [4706 5085])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5095 5116])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5156 5179])
            ("SRE_FLAG_LOCALE" variable nil nil [5199 5218])
            ("SRE_FLAG_MULTILINE" variable nil nil [5242 5264])
            ("SRE_FLAG_DOTALL" variable nil nil [5300 5320])
            ("SRE_FLAG_UNICODE" variable nil nil [5355 5376])
            ("SRE_FLAG_VERBOSE" variable nil nil [5398 5419])
            ("SRE_FLAG_DEBUG" variable nil nil [5453 5473])
            ("SRE_INFO_PREFIX" variable nil nil [5514 5533])
            ("SRE_INFO_LITERAL" variable nil nil [5547 5567])
            ("SRE_INFO_CHARSET" variable nil nil [5614 5634])
            ("if" code nil nil [5683 7138]))          
      :file "sre_constants.py"
      :pointmax 7138
      :fsize 7137
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "_weakrefset.py"
      :major-mode 'python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1830])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1847 1851]))                          )
                        (reparse-symbol indented_block_body) [1835 1909])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1931 1935])
                            ("item" variable nil (reparse-symbol function_parameters) [1937 1941]))                          )
                        (reparse-symbol indented_block_body) [1914 2066])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2086 2090]))                          )
                        (reparse-symbol indented_block_body) [2071 2189])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2194 2209])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2223 2227])
                            ("item" variable nil (reparse-symbol function_parameters) [2229 2233]))                          )
                        (reparse-symbol indented_block_body) [2215 2354])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2359 2473])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2487 2491]))                          )
                        (reparse-symbol indented_block_body) [2478 2530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2543 2547]))                          )
                        (reparse-symbol indented_block_body) [2535 2876])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2892 2896])
                            ("item" variable nil (reparse-symbol function_parameters) [2898 2902]))                          )
                        (reparse-symbol indented_block_body) [2881 3012])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3029 3033])
                            ("item" variable nil (reparse-symbol function_parameters) [3035 3039]))                          )
                        (reparse-symbol indented_block_body) [3017 3150])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3166 3170])
                            ("other" variable nil (reparse-symbol function_parameters) [3172 3177]))                          )
                        (reparse-symbol indented_block_body) [3155 3420])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3437 3441])
                            ("other" variable nil (reparse-symbol function_parameters) [3443 3448]))                          )
                        (reparse-symbol indented_block_body) [3425 3498])
                    ("_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3568 3572])
                            ("other" variable nil (reparse-symbol function_parameters) [3574 3579])
                            ("method" variable nil (reparse-symbol function_parameters) [3581 3587]))                          )
                        (reparse-symbol indented_block_body) [3557 3805])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3825 3829])
                            ("other" variable nil (reparse-symbol function_parameters) [3831 3836]))                          )
                        (reparse-symbol indented_block_body) [3810 3895])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3899 3919])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951])
                            ("other" variable nil (reparse-symbol function_parameters) [3953 3958]))                          )
                        (reparse-symbol indented_block_body) [3925 4171])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4188 4192])
                            ("other" variable nil (reparse-symbol function_parameters) [4194 4199]))                          )
                        (reparse-symbol indented_block_body) [4175 4432])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4454 4458])
                            ("other" variable nil (reparse-symbol function_parameters) [4460 4465]))                          )
                        (reparse-symbol indented_block_body) [4437 4526])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4530 4552])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4582 4586])
                            ("other" variable nil (reparse-symbol function_parameters) [4588 4593]))                          )
                        (reparse-symbol indented_block_body) [4558 4734])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4751 4755])
                            ("other" variable nil (reparse-symbol function_parameters) [4757 4762]))                          )
                        (reparse-symbol indented_block_body) [4738 4923])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4941 4945])
                            ("other" variable nil (reparse-symbol function_parameters) [4947 4952]))                          )
                        (reparse-symbol indented_block_body) [4928 5018])
                    ("__lt__" variable nil (reparse-symbol indented_block_body) [5022 5039])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("other" variable nil (reparse-symbol function_parameters) [5062 5067]))                          )
                        (reparse-symbol indented_block_body) [5045 5131])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5151 5155])
                            ("other" variable nil (reparse-symbol function_parameters) [5157 5162]))                          )
                        (reparse-symbol indented_block_body) [5136 5230])
                    ("__gt__" variable nil (reparse-symbol indented_block_body) [5234 5253])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274])
                            ("other" variable nil (reparse-symbol function_parameters) [5276 5281]))                          )
                        (reparse-symbol indented_block_body) [5259 5345])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5361 5365])
                            ("other" variable nil (reparse-symbol function_parameters) [5367 5372]))                          )
                        (reparse-symbol indented_block_body) [5350 5520])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5550 5554])
                            ("other" variable nil (reparse-symbol function_parameters) [5556 5561]))                          )
                        (reparse-symbol indented_block_body) [5525 5630])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5634 5664])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5702 5706])
                            ("other" variable nil (reparse-symbol function_parameters) [5708 5713]))                          )
                        (reparse-symbol indented_block_body) [5670 5936])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5953 5957])
                            ("other" variable nil (reparse-symbol function_parameters) [5959 5964]))                          )
                        (reparse-symbol indented_block_body) [5940 6207])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6222 6226])
                            ("other" variable nil (reparse-symbol function_parameters) [6228 6233]))                          )
                        (reparse-symbol indented_block_body) [6212 6287])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [6291 6305])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6326 6330])
                            ("other" variable nil (reparse-symbol function_parameters) [6332 6337]))                          )
                        (reparse-symbol indented_block_body) [6311 6390]))                  
                :type "class")
                nil [933 6390]))          
      :file "_weakrefset.py"
      :pointmax 6390
      :fsize 6389
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "StringIO.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"File-like objects that read from or write to a string buffer.

This implements (nearly) all stdio methods.

f = StringIO()      # ready for writing
f = StringIO(buf)   # ready for reading
f.close()           # explicitly release resources held
flag = f.isatty()   # always false
pos = f.tell()      # get current position
f.seek(pos)         # set current position
f.seek(pos, mode)   # mode 0: absolute; 1: relative; 2: relative to EOF
buf = f.read()      # read until EOF
buf = f.read(n)     # read up to n bytes
buf = f.readline()  # read until end of line ('\\n') or EOF
list = f.readlines()# list of f.readline() results until EOF
f.truncate([size])  # truncate file at to at most size (default: current pos)
f.write(buf)        # write at current position
f.writelines(list)  # for line in list: f.write(line)
f.getvalue()        # return whole file's contents as a string

Notes:
- Using a real file is often faster (but less convenient).
- There's also a much faster implementation in C, called cStringIO, but
  it's not subclassable.
- fileno() is left unimplemented so that code which uses it triggers
  an exception early.
- Seeking far beyond EOF and then writing will insert real null
  bytes that occupy space in the buffer.
- There's a simple test set (see end of this file).
\"\"\"" code nil nil [1 1298])
            ("try" code nil nil [1299 1369])
            ("__all__" variable nil nil [1370 1392])
            ("_complain_ifclosed" function (:arguments 
              ( ("closed" variable nil (reparse-symbol function_parameters) [1417 1423]))              ) nil [1394 1498])
            ("StringIO" type
               (:documentation "class StringIO([buffer])

    When a StringIO object is created, it can be initialized to an existing
    string by passing the string to the constructor. If no string is given,
    the StringIO will start empty.

    The StringIO object can accept either Unicode or 8-bit strings, but
    mixing the two may take some care. If both are used, 8-bit strings that
    cannot be interpreted as 7-bit ASCII (that use the 8th bit) will cause
    a UnicodeError to be raised when getvalue() is called.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [2119 2182])
                            ("self" variable nil (reparse-symbol indented_block_body) [2190 2204])
                            ("self" variable nil (reparse-symbol indented_block_body) [2213 2232])
                            ("self" variable nil (reparse-symbol indented_block_body) [2241 2258])
                            ("self" variable nil (reparse-symbol indented_block_body) [2267 2279])
                            ("self" variable nil (reparse-symbol indented_block_body) [2288 2307])
                            ("self" variable nil (reparse-symbol indented_block_body) [2316 2334]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2043 2047])
                            ("buf" variable nil (reparse-symbol function_parameters) [2049 2052]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2030 2335])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2353 2357]))                          )
                        (reparse-symbol indented_block_body) [2340 2380])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2394 2398]))                          
                        :documentation "A file object is its own iterator, for example iter(f) returns f
        (unless f is closed). When a file is used as an iterator, typically
        in a for loop (for example, for line in f: print line), the next()
        method is called repeatedly. This method returns the next input line,
        or raises StopIteration when EOF is hit.
        ")
                        (reparse-symbol indented_block_body) [2385 2902])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2917 2921]))                          
                        :documentation "Free the memory buffer.
        ")
                        (reparse-symbol indented_block_body) [2907 3065])
                    ("isatty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3081 3085]))                          
                        :documentation "Returns False because StringIO objects are not connected to a
        tty-like device.
        ")
                        (reparse-symbol indented_block_body) [3070 3259])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3273 3277])
                            ("pos" variable nil (reparse-symbol function_parameters) [3279 3282])
                            ("mode" variable nil (reparse-symbol function_parameters) [3284 3288]))                          
                        :documentation "Set the file's current position.

        The mode argument is optional and defaults to 0 (absolute file
        positioning); other values are 1 (seek relative to the current
        position) and 2 (seek relative to the file's end).

        There is no return value.
        ")
                        (reparse-symbol indented_block_body) [3264 3862])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3876 3880]))                          
                        :documentation "Return the file's current position.")
                        (reparse-symbol indented_block_body) [3867 3997])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4011 4015])
                            ("n" variable nil (reparse-symbol function_parameters) [4017 4018]))                          
                        :documentation "Read at most size bytes from the file
        (less if the read hits EOF before obtaining size bytes).

        If the size argument is negative or omitted, read all data until EOF
        is reached. The bytes are returned as a string object. An empty
        string is returned when EOF is encountered immediately.
        ")
                        (reparse-symbol indented_block_body) [4002 4710])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4728 4732])
                            ("length" variable nil (reparse-symbol function_parameters) [4734 4740]))                          )
                        (reparse-symbol indented_block_body) [4715 5796])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5815 5819])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [5821 5829]))                          
                        :documentation "Read until EOF using readline() and return a list containing the
        lines thus read.

        If the optional sizehint argument is present, instead of reading up
        to EOF, whole lines totalling approximately sizehint bytes (or more
        to accommodate a final whole line).
        ")
                        (reparse-symbol indented_block_body) [5801 6412])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6430 6434])
                            ("size" variable nil (reparse-symbol function_parameters) [6436 6440]))                          
                        :documentation "Truncate the file's size.

        If the optional size argument is present, the file is truncated to
        (at most) that size. The size defaults to the current position.
        The current file position is not changed unless the position
        is beyond the new file size.

        If the specified size exceeds the file's current size, the
        file remains unchanged.
        ")
                        (reparse-symbol indented_block_body) [6417 7154])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7169 7173])
                            ("s" variable nil (reparse-symbol function_parameters) [7175 7176]))                          
                        :documentation "Write a string to the file.

        There is no return value.
        ")
                        (reparse-symbol indented_block_body) [7159 8126])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8146 8150])
                            ("iterable" variable nil (reparse-symbol function_parameters) [8152 8160]))                          
                        :documentation "Write a sequence of strings to the file. The sequence can be any
        iterable object producing strings, typically a list of strings. There
        is no return value.

        (The name is intended to match readlines(); writelines() does not add
        line separators.)
        ")
                        (reparse-symbol indented_block_body) [8131 8543])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8558 8562]))                          
                        :documentation "Flush the internal buffer
        ")
                        (reparse-symbol indented_block_body) [8548 8654])
                    ("getvalue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8672 8676]))                          
                        :documentation "
        Retrieve the entire contents of the \"file\" at any time before
        the StringIO object's close() method is called.

        The StringIO object can accept either Unicode or 8-bit strings,
        but mixing the two may take some care. If both are used, 8-bit
        strings that cannot be interpreted as 7-bit ASCII (that use the
        8th bit) will cause a UnicodeError to be raised when getvalue()
        is called.
        ")
                        (reparse-symbol indented_block_body) [8659 9301]))                  
                :type "class")
                nil [1499 9301])
            ("test" function nil nil [9326 10623])
            ("if" code nil nil [10624 10662]))          
      :file "StringIO.py"
      :pointmax 10662
      :fsize 10661
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "BaseHTTPServer.py"
      :file "BaseHTTPServer.py"
      :fsize 22573
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "traceback.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_stack(f, limit))."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2757])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2773 2775])
                    ("limit" variable nil (reparse-symbol function_parameters) [2777 2782]))                  )
                nil [2758 3893])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3915 3920])
                    ("value" variable nil (reparse-symbol function_parameters) [3922 3927])
                    ("tb" variable nil (reparse-symbol function_parameters) [3929 3931])
                    ("limit" variable nil (reparse-symbol function_parameters) [3933 3938])
                    ("file" variable nil (reparse-symbol function_parameters) [3945 3949]))                  )
                nil [3895 4726])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4748 4753])
                    ("value" variable nil (reparse-symbol function_parameters) [4755 4760])
                    ("tb" variable nil (reparse-symbol function_parameters) [4762 4764])
                    ("limit" variable nil (reparse-symbol function_parameters) [4766 4771]))                  )
                nil [4727 5378])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5405 5410])
                    ("value" variable nil (reparse-symbol function_parameters) [5412 5417]))                  )
                nil [5379 7489])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7517 7522])
                    ("value" variable nil (reparse-symbol function_parameters) [7524 7529]))                  )
                nil [7490 7786])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7801 7806]))              ) nil [7787 8071])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8087 8092])
                    ("file" variable nil (reparse-symbol function_parameters) [8099 8103]))                  )
                nil [8073 8512])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8529 8534]))                  )
                nil [8514 8754])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8771 8776])
                    ("file" variable nil (reparse-symbol function_parameters) [8783 8787]))                  )
                nil [8756 9151])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9169 9170])
                    ("limit" variable nil (reparse-symbol function_parameters) [9177 9182])
                    ("file" variable nil (reparse-symbol function_parameters) [9189 9193]))                  )
                nil [9153 9656])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9674 9675])
                    ("limit" variable nil (reparse-symbol function_parameters) [9682 9687]))                  )
                nil [9657 9958])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9977 9978])
                    ("limit" variable nil (reparse-symbol function_parameters) [9985 9990]))                  )
                nil [9959 11119])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11134 11136]))                  )
                nil [11120 11256]))          
      :file "traceback.py"
      :pointmax 11256
      :fsize 11255
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "shutil.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 697])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [734 738]))                  
                :type "class")
                nil [699 739])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [740 917])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [918 1007])
            ("try" code nil nil [1008 1072])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1089 1093])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1095 1099])
                    ("length" variable nil (reparse-symbol function_parameters) [1101 1107]))                  )
                nil [1073 1297])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1312 1315])
                ("dst" variable nil (reparse-symbol function_parameters) [1317 1320]))              ) nil [1298 1650])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1664 1667])
                    ("dst" variable nil (reparse-symbol function_parameters) [1669 1672]))                  )
                nil [1651 2268])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2282 2285])
                    ("dst" variable nil (reparse-symbol function_parameters) [2287 2290]))                  )
                nil [2269 2457])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2471 2474])
                    ("dst" variable nil (reparse-symbol function_parameters) [2476 2479]))                  )
                nil [2458 3018])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3028 3031])
                    ("dst" variable nil (reparse-symbol function_parameters) [3033 3036]))                  )
                nil [3019 3264])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3275 3278])
                    ("dst" variable nil (reparse-symbol function_parameters) [3280 3283]))                  )
                nil [3265 3518])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3539 3548]))                  )
                nil [3519 3931])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3945 3948])
                    ("dst" variable nil (reparse-symbol function_parameters) [3950 3953])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [3955 3963])
                    ("ignore" variable nil (reparse-symbol function_parameters) [3971 3977]))                  )
                nil [3932 6271])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6283 6287])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6289 6302])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6310 6317]))                  )
                nil [6272 7895])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [7911 7915]))              ) nil [7897 8129])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8139 8142])
                    ("dst" variable nil (reparse-symbol function_parameters) [8144 8147]))                  )
                nil [8130 9586])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9602 9605])
                ("dst" variable nil (reparse-symbol function_parameters) [9607 9610]))              ) nil [9587 9820])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9834 9838]))                  )
                nil [9821 10099])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10113 10117]))                  )
                nil [10100 10378])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10397 10406])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10408 10416])
                    ("compress" variable nil (reparse-symbol function_parameters) [10418 10426])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10435 10442])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10446 10453])
                    ("owner" variable nil (reparse-symbol function_parameters) [10475 10480])
                    ("group" variable nil (reparse-symbol function_parameters) [10487 10492])
                    ("logger" variable nil (reparse-symbol function_parameters) [10499 10505]))                  )
                nil [10379 12347])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12371 12379])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12381 12393])
                ("verbose" variable nil (reparse-symbol function_parameters) [12395 12402])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12410 12417]))              ) nil [12348 13077])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13096 13105])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13107 13115])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13117 13124])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13128 13135])
                    ("logger" variable nil (reparse-symbol function_parameters) [13139 13145]))                  )
                nil [13078 14785])
            ("_ARCHIVE_FORMATS" variable nil nil [14786 15083])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15085 15404])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [15433 15437])
                    ("function" variable nil (reparse-symbol function_parameters) [15439 15447])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [15449 15459])
                    ("description" variable nil (reparse-symbol function_parameters) [15466 15477]))                  )
                nil [15405 16396])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16427 16431]))              ) nil [16397 16465])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [16483 16492])
                    ("format" variable nil (reparse-symbol function_parameters) [16494 16500])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [16502 16510])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [16517 16525])
                    ("verbose" variable nil (reparse-symbol function_parameters) [16532 16539])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [16560 16567])
                    ("owner" variable nil (reparse-symbol function_parameters) [16571 16576])
                    ("group" variable nil (reparse-symbol function_parameters) [16583 16588])
                    ("logger" variable nil (reparse-symbol function_parameters) [16595 16601]))                  )
                nil [16466 18303]))          
      :file "shutil.py"
      :pointmax 18303
      :fsize 18302
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "stat.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("SF_ARCHIVED" variable nil nil [1589 1614])
            ("SF_IMMUTABLE" variable nil nil [1615 1640])
            ("SF_APPEND" variable nil nil [1641 1666])
            ("SF_NOUNLINK" variable nil nil [1667 1692])
            ("SF_SNAPSHOT" variable nil nil [1693 1718]))          
      :file "stat.py"
      :pointmax 1719
      :fsize 1718
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "fnmatch.py"
      :major-mode 'python-mode
      :tags nil
      :file "fnmatch.py"
      :pointmax 3240
      :fsize 3239
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tempfile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Temporary files.

This module provides generic, low- and high-level interfaces for
creating temporary files and directories.  The interfaces listed
as \"safe\" just below can be used without fear of race conditions.
Those listed as \"unsafe\" cannot, and are provided for backward
compatibility only.

This module also provides some data items to the user:

  TMP_MAX  - maximum number of names that will be tried before
             giving up.
  template - the default prefix for all temporary names.
             You may change this to control the default prefix.
  tempdir  - If this is set to a string before the first use of
             any routine from this module, it will be considered as
             another candidate location to store temporary files.
\"\"\"" code nil nil [1 767])
            ("__all__" variable nil nil [769 1112])
            ("os" include nil nil [1127 1143])
            ("errno" include nil nil [1144 1166])
            ("random" include nil nil [1167 1203])
            ("try" code nil nil [1205 1325])
            ("try" code nil nil [1326 1710])
            ("try" code nil nil [1712 1801])
            ("_allocate_lock" variable nil nil [1801 1839])
            ("_text_openflags" code nil nil [1841 1896])
            ("if" code nil nil [1897 1968])
            ("if" code nil nil [1968 2037])
            ("_bin_openflags" variable nil nil [2038 2070])
            ("if" code nil nil [2071 2135])
            ("if" code nil nil [2136 2216])
            ("template" variable nil nil [2217 2233])
            ("_once_lock" variable nil nil [2257 2286])
            ("if" code nil nil [2288 2613])
            ("_exists" function (:arguments 
              ( ("fn" variable nil (reparse-symbol function_parameters) [2626 2628]))              ) nil [2614 2731])
            ("_RandomNameSequence" type
               (:documentation "An instance of _RandomNameSequence generates an endless
    sequence of unpredictable strings which can safely be incorporated
    into file names.  Each string is six characters long.  Multiple
    threads can safely use the same instance at the same time.

    _RandomNameSequence is an iterator."
                :members 
                  ( ("characters" variable nil (reparse-symbol indented_block_body) [3073 3199])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3233 3262])
                            ("self" variable nil (reparse-symbol indented_block_body) [3271 3291])
                            ("self" variable nil (reparse-symbol indented_block_body) [3300 3333]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3218 3222]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3205 3334])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3352 3356]))                          )
                        (reparse-symbol indented_block_body) [3339 3379])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3393 3397]))                          )
                        (reparse-symbol indented_block_body) [3384 3663]))                  
                :type "class")
                nil [2732 3663])
            ("_candidate_tempdir_list" function (:documentation "Generate a list of candidate temporary directories which
    _get_default_tempdir will try.") nil [3664 4497])
            ("_get_default_tempdir" function (:documentation "Calculate the default directory to use for temporary files.
    This routine should be called exactly once.

    We determine whether or not a candidate temp dir is usable by
    trying to create and write to a file in that directory.  If this
    is successful, the test file is deleted.  To prevent denial of
    service, the name of the test file must be randomized.") nil [4498 5833])
            ("_name_sequence" variable nil nil [5834 5855])
            ("_get_candidate_names" function (:documentation "Common setup sequence for all user-callable interfaces.") nil [5857 6221])
            ("_mkstemp_inner" function
               (:documentation "Code common to mkstemp, TemporaryFile, and NamedTemporaryFile."
                :arguments 
                  ( ("dir" variable nil (reparse-symbol function_parameters) [6242 6245])
                    ("pre" variable nil (reparse-symbol function_parameters) [6247 6250])
                    ("suf" variable nil (reparse-symbol function_parameters) [6252 6255])
                    ("flags" variable nil (reparse-symbol function_parameters) [6257 6262]))                  )
                nil [6223 6820])
            ("gettempprefix" function (:documentation "Accessor for tempdir.template.") nil [6850 6932])
            ("tempdir" variable nil nil [6933 6947])
            ("gettempdir" function (:documentation "Accessor for tempfile.tempdir.") nil [6949 7243])
            ("mkstemp" function
               (:documentation "User-callable function to create and return a unique temporary
    file.  The return value is a pair (fd, name) where fd is the
    file descriptor returned by os.open, and name is the filename.

    If 'suffix' is specified, the file name will end with that suffix,
    otherwise there will be no suffix.

    If 'prefix' is specified, the file name will begin with that prefix,
    otherwise a default prefix is used.

    If 'dir' is specified, the file will be created in that directory,
    otherwise a default directory is used.

    If 'text' is specified and true, the file is opened in text
    mode.  Else (the default) the file is opened in binary mode.  On
    some operating systems, this makes no difference.

    The file is readable and writable only by the creating user ID.
    If the operating system uses permission bits to indicate whether a
    file is executable, the file is executable by no one. The file
    descriptor is not inherited by children of this process.

    Caller is responsible for deleting the file when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [7256 7262])
                    ("prefix" variable nil (reparse-symbol function_parameters) [7267 7273])
                    ("dir" variable nil (reparse-symbol function_parameters) [7284 7287])
                    ("text" variable nil (reparse-symbol function_parameters) [7294 7298]))                  )
                nil [7244 8571])
            ("mkdtemp" function
               (:documentation "User-callable function to create and return a unique temporary
    directory.  The return value is the pathname of the directory.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    The directory is readable, writable, and searchable only by the
    creating user.

    Caller is responsible for deleting the directory when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [8585 8591])
                    ("prefix" variable nil (reparse-symbol function_parameters) [8596 8602])
                    ("dir" variable nil (reparse-symbol function_parameters) [8613 8616]))                  )
                nil [8573 9495])
            ("mktemp" function
               (:documentation "User-callable function to return a unique temporary file name.  The
    file is not created.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    This function is unsafe and should not be used.  The file name
    refers to a file that did not exist at some point, but by the time
    you get around to creating it, someone else may have beaten you to
    the punch.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [9507 9513])
                    ("prefix" variable nil (reparse-symbol function_parameters) [9518 9524])
                    ("dir" variable nil (reparse-symbol function_parameters) [9535 9538]))                  )
                nil [9496 10448])
            ("_TemporaryFileWrapper" type
               (:documentation "Temporary file wrapper

    This class provides a wrapper around files opened for
    temporary use.  In particular, it seeks to automatically
    remove the file when it is no longer needed.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10744 10760])
                            ("self" variable nil (reparse-symbol indented_block_body) [10769 10785])
                            ("self" variable nil (reparse-symbol indented_block_body) [10794 10819])
                            ("self" variable nil (reparse-symbol indented_block_body) [10828 10848]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10704 10708])
                            ("file" variable nil (reparse-symbol function_parameters) [10710 10714])
                            ("name" variable nil (reparse-symbol function_parameters) [10716 10720])
                            ("delete" variable nil (reparse-symbol function_parameters) [10722 10728]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10691 10849])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10870 10874])
                            ("name" variable nil (reparse-symbol function_parameters) [10876 10880]))                          )
                        (reparse-symbol indented_block_body) [10854 11223])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11360 11364]))                          )
                        (reparse-symbol indented_block_body) [11346 11417])
                    ("if" code nil (reparse-symbol indented_block_body) [11629 12604]))                  
                :type "class")
                nil [10450 12604])
            ("NamedTemporaryFile" function
               (:documentation "Create and return a temporary file.
    Arguments:
    'prefix', 'suffix', 'dir' -- as for mkstemp.
    'mode' -- the mode argument to os.fdopen (default \"w+b\").
    'bufsize' -- the buffer size argument to os.fdopen (default -1).
    'delete' -- whether the file is deleted on close (default True).
    The file is created as mkstemp() would do it.

    Returns an object with a file-like interface; the name of the file
    is accessible as file.name.  The file will be automatically deleted
    when it is closed unless the 'delete' argument is set to False.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [12629 12633])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [12641 12648])
                    ("suffix" variable nil (reparse-symbol function_parameters) [12653 12659])
                    ("prefix" variable nil (reparse-symbol function_parameters) [12687 12693])
                    ("dir" variable nil (reparse-symbol function_parameters) [12704 12707])
                    ("delete" variable nil (reparse-symbol function_parameters) [12714 12720]))                  )
                nil [12606 13805])
            ("if" code nil nil [13806 14949])
            ("SpooledTemporaryFile" type
               (:documentation "Temporary file wrapper, specialized to switch from
    StringIO to a real file when it exceeds a certain size or
    when a fileno is needed.
    "
                :members 
                  ( ("_rolled" variable nil (reparse-symbol indented_block_body) [15139 15154])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15279 15303])
                            ("self" variable nil (reparse-symbol indented_block_body) [15312 15337])
                            ("self" variable nil (reparse-symbol indented_block_body) [15346 15366])
                            ("self" variable nil (reparse-symbol indented_block_body) [15375 15437]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15173 15177])
                            ("max_size" variable nil (reparse-symbol function_parameters) [15179 15187])
                            ("mode" variable nil (reparse-symbol function_parameters) [15191 15195])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [15203 15210])
                            ("suffix" variable nil (reparse-symbol function_parameters) [15232 15238])
                            ("prefix" variable nil (reparse-symbol function_parameters) [15243 15249])
                            ("dir" variable nil (reparse-symbol function_parameters) [15260 15263]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15160 15438])
                    ("_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15454 15458])
                            ("file" variable nil (reparse-symbol function_parameters) [15460 15464]))                          )
                        (reparse-symbol indented_block_body) [15443 15609])
                    ("rollover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15627 15631]))                          )
                        (reparse-symbol indented_block_body) [15614 15905])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16153 16157]))                          )
                        (reparse-symbol indented_block_body) [16139 16280])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16298 16302])
                            ("exc" variable nil (reparse-symbol function_parameters) [16304 16307])
                            ("value" variable nil (reparse-symbol function_parameters) [16309 16314])
                            ("tb" variable nil (reparse-symbol function_parameters) [16316 16318]))                          )
                        (reparse-symbol indented_block_body) [16285 16348])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16386 16390]))                          )
                        (reparse-symbol indented_block_body) [16373 16430])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16445 16449]))                          )
                        (reparse-symbol indented_block_body) [16435 16479])
                    ("closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16509 16513]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16484 16549])
                    ("encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16581 16585]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16554 16623])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16639 16643]))                          )
                        (reparse-symbol indented_block_body) [16628 16705])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16720 16724]))                          )
                        (reparse-symbol indented_block_body) [16710 16754])
                    ("isatty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16770 16774]))                          )
                        (reparse-symbol indented_block_body) [16759 16812])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16840 16844]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16817 16878])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16906 16910]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16883 16944])
                    ("newlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16976 16980]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16949 17018])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17032 17036]))                          )
                        (reparse-symbol indented_block_body) [17023 17070])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17084 17088])
                            ("args" variable nil (reparse-symbol function_parameters) [17090 17095]))                          )
                        (reparse-symbol indented_block_body) [17075 17136])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17154 17158])
                            ("args" variable nil (reparse-symbol function_parameters) [17160 17165]))                          )
                        (reparse-symbol indented_block_body) [17141 17210])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17229 17233])
                            ("args" variable nil (reparse-symbol function_parameters) [17235 17240]))                          )
                        (reparse-symbol indented_block_body) [17215 17286])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17300 17304])
                            ("args" variable nil (reparse-symbol function_parameters) [17306 17311]))                          )
                        (reparse-symbol indented_block_body) [17291 17345])
                    ("softspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17378 17382]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17350 17421])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17435 17439]))                          )
                        (reparse-symbol indented_block_body) [17426 17475])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17493 17497]))                          )
                        (reparse-symbol indented_block_body) [17480 17530])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17545 17549])
                            ("s" variable nil (reparse-symbol function_parameters) [17551 17552]))                          )
                        (reparse-symbol indented_block_body) [17535 17652])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17672 17676])
                            ("iterable" variable nil (reparse-symbol function_parameters) [17678 17686]))                          )
                        (reparse-symbol indented_block_body) [17657 17798])
                    ("xreadlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17818 17822])
                            ("args" variable nil (reparse-symbol function_parameters) [17824 17829]))                          )
                        (reparse-symbol indented_block_body) [17803 17876]))                  
                :type "class")
                nil [14950 17876]))          
      :file "tempfile.py"
      :pointmax 17876
      :fsize 17875
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "random.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 3881])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3899 3903]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3886 4055])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4073 4077])
                            ("state" variable nil (reparse-symbol function_parameters) [4079 4084]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4060 5122])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145])
                            ("n" variable nil (reparse-symbol function_parameters) [5147 5148]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5127 5688])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5912 5916]))                          )
                        (reparse-symbol indented_block_body) [5895 5963])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5985 5989])
                            ("state" variable nil (reparse-symbol function_parameters) [5991 5996]))                          )
                        (reparse-symbol indented_block_body) [5968 6042])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6062 6066]))                          )
                        (reparse-symbol indented_block_body) [6047 6120])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6201 6205])
                            ("start" variable nil (reparse-symbol function_parameters) [6207 6212])
                            ("stop" variable nil (reparse-symbol function_parameters) [6214 6218])
                            ("step" variable nil (reparse-symbol function_parameters) [6225 6229])
                            ("int" variable nil (reparse-symbol function_parameters) [6233 6236])
                            ("default" variable nil (reparse-symbol function_parameters) [6242 6249])
                            ("maxwidth" variable nil (reparse-symbol function_parameters) [6274 6282]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.
        Do not supply the 'int', 'default', and 'maxwidth' arguments.
        ")
                        (reparse-symbol indented_block_body) [6187 8865])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8882 8886])
                            ("a" variable nil (reparse-symbol function_parameters) [8888 8889])
                            ("b" variable nil (reparse-symbol function_parameters) [8891 8892]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8870 9023])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9043 9047])
                            ("n" variable nil (reparse-symbol function_parameters) [9049 9050])
                            ("_log" variable nil (reparse-symbol function_parameters) [9052 9056])
                            ("int" variable nil (reparse-symbol function_parameters) [9063 9066])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9072 9081])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9110 9117])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9131 9145]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9028 10182])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10261 10265])
                            ("seq" variable nil (reparse-symbol function_parameters) [10267 10270]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10250 10425])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10442 10446])
                            ("x" variable nil (reparse-symbol function_parameters) [10448 10449])
                            ("random" variable nil (reparse-symbol function_parameters) [10451 10457])
                            ("int" variable nil (reparse-symbol function_parameters) [10464 10467]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.
        ")
                        (reparse-symbol indented_block_body) [10430 10954])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10970 10974])
                            ("population" variable nil (reparse-symbol function_parameters) [10976 10986])
                            ("k" variable nil (reparse-symbol function_parameters) [10988 10989]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10959 13789])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13944 13948])
                            ("a" variable nil (reparse-symbol function_parameters) [13950 13951])
                            ("b" variable nil (reparse-symbol function_parameters) [13953 13954]))                          )
                        (reparse-symbol indented_block_body) [13932 14081])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14158 14162])
                            ("low" variable nil (reparse-symbol function_parameters) [14164 14167])
                            ("high" variable nil (reparse-symbol function_parameters) [14173 14177])
                            ("mode" variable nil (reparse-symbol function_parameters) [14183 14187]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14143 14672])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14761 14765])
                            ("mu" variable nil (reparse-symbol function_parameters) [14767 14769])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14771 14776]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14743 15436])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15529 15533])
                            ("mu" variable nil (reparse-symbol function_parameters) [15535 15537])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15539 15544]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15510 15864])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15956 15960])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15962 15967]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15940 16550])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16644 16648])
                            ("mu" variable nil (reparse-symbol function_parameters) [16650 16652])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16654 16659]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16624 18077])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18164 18168])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18170 18175])
                            ("beta" variable nil (reparse-symbol function_parameters) [18177 18181]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18147 20371])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20459 20463])
                            ("mu" variable nil (reparse-symbol function_parameters) [20465 20467])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20469 20474]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20449 21785])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22281 22285])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22287 22292])
                            ("beta" variable nil (reparse-symbol function_parameters) [22294 22298]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22265 22756])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22832 22836])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22838 22843]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22814 23008])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23086 23090])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23092 23097])
                            ("beta" variable nil (reparse-symbol function_parameters) [23099 23103]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23067 23355]))                  
                :type "class")
                nil [2273 23355])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23448 23459])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23506 23510])
                            ("a" variable nil (reparse-symbol function_parameters) [23512 23513]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23497 24521])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24537 24541]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24526 25593])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25611 25615]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25598 25747])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25765 25769])
                            ("state" variable nil (reparse-symbol function_parameters) [25771 25776]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25752 26158])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26177 26181])
                            ("n" variable nil (reparse-symbol function_parameters) [26183 26184]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26163 26926])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26944 26948])
                            ("x" variable nil (reparse-symbol function_parameters) [26950 26951])
                            ("y" variable nil (reparse-symbol function_parameters) [26955 26956])
                            ("z" variable nil (reparse-symbol function_parameters) [26960 26961]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26931 27730])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27746 27750])
                            ("a" variable nil (reparse-symbol function_parameters) [27752 27753]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27735 28434]))                  
                :type "class")
                nil [23415 28434])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28782 28786]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28771 28921])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28942 28946])
                            ("k" variable nil (reparse-symbol function_parameters) [28948 28949]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28926 29401])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29416 29420])
                            ("args" variable nil (reparse-symbol function_parameters) [29422 29427])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29429 29435]))                          )
                        (reparse-symbol indented_block_body) [29406 29529])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29533 29557])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29583 29587])
                            ("args" variable nil (reparse-symbol function_parameters) [29589 29594])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29596 29602]))                          )
                        (reparse-symbol indented_block_body) [29563 29761])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29765 29802]))                  
                :type "class")
                nil [28506 29803])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29883 29884])
                ("func" variable nil (reparse-symbol function_parameters) [29886 29890])
                ("args" variable nil (reparse-symbol function_parameters) [29892 29896]))              ) nil [29863 30417])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30429 30430]))              ) nil [30419 31217])
            ("_inst" variable nil nil [31549 31565])
            ("seed" variable nil nil [31566 31583])
            ("random" variable nil nil [31584 31605])
            ("uniform" variable nil nil [31606 31629])
            ("triangular" variable nil nil [31630 31659])
            ("randint" variable nil nil [31660 31683])
            ("choice" variable nil nil [31684 31705])
            ("randrange" variable nil nil [31706 31733])
            ("sample" variable nil nil [31734 31755])
            ("shuffle" variable nil nil [31756 31779])
            ("normalvariate" variable nil nil [31780 31815])
            ("lognormvariate" variable nil nil [31816 31853])
            ("expovariate" variable nil nil [31854 31885])
            ("vonmisesvariate" variable nil nil [31886 31925])
            ("gammavariate" variable nil nil [31926 31959])
            ("gauss" variable nil nil [31960 31979])
            ("betavariate" variable nil nil [31980 32011])
            ("paretovariate" variable nil nil [32012 32047])
            ("weibullvariate" variable nil nil [32048 32085])
            ("getstate" variable nil nil [32086 32111])
            ("setstate" variable nil nil [32112 32137])
            ("jumpahead" variable nil nil [32138 32165])
            ("getrandbits" variable nil nil [32166 32197])
            ("if" code nil nil [32199 32238]))          
      :file "random.py"
      :pointmax 32238
      :fsize 32237
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((NAME 14464 . 14465) (IF 14472 . 14474) (ELSE 14488 . 14492)))
    (semanticdb-table "argparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
\"\"\"" code nil nil [58 2875])
            ("__version__" variable nil nil [2877 2896])
            ("__all__" variable nil nil [2897 3248])
            ("collections" include nil nil [3251 3285])
            ("copy" include nil nil [3286 3306])
            ("os" include nil nil [3307 3323])
            ("re" include nil nil [3324 3340])
            ("sys" include nil nil [3341 3359])
            ("textwrap" include nil nil [3360 3388])
            ("gettext" include nil nil [3390 3422])
            ("_callable" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [3439 3442]))              ) nil [3425 3510])
            ("SUPPRESS" variable nil nil [3512 3537])
            ("OPTIONAL" variable nil nil [3539 3553])
            ("ZERO_OR_MORE" variable nil nil [3554 3572])
            ("ONE_OR_MORE" variable nil nil [3573 3590])
            ("PARSER" variable nil nil [3591 3606])
            ("REMAINDER" variable nil nil [3607 3624])
            ("_UNRECOGNIZED_ARGS_ATTR" variable nil nil [3625 3671])
            ("_AttributeHolder" type
               (:documentation "Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    "
                :superclasses ("object")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4111 4115]))                          )
                        (reparse-symbol indented_block_body) [4098 4427])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452]))                          )
                        (reparse-symbol indented_block_body) [4432 4500])
                    ("_get_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4519 4523]))                          )
                        (reparse-symbol indented_block_body) [4505 4544]))                  
                :type "class")
                nil [3770 4544])
            ("_ensure_value" function (:arguments 
              ( ("namespace" variable nil (reparse-symbol function_parameters) [4564 4573])
                ("name" variable nil (reparse-symbol function_parameters) [4575 4579])
                ("value" variable nil (reparse-symbol function_parameters) [4581 4586]))              ) nil [4546 4712])
            ("HelpFormatter" type
               (:documentation "Formatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5222 5402])
                            ("self" variable nil (reparse-symbol indented_block_body) [5411 5428])
                            ("self" variable nil (reparse-symbol indented_block_body) [5437 5478])
                            ("self" variable nil (reparse-symbol indented_block_body) [5487 5530])
                            ("self" variable nil (reparse-symbol indented_block_body) [5539 5558])
                            ("self" variable nil (reparse-symbol indented_block_body) [5568 5592])
                            ("self" variable nil (reparse-symbol indented_block_body) [5601 5616])
                            ("self" variable nil (reparse-symbol indented_block_body) [5625 5652])
                            ("self" variable nil (reparse-symbol indented_block_body) [5662 5708])
                            ("self" variable nil (reparse-symbol indented_block_body) [5717 5759])
                            ("self" variable nil (reparse-symbol indented_block_body) [5769 5815])
                            ("self" variable nil (reparse-symbol indented_block_body) [5824 5874]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5042 5046])
                            ("prog" variable nil (reparse-symbol function_parameters) [5065 5069])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [5088 5104])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [5125 5142])
                            ("width" variable nil (reparse-symbol function_parameters) [5164 5169]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5029 5875])
                    ("_indent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6006 6010]))                          )
                        (reparse-symbol indented_block_body) [5994 6093])
                    ("_dedent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6110 6114]))                          )
                        (reparse-symbol indented_block_body) [6098 6267])
                    ("_Section" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [6370 6396])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6409 6429])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6442 6464])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6477 6492]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6318 6322])
                                    ("formatter" variable nil (reparse-symbol function_parameters) [6324 6333])
                                    ("parent" variable nil (reparse-symbol function_parameters) [6335 6341])
                                    ("heading" variable nil (reparse-symbol function_parameters) [6343 6350]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [6305 6493])
                            ("format_help" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6518 6522]))                                  )
                                (reparse-symbol indented_block_body) [6502 7480]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [6272 7480])
                    ("_add_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7499 7503])
                            ("func" variable nil (reparse-symbol function_parameters) [7505 7509])
                            ("args" variable nil (reparse-symbol function_parameters) [7511 7515]))                          )
                        (reparse-symbol indented_block_body) [7485 7575])
                    ("start_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7691 7695])
                            ("heading" variable nil (reparse-symbol function_parameters) [7697 7704]))                          )
                        (reparse-symbol indented_block_body) [7673 7888])
                    ("end_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7909 7913]))                          )
                        (reparse-symbol indented_block_body) [7893 8000])
                    ("add_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8018 8022])
                            ("text" variable nil (reparse-symbol function_parameters) [8024 8028]))                          )
                        (reparse-symbol indented_block_body) [8005 8139])
                    ("add_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8158 8162])
                            ("usage" variable nil (reparse-symbol function_parameters) [8164 8169])
                            ("actions" variable nil (reparse-symbol function_parameters) [8171 8178])
                            ("groups" variable nil (reparse-symbol function_parameters) [8180 8186])
                            ("prefix" variable nil (reparse-symbol function_parameters) [8188 8194]))                          )
                        (reparse-symbol indented_block_body) [8144 8339])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8361 8365])
                            ("action" variable nil (reparse-symbol function_parameters) [8367 8373]))                          )
                        (reparse-symbol indented_block_body) [8344 9098])
                    ("add_arguments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9121 9125])
                            ("actions" variable nil (reparse-symbol function_parameters) [9127 9134]))                          )
                        (reparse-symbol indented_block_body) [9103 9206])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9317 9321]))                          )
                        (reparse-symbol indented_block_body) [9301 9514])
                    ("_join_parts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9535 9539])
                            ("part_strings" variable nil (reparse-symbol function_parameters) [9541 9553]))                          )
                        (reparse-symbol indented_block_body) [9519 9693])
                    ("_format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9716 9720])
                            ("usage" variable nil (reparse-symbol function_parameters) [9722 9727])
                            ("actions" variable nil (reparse-symbol function_parameters) [9729 9736])
                            ("groups" variable nil (reparse-symbol function_parameters) [9738 9744])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9746 9752]))                          )
                        (reparse-symbol indented_block_body) [9698 13531])
                    ("_format_actions_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13562 13566])
                            ("actions" variable nil (reparse-symbol function_parameters) [13568 13575])
                            ("groups" variable nil (reparse-symbol function_parameters) [13577 13583]))                          )
                        (reparse-symbol indented_block_body) [13536 17186])
                    ("_format_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17208 17212])
                            ("text" variable nil (reparse-symbol function_parameters) [17214 17218]))                          )
                        (reparse-symbol indented_block_body) [17191 17465])
                    ("_format_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17489 17493])
                            ("action" variable nil (reparse-symbol function_parameters) [17495 17501]))                          )
                        (reparse-symbol indented_block_body) [17470 19393])
                    ("_format_action_invocation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19428 19432])
                            ("action" variable nil (reparse-symbol function_parameters) [19434 19440]))                          )
                        (reparse-symbol indented_block_body) [19398 20189])
                    ("_metavar_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20217 20221])
                            ("action" variable nil (reparse-symbol function_parameters) [20223 20229])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20231 20246]))                          )
                        (reparse-symbol indented_block_body) [20194 20729])
                    ("_format_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20751 20755])
                            ("action" variable nil (reparse-symbol function_parameters) [20757 20763])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20765 20780]))                          )
                        (reparse-symbol indented_block_body) [20734 21517])
                    ("_expand_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21539 21543])
                            ("action" variable nil (reparse-symbol function_parameters) [21545 21551]))                          )
                        (reparse-symbol indented_block_body) [21522 22069])
                    ("_iter_indented_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22104 22108])
                            ("action" variable nil (reparse-symbol function_parameters) [22110 22116]))                          )
                        (reparse-symbol indented_block_body) [22074 22379])
                    ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22401 22405])
                            ("text" variable nil (reparse-symbol function_parameters) [22407 22411])
                            ("width" variable nil (reparse-symbol function_parameters) [22413 22418]))                          )
                        (reparse-symbol indented_block_body) [22384 22527])
                    ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22547 22551])
                            ("text" variable nil (reparse-symbol function_parameters) [22553 22557])
                            ("width" variable nil (reparse-symbol function_parameters) [22559 22564])
                            ("indent" variable nil (reparse-symbol function_parameters) [22566 22572]))                          )
                        (reparse-symbol indented_block_body) [22532 22773])
                    ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22799 22803])
                            ("action" variable nil (reparse-symbol function_parameters) [22805 22811]))                          )
                        (reparse-symbol indented_block_body) [22778 22841]))                  
                :type "class")
                nil [4769 22841])
            ("RawDescriptionHelpFormatter" type
               (:documentation "Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23141 23145])
                            ("text" variable nil (reparse-symbol function_parameters) [23147 23151])
                            ("width" variable nil (reparse-symbol function_parameters) [23153 23158])
                            ("indent" variable nil (reparse-symbol function_parameters) [23160 23166]))                          )
                        (reparse-symbol indented_block_body) [23126 23243]))                  
                :type "class")
                nil [22843 23243])
            ("RawTextHelpFormatter" type
               (:documentation "Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("RawDescriptionHelpFormatter")
                :members 
                  ( ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23549 23553])
                            ("text" variable nil (reparse-symbol function_parameters) [23555 23559])
                            ("width" variable nil (reparse-symbol function_parameters) [23561 23566]))                          )
                        (reparse-symbol indented_block_body) [23532 23602]))                  
                :type "class")
                nil [23245 23602])
            ("ArgumentDefaultsHelpFormatter" type
               (:documentation "Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23908 23912])
                            ("action" variable nil (reparse-symbol function_parameters) [23914 23920]))                          )
                        (reparse-symbol indented_block_body) [23887 24253]))                  
                :type "class")
                nil [23604 24253])
            ("_get_action_name" function (:arguments 
              ( ("argument" variable nil (reparse-symbol function_parameters) [24349 24357]))              ) nil [24328 24679])
            ("ArgumentError" type
               (:documentation "An error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24972 25019])
                            ("self" variable nil (reparse-symbol indented_block_body) [25028 25050]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24938 24942])
                            ("argument" variable nil (reparse-symbol function_parameters) [24944 24952])
                            ("message" variable nil (reparse-symbol function_parameters) [24954 24961]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24925 25051])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25068 25072]))                          )
                        (reparse-symbol indented_block_body) [25056 25340]))                  
                :type "class")
                nil [24681 25340])
            ("ArgumentTypeError" type
               (:documentation "An error from trying to convert a command line string to a type."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [25457 25461]))                  
                :type "class")
                nil [25342 25462])
            ("Action" type
               (:documentation "Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- The type which the command-line arguments should be converted
            to, should be one of 'string', 'int', 'float', 'complex' or a
            callable object that accepts a single string argument. If None,
            'string' is assumed.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [28292 28328])
                            ("self" variable nil (reparse-symbol indented_block_body) [28337 28353])
                            ("self" variable nil (reparse-symbol indented_block_body) [28362 28380])
                            ("self" variable nil (reparse-symbol indented_block_body) [28389 28407])
                            ("self" variable nil (reparse-symbol indented_block_body) [28416 28438])
                            ("self" variable nil (reparse-symbol indented_block_body) [28447 28463])
                            ("self" variable nil (reparse-symbol indented_block_body) [28472 28494])
                            ("self" variable nil (reparse-symbol indented_block_body) [28503 28527])
                            ("self" variable nil (reparse-symbol indented_block_body) [28536 28552])
                            ("self" variable nil (reparse-symbol indented_block_body) [28561 28583]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27981 27985])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [28004 28018])
                            ("dest" variable nil (reparse-symbol function_parameters) [28037 28041])
                            ("nargs" variable nil (reparse-symbol function_parameters) [28060 28065])
                            ("const" variable nil (reparse-symbol function_parameters) [28089 28094])
                            ("default" variable nil (reparse-symbol function_parameters) [28118 28125])
                            ("type" variable nil (reparse-symbol function_parameters) [28149 28153])
                            ("choices" variable nil (reparse-symbol function_parameters) [28177 28184])
                            ("required" variable nil (reparse-symbol function_parameters) [28208 28216])
                            ("help" variable nil (reparse-symbol function_parameters) [28241 28245])
                            ("metavar" variable nil (reparse-symbol function_parameters) [28269 28276]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27968 28584])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28605 28609]))                          )
                        (reparse-symbol indented_block_body) [28589 28904])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28922 28926])
                            ("parser" variable nil (reparse-symbol function_parameters) [28928 28934])
                            ("namespace" variable nil (reparse-symbol function_parameters) [28936 28945])
                            ("values" variable nil (reparse-symbol function_parameters) [28947 28953])
                            ("option_string" variable nil (reparse-symbol function_parameters) [28955 28968]))                          )
                        (reparse-symbol indented_block_body) [28909 29040]))                  
                :type "class")
                nil [25516 29040])
            ("_StoreAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29399 29643])
                            ("if" code nil (reparse-symbol indented_block_body) [29651 29771])
                            ("super" code nil (reparse-symbol indented_block_body) [29779 30094]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29088 29092])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [29111 29125])
                            ("dest" variable nil (reparse-symbol function_parameters) [29144 29148])
                            ("nargs" variable nil (reparse-symbol function_parameters) [29167 29172])
                            ("const" variable nil (reparse-symbol function_parameters) [29196 29201])
                            ("default" variable nil (reparse-symbol function_parameters) [29225 29232])
                            ("type" variable nil (reparse-symbol function_parameters) [29256 29260])
                            ("choices" variable nil (reparse-symbol function_parameters) [29284 29291])
                            ("required" variable nil (reparse-symbol function_parameters) [29315 29323])
                            ("help" variable nil (reparse-symbol function_parameters) [29348 29352])
                            ("metavar" variable nil (reparse-symbol function_parameters) [29376 29383]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29075 30095])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30113 30117])
                            ("parser" variable nil (reparse-symbol function_parameters) [30119 30125])
                            ("namespace" variable nil (reparse-symbol function_parameters) [30127 30136])
                            ("values" variable nil (reparse-symbol function_parameters) [30138 30144])
                            ("option_string" variable nil (reparse-symbol function_parameters) [30146 30159]))                          )
                        (reparse-symbol indented_block_body) [30100 30213]))                  
                :type "class")
                nil [29042 30213])
            ("_StoreConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [30484 30719]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30266 30270])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [30289 30303])
                            ("dest" variable nil (reparse-symbol function_parameters) [30322 30326])
                            ("const" variable nil (reparse-symbol function_parameters) [30345 30350])
                            ("default" variable nil (reparse-symbol function_parameters) [30369 30376])
                            ("required" variable nil (reparse-symbol function_parameters) [30400 30408])
                            ("help" variable nil (reparse-symbol function_parameters) [30433 30437])
                            ("metavar" variable nil (reparse-symbol function_parameters) [30461 30468]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30253 30720])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30738 30742])
                            ("parser" variable nil (reparse-symbol function_parameters) [30744 30750])
                            ("namespace" variable nil (reparse-symbol function_parameters) [30752 30761])
                            ("values" variable nil (reparse-symbol function_parameters) [30763 30769])
                            ("option_string" variable nil (reparse-symbol function_parameters) [30771 30784]))                          )
                        (reparse-symbol indented_block_body) [30725 30842]))                  
                :type "class")
                nil [30215 30842])
            ("_StoreTrueAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31069 31281]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30905 30909])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [30928 30942])
                            ("dest" variable nil (reparse-symbol function_parameters) [30961 30965])
                            ("default" variable nil (reparse-symbol function_parameters) [30984 30991])
                            ("required" variable nil (reparse-symbol function_parameters) [31016 31024])
                            ("help" variable nil (reparse-symbol function_parameters) [31049 31053]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30892 31282]))                  
                :type "class")
                nil [30844 31282])
            ("_StoreFalseAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31509 31723]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31346 31350])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31369 31383])
                            ("dest" variable nil (reparse-symbol function_parameters) [31402 31406])
                            ("default" variable nil (reparse-symbol function_parameters) [31425 31432])
                            ("required" variable nil (reparse-symbol function_parameters) [31456 31464])
                            ("help" variable nil (reparse-symbol function_parameters) [31489 31493]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31333 31724]))                  
                :type "class")
                nil [31284 31724])
            ("_AppendAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [32084 32335])
                            ("if" code nil (reparse-symbol indented_block_body) [32343 32463])
                            ("super" code nil (reparse-symbol indented_block_body) [32471 32787]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31773 31777])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31796 31810])
                            ("dest" variable nil (reparse-symbol function_parameters) [31829 31833])
                            ("nargs" variable nil (reparse-symbol function_parameters) [31852 31857])
                            ("const" variable nil (reparse-symbol function_parameters) [31881 31886])
                            ("default" variable nil (reparse-symbol function_parameters) [31910 31917])
                            ("type" variable nil (reparse-symbol function_parameters) [31941 31945])
                            ("choices" variable nil (reparse-symbol function_parameters) [31969 31976])
                            ("required" variable nil (reparse-symbol function_parameters) [32000 32008])
                            ("help" variable nil (reparse-symbol function_parameters) [32033 32037])
                            ("metavar" variable nil (reparse-symbol function_parameters) [32061 32068]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31760 32788])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32806 32810])
                            ("parser" variable nil (reparse-symbol function_parameters) [32812 32818])
                            ("namespace" variable nil (reparse-symbol function_parameters) [32820 32829])
                            ("values" variable nil (reparse-symbol function_parameters) [32831 32837])
                            ("option_string" variable nil (reparse-symbol function_parameters) [32839 32852]))                          )
                        (reparse-symbol indented_block_body) [32793 33002]))                  
                :type "class")
                nil [31726 33002])
            ("_AppendConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33274 33539]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33056 33060])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [33079 33093])
                            ("dest" variable nil (reparse-symbol function_parameters) [33112 33116])
                            ("const" variable nil (reparse-symbol function_parameters) [33135 33140])
                            ("default" variable nil (reparse-symbol function_parameters) [33159 33166])
                            ("required" variable nil (reparse-symbol function_parameters) [33190 33198])
                            ("help" variable nil (reparse-symbol function_parameters) [33223 33227])
                            ("metavar" variable nil (reparse-symbol function_parameters) [33251 33258]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33043 33540])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33558 33562])
                            ("parser" variable nil (reparse-symbol function_parameters) [33564 33570])
                            ("namespace" variable nil (reparse-symbol function_parameters) [33572 33581])
                            ("values" variable nil (reparse-symbol function_parameters) [33583 33589])
                            ("option_string" variable nil (reparse-symbol function_parameters) [33591 33604]))                          )
                        (reparse-symbol indented_block_body) [33545 33758]))                  
                :type "class")
                nil [33004 33758])
            ("_CountAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33969 34174]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33806 33810])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [33829 33843])
                            ("dest" variable nil (reparse-symbol function_parameters) [33862 33866])
                            ("default" variable nil (reparse-symbol function_parameters) [33885 33892])
                            ("required" variable nil (reparse-symbol function_parameters) [33916 33924])
                            ("help" variable nil (reparse-symbol function_parameters) [33949 33953]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33793 34175])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34193 34197])
                            ("parser" variable nil (reparse-symbol function_parameters) [34199 34205])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34207 34216])
                            ("values" variable nil (reparse-symbol function_parameters) [34218 34224])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34226 34239]))                          )
                        (reparse-symbol indented_block_body) [34180 34359]))                  
                :type "class")
                nil [33760 34359])
            ("_HelpAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34549 34722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34406 34410])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34429 34443])
                            ("dest" variable nil (reparse-symbol function_parameters) [34462 34466])
                            ("default" variable nil (reparse-symbol function_parameters) [34494 34501])
                            ("help" variable nil (reparse-symbol function_parameters) [34529 34533]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34393 34723])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34741 34745])
                            ("parser" variable nil (reparse-symbol function_parameters) [34747 34753])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34755 34764])
                            ("values" variable nil (reparse-symbol function_parameters) [34766 34772])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34774 34787]))                          )
                        (reparse-symbol indented_block_body) [34728 34845]))                  
                :type "class")
                nil [34361 34845])
            ("_VersionAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [35105 35281])
                            ("self" variable nil (reparse-symbol indented_block_body) [35290 35312]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34895 34899])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34918 34932])
                            ("version" variable nil (reparse-symbol function_parameters) [34951 34958])
                            ("dest" variable nil (reparse-symbol function_parameters) [34982 34986])
                            ("default" variable nil (reparse-symbol function_parameters) [35014 35021])
                            ("help" variable nil (reparse-symbol function_parameters) [35049 35053]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34882 35313])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35331 35335])
                            ("parser" variable nil (reparse-symbol function_parameters) [35337 35343])
                            ("namespace" variable nil (reparse-symbol function_parameters) [35345 35354])
                            ("values" variable nil (reparse-symbol function_parameters) [35356 35362])
                            ("option_string" variable nil (reparse-symbol function_parameters) [35364 35377]))                          )
                        (reparse-symbol indented_block_body) [35318 35614]))                  
                :type "class")
                nil [34847 35614])
            ("_SubParsersAction" type
               (:superclasses ("Action")
                :members 
                  ( ("_ChoicesPseudoAction" type
                       (:superclasses ("Action")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("sup" variable nil (reparse-symbol indented_block_body) [35743 35800])
                                    ("sup" code nil (reparse-symbol indented_block_body) [35813 35866]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [35712 35716])
                                    ("name" variable nil (reparse-symbol function_parameters) [35718 35722])
                                    ("help" variable nil (reparse-symbol function_parameters) [35724 35728]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [35699 35867]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [35654 35867])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36079 36103])
                            ("self" variable nil (reparse-symbol indented_block_body) [36112 36145])
                            ("self" variable nil (reparse-symbol indented_block_body) [36154 36204])
                            ("self" variable nil (reparse-symbol indented_block_body) [36213 36239])
                            ("super" code nil (reparse-symbol indented_block_body) [36249 36476]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35885 35889])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [35908 35922])
                            ("prog" variable nil (reparse-symbol function_parameters) [35941 35945])
                            ("parser_class" variable nil (reparse-symbol function_parameters) [35964 35976])
                            ("dest" variable nil (reparse-symbol function_parameters) [35995 35999])
                            ("help" variable nil (reparse-symbol function_parameters) [36027 36031])
                            ("metavar" variable nil (reparse-symbol function_parameters) [36055 36062]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35872 36477])
                    ("add_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36497 36501])
                            ("name" variable nil (reparse-symbol function_parameters) [36503 36507])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36509 36517]))                          )
                        (reparse-symbol indented_block_body) [36482 37079])
                    ("_get_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37104 37108]))                          )
                        (reparse-symbol indented_block_body) [37084 37148])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37166 37170])
                            ("parser" variable nil (reparse-symbol function_parameters) [37172 37178])
                            ("namespace" variable nil (reparse-symbol function_parameters) [37180 37189])
                            ("values" variable nil (reparse-symbol function_parameters) [37191 37197])
                            ("option_string" variable nil (reparse-symbol function_parameters) [37199 37212]))                          )
                        (reparse-symbol indented_block_body) [37153 38151]))                  
                :type "class")
                nil [35616 38151])
            ("FileType" type
               (:documentation "Factory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38733 38750])
                            ("self" variable nil (reparse-symbol indented_block_body) [38759 38782]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38696 38700])
                            ("mode" variable nil (reparse-symbol function_parameters) [38702 38706])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [38712 38719]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38683 38783])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38801 38805])
                            ("string" variable nil (reparse-symbol function_parameters) [38807 38813]))                          )
                        (reparse-symbol indented_block_body) [38788 39421])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39439 39443]))                          )
                        (reparse-symbol indented_block_body) [39426 39614]))                  
                :type "class")
                nil [38203 39614])
            ("Namespace" type
               (:documentation "Simple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("for" code nil (reparse-symbol indented_block_body) [39946 40012]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39921 39925])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39927 39935]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39908 40012])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [40017 40032])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40049 40053])
                            ("other" variable nil (reparse-symbol function_parameters) [40055 40060]))                          )
                        (reparse-symbol indented_block_body) [40038 40104])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40120 40124])
                            ("other" variable nil (reparse-symbol function_parameters) [40126 40131]))                          )
                        (reparse-symbol indented_block_body) [40109 40169])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40191 40195])
                            ("key" variable nil (reparse-symbol function_parameters) [40197 40200]))                          )
                        (reparse-symbol indented_block_body) [40174 40239]))                  
                :type "class")
                nil [39710 40239])
            ("_ActionsContainer" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [40438 40479])
                            ("self" variable nil (reparse-symbol indented_block_body) [40489 40519])
                            ("self" variable nil (reparse-symbol indented_block_body) [40528 40568])
                            ("self" variable nil (reparse-symbol indented_block_body) [40577 40609])
                            ("self" variable nil (reparse-symbol indented_block_body) [40618 40658])
                            ("self" variable nil (reparse-symbol indented_block_body) [40696 40717])
                            ("self" code nil (reparse-symbol indented_block_body) [40754 40797])
                            ("self" code nil (reparse-symbol indented_block_body) [40806 40852])
                            ("self" code nil (reparse-symbol indented_block_body) [40861 40918])
                            ("self" code nil (reparse-symbol indented_block_body) [40927 40982])
                            ("self" code nil (reparse-symbol indented_block_body) [40991 41048])
                            ("self" code nil (reparse-symbol indented_block_body) [41057 41105])
                            ("self" code nil (reparse-symbol indented_block_body) [41114 41173])
                            ("self" code nil (reparse-symbol indented_block_body) [41182 41228])
                            ("self" code nil (reparse-symbol indented_block_body) [41237 41281])
                            ("self" code nil (reparse-symbol indented_block_body) [41290 41340])
                            ("self" code nil (reparse-symbol indented_block_body) [41349 41402])
                            ("self" code nil (reparse-symbol indented_block_body) [41476 41495])
                            ("self" variable nil (reparse-symbol indented_block_body) [41530 41548])
                            ("self" variable nil (reparse-symbol indented_block_body) [41557 41589])
                            ("self" variable nil (reparse-symbol indented_block_body) [41616 41640])
                            ("self" variable nil (reparse-symbol indented_block_body) [41649 41685])
                            ("self" variable nil (reparse-symbol indented_block_body) [41722 41741])
                            ("self" variable nil (reparse-symbol indented_block_body) [41821 41887])
                            ("self" variable nil (reparse-symbol indented_block_body) [42034 42074]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40292 40296])
                            ("description" variable nil (reparse-symbol function_parameters) [40315 40326])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [40345 40357])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [40376 40392])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [40411 40427]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40279 42075])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42174 42178])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [42180 42193])
                            ("value" variable nil (reparse-symbol function_parameters) [42195 42200])
                            ("object" variable nil (reparse-symbol function_parameters) [42202 42208]))                          )
                        (reparse-symbol indented_block_body) [42161 42310])
                    ("_registry_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42333 42337])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [42339 42352])
                            ("value" variable nil (reparse-symbol function_parameters) [42354 42359])
                            ("default" variable nil (reparse-symbol function_parameters) [42361 42368]))                          )
                        (reparse-symbol indented_block_body) [42315 42443])
                    ("set_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42588 42592])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42594 42602]))                          )
                        (reparse-symbol indented_block_body) [42571 42900])
                    ("get_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42921 42925])
                            ("dest" variable nil (reparse-symbol function_parameters) [42927 42931]))                          )
                        (reparse-symbol indented_block_body) [42905 43122])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43235 43239])
                            ("args" variable nil (reparse-symbol function_parameters) [43241 43246])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43248 43256]))                          
                        :documentation "
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        ")
                        (reparse-symbol indented_block_body) [43218 45179])
                    ("add_argument_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45207 45211])
                            ("args" variable nil (reparse-symbol function_parameters) [45213 45218])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45220 45228]))                          )
                        (reparse-symbol indented_block_body) [45184 45348])
                    ("add_mutually_exclusive_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45386 45390])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45392 45400]))                          )
                        (reparse-symbol indented_block_body) [45353 45534])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45555 45559])
                            ("action" variable nil (reparse-symbol function_parameters) [45561 45567]))                          )
                        (reparse-symbol indented_block_body) [45539 46292])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46316 46320])
                            ("action" variable nil (reparse-symbol function_parameters) [46322 46328]))                          )
                        (reparse-symbol indented_block_body) [46297 46368])
                    ("_add_container_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46400 46404])
                            ("container" variable nil (reparse-symbol function_parameters) [46406 46415]))                          )
                        (reparse-symbol indented_block_body) [46373 48098])
                    ("_get_positional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48130 48134])
                            ("dest" variable nil (reparse-symbol function_parameters) [48136 48140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48142 48150]))                          )
                        (reparse-symbol indented_block_body) [48103 48769])
                    ("_get_optional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48799 48803])
                            ("args" variable nil (reparse-symbol function_parameters) [48805 48810])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48812 48820]))                          )
                        (reparse-symbol indented_block_body) [48774 50335])
                    ("_pop_action_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50362 50366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50368 50374])
                            ("default" variable nil (reparse-symbol function_parameters) [50376 50383]))                          )
                        (reparse-symbol indented_block_body) [50340 50498])
                    ("_get_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50520 50524]))                          )
                        (reparse-symbol indented_block_body) [50503 50874])
                    ("_check_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50899 50903])
                            ("action" variable nil (reparse-symbol function_parameters) [50905 50911]))                          )
                        (reparse-symbol indented_block_body) [50879 51429])
                    ("_handle_conflict_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51461 51465])
                            ("action" variable nil (reparse-symbol function_parameters) [51467 51473])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [51475 51494]))                          )
                        (reparse-symbol indented_block_body) [51434 51792])
                    ("_handle_conflict_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51826 51830])
                            ("action" variable nil (reparse-symbol function_parameters) [51832 51838])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [51840 51859]))                          )
                        (reparse-symbol indented_block_body) [51797 52335]))                  
                :type "class")
                nil [40241 52335])
            ("_ArgumentGroup" type
               (:superclasses ("_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("update" variable nil (reparse-symbol indented_block_body) [52532 52558])
                            ("update" code nil (reparse-symbol indented_block_body) [52567 52621])
                            ("update" code nil (reparse-symbol indented_block_body) [52630 52676])
                            ("update" code nil (reparse-symbol indented_block_body) [52685 52739])
                            ("super_init" variable nil (reparse-symbol indented_block_body) [52748 52797])
                            ("super_init" code nil (reparse-symbol indented_block_body) [52806 52851])
                            ("self" variable nil (reparse-symbol indented_block_body) [52888 52906])
                            ("self" variable nil (reparse-symbol indented_block_body) [52915 52939])
                            ("self" variable nil (reparse-symbol indented_block_body) [53000 53040])
                            ("self" variable nil (reparse-symbol indented_block_body) [53049 53083])
                            ("self" variable nil (reparse-symbol indented_block_body) [53092 53154])
                            ("self" variable nil (reparse-symbol indented_block_body) [53163 53199])
                            ("self" variable nil (reparse-symbol indented_block_body) [53208 53300])
                            ("self" variable nil (reparse-symbol indented_block_body) [53309 53379]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52396 52400])
                            ("container" variable nil (reparse-symbol function_parameters) [52402 52411])
                            ("title" variable nil (reparse-symbol function_parameters) [52413 52418])
                            ("description" variable nil (reparse-symbol function_parameters) [52425 52436])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52443 52451]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52383 53380])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53401 53405])
                            ("action" variable nil (reparse-symbol function_parameters) [53407 53413]))                          )
                        (reparse-symbol indented_block_body) [53385 53546])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53570 53574])
                            ("action" variable nil (reparse-symbol function_parameters) [53576 53582]))                          )
                        (reparse-symbol indented_block_body) [53551 53687]))                  
                :type "class")
                nil [52337 53687])
            ("_MutuallyExclusiveGroup" type
               (:superclasses ("_ArgumentGroup")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [53796 53852])
                            ("self" variable nil (reparse-symbol indented_block_body) [53861 53885])
                            ("self" variable nil (reparse-symbol indented_block_body) [53894 53921]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53754 53758])
                            ("container" variable nil (reparse-symbol function_parameters) [53760 53769])
                            ("required" variable nil (reparse-symbol function_parameters) [53771 53779]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53741 53922])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53943 53947])
                            ("action" variable nil (reparse-symbol function_parameters) [53949 53955]))                          )
                        (reparse-symbol indented_block_body) [53927 54207])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54231 54235])
                            ("action" variable nil (reparse-symbol function_parameters) [54237 54243]))                          )
                        (reparse-symbol indented_block_body) [54212 54336]))                  
                :type "class")
                nil [53689 54336])
            ("ArgumentParser" type
               (:documentation "Object for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
    "
                :superclasses ("_AttributeHolder" "_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [55732 56054])
                            ("superinit" variable nil (reparse-symbol indented_block_body) [56063 56111])
                            ("superinit" code nil (reparse-symbol indented_block_body) [56120 56305])
                            ("if" code nil (reparse-symbol indented_block_body) [56350 56418])
                            ("self" variable nil (reparse-symbol indented_block_body) [56427 56443])
                            ("self" variable nil (reparse-symbol indented_block_body) [56452 56470])
                            ("self" variable nil (reparse-symbol indented_block_body) [56479 56499])
                            ("self" variable nil (reparse-symbol indented_block_body) [56508 56530])
                            ("self" variable nil (reparse-symbol indented_block_body) [56539 56577])
                            ("self" variable nil (reparse-symbol indented_block_body) [56586 56636])
                            ("self" variable nil (reparse-symbol indented_block_body) [56645 56669])
                            ("add_group" variable nil (reparse-symbol indented_block_body) [56679 56714])
                            ("self" variable nil (reparse-symbol indented_block_body) [56723 56779])
                            ("self" variable nil (reparse-symbol indented_block_body) [56788 56840])
                            ("self" variable nil (reparse-symbol indented_block_body) [56849 56872])
                            ("identity" function (:arguments 
                              ( ("string" variable nil (reparse-symbol function_parameters) [56920 56926]))                              ) (reparse-symbol indented_block_body) [56907 56955])
                            ("self" code nil (reparse-symbol indented_block_body) [56963 57000])
                            ("prefix_chars" code nil (reparse-symbol indented_block_body) [57184 57199])
                            ("if" code nil (reparse-symbol indented_block_body) [57208 57426])
                            ("if" code nil (reparse-symbol indented_block_body) [57434 57702])
                            ("for" code nil (reparse-symbol indented_block_body) [57755 58009]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55291 55295])
                            ("prog" variable nil (reparse-symbol function_parameters) [55314 55318])
                            ("usage" variable nil (reparse-symbol function_parameters) [55342 55347])
                            ("description" variable nil (reparse-symbol function_parameters) [55371 55382])
                            ("epilog" variable nil (reparse-symbol function_parameters) [55406 55412])
                            ("version" variable nil (reparse-symbol function_parameters) [55436 55443])
                            ("parents" variable nil (reparse-symbol function_parameters) [55467 55474])
                            ("formatter_class" variable nil (reparse-symbol function_parameters) [55496 55511])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [55544 55556])
                            ("fromfile_prefix_chars" variable nil (reparse-symbol function_parameters) [55579 55600])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [55624 55640])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [55664 55680])
                            ("add_help" variable nil (reparse-symbol function_parameters) [55707 55715]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55278 58009])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58120 58124]))                          )
                        (reparse-symbol indented_block_body) [58104 58396])
                    ("add_subparsers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58543 58547])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58549 58557]))                          )
                        (reparse-symbol indented_block_body) [58524 59872])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59893 59897])
                            ("action" variable nil (reparse-symbol function_parameters) [59899 59905]))                          )
                        (reparse-symbol indented_block_body) [59877 60076])
                    ("_get_optional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60107 60111]))                          )
                        (reparse-symbol indented_block_body) [60081 60223])
                    ("_get_positional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60256 60260]))                          )
                        (reparse-symbol indented_block_body) [60228 60376])
                    ("parse_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60528 60532])
                            ("args" variable nil (reparse-symbol function_parameters) [60534 60538])
                            ("namespace" variable nil (reparse-symbol function_parameters) [60545 60554]))                          )
                        (reparse-symbol indented_block_body) [60513 60754])
                    ("parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60780 60784])
                            ("args" variable nil (reparse-symbol function_parameters) [60786 60790])
                            ("namespace" variable nil (reparse-symbol function_parameters) [60797 60806]))                          )
                        (reparse-symbol indented_block_body) [60759 62209])
                    ("_parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62236 62240])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [62242 62253])
                            ("namespace" variable nil (reparse-symbol function_parameters) [62255 62264]))                          )
                        (reparse-symbol indented_block_body) [62214 73019])
                    ("_read_args_from_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73050 73054])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [73056 73067]))                          )
                        (reparse-symbol indented_block_body) [73024 74210])
                    ("convert_arg_line_to_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74244 74248])
                            ("arg_line" variable nil (reparse-symbol function_parameters) [74250 74258]))                          )
                        (reparse-symbol indented_block_body) [74215 74287])
                    ("_match_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74312 74316])
                            ("action" variable nil (reparse-symbol function_parameters) [74318 74324])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [74326 74345]))                          )
                        (reparse-symbol indented_block_body) [74292 75095])
                    ("_match_arguments_partial" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75129 75133])
                            ("actions" variable nil (reparse-symbol function_parameters) [75135 75142])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [75144 75163]))                          )
                        (reparse-symbol indented_block_body) [75100 75769])
                    ("_parse_optional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75794 75798])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [75800 75810]))                          )
                        (reparse-symbol indented_block_body) [75774 78190])
                    ("_get_option_tuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78218 78222])
                            ("option_string" variable nil (reparse-symbol function_parameters) [78224 78237]))                          )
                        (reparse-symbol indented_block_body) [78195 80114])
                    ("_get_nargs_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80142 80146])
                            ("action" variable nil (reparse-symbol function_parameters) [80148 80154]))                          )
                        (reparse-symbol indented_block_body) [80119 81438])
                    ("_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81552 81556])
                            ("action" variable nil (reparse-symbol function_parameters) [81558 81564])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [81566 81577]))                          )
                        (reparse-symbol indented_block_body) [81536 83540])
                    ("_get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83560 83564])
                            ("action" variable nil (reparse-symbol function_parameters) [83566 83572])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [83574 83584]))                          )
                        (reparse-symbol indented_block_body) [83545 84482])
                    ("_check_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84504 84508])
                            ("action" variable nil (reparse-symbol function_parameters) [84510 84516])
                            ("value" variable nil (reparse-symbol function_parameters) [84518 84523]))                          )
                        (reparse-symbol indented_block_body) [84487 84837])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84949 84953]))                          )
                        (reparse-symbol indented_block_body) [84932 85153])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85174 85178]))                          )
                        (reparse-symbol indented_block_body) [85158 85886])
                    ("format_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85910 85914]))                          )
                        (reparse-symbol indented_block_body) [85891 86256])
                    ("_get_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86280 86284]))                          )
                        (reparse-symbol indented_block_body) [86261 86339])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86444 86448])
                            ("file" variable nil (reparse-symbol function_parameters) [86450 86454]))                          )
                        (reparse-symbol indented_block_body) [86428 86573])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86593 86597])
                            ("file" variable nil (reparse-symbol function_parameters) [86599 86603]))                          )
                        (reparse-symbol indented_block_body) [86578 86721])
                    ("print_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86744 86748])
                            ("file" variable nil (reparse-symbol function_parameters) [86750 86754]))                          )
                        (reparse-symbol indented_block_body) [86726 87035])
                    ("_print_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87059 87063])
                            ("message" variable nil (reparse-symbol function_parameters) [87065 87072])
                            ("file" variable nil (reparse-symbol function_parameters) [87074 87078]))                          )
                        (reparse-symbol indented_block_body) [87040 87202])
                    ("exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87282 87286])
                            ("status" variable nil (reparse-symbol function_parameters) [87288 87294])
                            ("message" variable nil (reparse-symbol function_parameters) [87298 87305]))                          )
                        (reparse-symbol indented_block_body) [87273 87413])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87428 87432])
                            ("message" variable nil (reparse-symbol function_parameters) [87434 87441]))                          
                        :documentation "error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        ")
                        (reparse-symbol indented_block_body) [87418 87803]))                  
                :type "class")
                nil [54338 87803]))          
      :file "argparse.py"
      :pointmax 87803
      :fsize 87802
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax '((NAME 57135 . 57149) (IF 57156 . 57158) (ELSE 57179 . 57183) (INDENT_BLOCK 39315 . 39421) (NEWLINE 39314 . 39315) (COLON 39313 . 39314) (TRY 39222 . 39225) (AS 39309 . 39311)))
    (semanticdb-table "copy.py"
      :file "copy.py"
      :fsize 11519
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "textwrap.py"
      :file "textwrap.py"
      :fsize 16848
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "gettext.py"
      :file "gettext.py"
      :fsize 19859
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "subprocess.py"
      :major-mode 'python-mode
      :tags nil
      :file "subprocess.py"
      :pointmax 54426
      :fsize 54425
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "zipfile.py"
      :file "zipfile.py"
      :fsize 54020
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "csv.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
csv.py - read/write/investigate CSV files
\"\"\"" code nil nil [2 51])
            ("re" include nil nil [53 62])
            ("functools" include nil nil [63 91])
            ("_csv" include nil nil [92 368])
            ("_csv" include nil nil [369 405])
            ("try" code nil nil [407 501])
            ("__all__" variable nil nil [502 847])
            ("Dialect" type
               (:documentation "Describe an Excel dialect.

    This must be subclassed (see csv.excel).  Valid attributes are:
    delimiter, quotechar, escapechar, doublequote, skipinitialspace,
    lineterminator, quoting.

    "
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [1078 1088])
                    ("_valid" variable nil (reparse-symbol indented_block_body) [1093 1107])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [1131 1147])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [1152 1168])
                    ("escapechar" variable nil (reparse-symbol indented_block_body) [1173 1190])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [1195 1213])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [1218 1241])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [1246 1267])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [1272 1286])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1320 1381])
                            ("self" code nil (reparse-symbol indented_block_body) [1389 1405]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1305 1309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1292 1406])
                    ("_validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1425 1429]))                          )
                        (reparse-symbol indented_block_body) [1411 1587]))                  
                :type "class")
                nil [849 1587])
            ("excel" type
               (:documentation "Describe the usual properties of Excel-generated CSV files."
                :superclasses ("Dialect")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [1684 1699])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [1704 1719])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [1724 1742])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [1747 1771])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [1776 1799])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [1804 1827]))                  
                :type "class")
                nil [1588 1828])
            ("register_dialect" code nil nil [1828 1860])
            ("excel_tab" type
               (:documentation "Describe the usual properties of Excel-generated TAB-delimited files."
                :superclasses ("excel")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [1970 1986]))                  
                :type "class")
                nil [1862 1987])
            ("register_dialect" code nil nil [1987 2027])
            ("DictReader" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2177 2206])
                            ("self" variable nil (reparse-symbol indented_block_body) [2245 2267])
                            ("self" variable nil (reparse-symbol indented_block_body) [2310 2332])
                            ("self" variable nil (reparse-symbol indented_block_body) [2381 2428])
                            ("self" variable nil (reparse-symbol indented_block_body) [2437 2459])
                            ("self" variable nil (reparse-symbol indented_block_body) [2468 2485]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2065 2069])
                            ("f" variable nil (reparse-symbol function_parameters) [2071 2072])
                            ("fieldnames" variable nil (reparse-symbol function_parameters) [2074 2084])
                            ("restkey" variable nil (reparse-symbol function_parameters) [2091 2098])
                            ("restval" variable nil (reparse-symbol function_parameters) [2105 2112])
                            ("dialect" variable nil (reparse-symbol function_parameters) [2136 2143])
                            ("args" variable nil (reparse-symbol function_parameters) [2153 2158])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2160 2166]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2052 2486])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2504 2508]))                          )
                        (reparse-symbol indented_block_body) [2491 2531])
                    ("fieldnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2565 2569]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2536 2812])
                    ("fieldnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2855 2859])
                            ("value" variable nil (reparse-symbol function_parameters) [2861 2866]))                          
                        :decorators 
                          ( ("fieldnames.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2817 2902])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2916 2920]))                          )
                        (reparse-symbol indented_block_body) [2907 3602]))                  
                :type "class")
                nil [2030 3602])
            ("DictWriter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3752 3780])
                            ("self" variable nil (reparse-symbol indented_block_body) [3820 3842])
                            ("if" code nil (reparse-symbol indented_block_body) [3886 4072])
                            ("self" variable nil (reparse-symbol indented_block_body) [4080 4112])
                            ("self" variable nil (reparse-symbol indented_block_body) [4121 4168]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3639 3643])
                            ("f" variable nil (reparse-symbol function_parameters) [3645 3646])
                            ("fieldnames" variable nil (reparse-symbol function_parameters) [3648 3658])
                            ("restval" variable nil (reparse-symbol function_parameters) [3660 3667])
                            ("extrasaction" variable nil (reparse-symbol function_parameters) [3672 3684])
                            ("dialect" variable nil (reparse-symbol function_parameters) [3711 3718])
                            ("args" variable nil (reparse-symbol function_parameters) [3728 3733])
                            ("kwds" variable nil (reparse-symbol function_parameters) [3735 3741]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3626 4169])
                    ("writeheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4190 4194]))                          )
                        (reparse-symbol indented_block_body) [4174 4288])
                    ("_dict_to_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4311 4315])
                            ("rowdict" variable nil (reparse-symbol function_parameters) [4317 4324]))                          )
                        (reparse-symbol indented_block_body) [4293 4684])
                    ("writerow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4702 4706])
                            ("rowdict" variable nil (reparse-symbol function_parameters) [4708 4715]))                          )
                        (reparse-symbol indented_block_body) [4689 4783])
                    ("writerows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4802 4806])
                            ("rowdicts" variable nil (reparse-symbol function_parameters) [4808 4816]))                          )
                        (reparse-symbol indented_block_body) [4788 4966]))                  
                :type "class")
                nil [3604 4966])
            ("try" code nil nil [5037 5092])
            ("Sniffer" type
               (:members 
                  ( ("'''
    \"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)
    Returns a Dialect object.
    '''" code nil (reparse-symbol indented_block_body) [5112 5219])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5312 5355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5237 5241]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5224 5356])
                    ("sniff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5372 5376])
                            ("sample" variable nil (reparse-symbol function_parameters) [5378 5384])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [5386 5396]))                          
                        :documentation "
        Returns a dialect (or None) corresponding to the sample
        ")
                        (reparse-symbol indented_block_body) [5362 6306])
                    ("_guess_quote_and_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6343 6347])
                            ("data" variable nil (reparse-symbol function_parameters) [6349 6353])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [6355 6365]))                          
                        :documentation "
        Looks for text enclosed between two identical quotes
        (the probable quotechar) which are preceded and followed
        by the same character (the probable delimiter).
        For example:
                         ,'some text',
        The quote with the most wins, same with the delimiter.
        If there is no quotechar the delimiter can't be determined
        this way.
        ")
                        (reparse-symbol indented_block_body) [6312 9296])
                    ("_guess_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9323 9327])
                            ("data" variable nil (reparse-symbol function_parameters) [9329 9333])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [9335 9345]))                          
                        :documentation "
        The delimiter /should/ occur the same number of times on
        each row. However, due to malformed data, it may not. We don't want
        an all or nothing approach, so we allow for small variations in this
        number.
          1) build a table of the frequency of each character on every line.
          2) build a table of frequencies of this frequency (meta-frequency?),
             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,
             7 times in 2 rows'
          3) use the mode of the meta-frequency to determine the /expected/
             frequency for that character
          4) find out how often the character actually meets that goal
          5) the character that best meets its goal is the delimiter
        For performance reasons, the data is evaluated in chunks, so it can
        try and evaluate the smallest portion of the data possible, evaluating
        additional chunks as necessary.
        ")
                        (reparse-symbol indented_block_body) [9302 13684])
                    ("has_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13705 13709])
                            ("sample" variable nil (reparse-symbol function_parameters) [13711 13717]))                          )
                        (reparse-symbol indented_block_body) [13690 16345]))                  
                :type "class")
                nil [5093 16345]))          
      :file "csv.py"
      :pointmax 16345
      :fsize 16344
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "optparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A powerful, extensible, and easy-to-use option parser.

By Greg Ward <gward@python.net>

Originally distributed as Optik.

For support, use the optik-users@lists.sourceforge.net mailing list
(http://lists.sourceforge.net/lists/listinfo/optik-users).

Simple usage example:

   from optparse import OptionParser

   parser = OptionParser()
   parser.add_option(\"-f\", \"--file\", dest=\"filename\",
                     help=\"write report to FILE\", metavar=\"FILE\")
   parser.add_option(\"-q\", \"--quiet\",
                     action=\"store_false\", dest=\"verbose\", default=True,
                     help=\"don't print status messages to stdout\")

   (options, args) = parser.parse_args()
\"\"\"" code nil nil [1 686])
            ("__version__" variable nil nil [688 709])
            ("__all__" variable nil nil [711 1164])
            ("__copyright__" variable nil nil [1166 2758])
            ("os" include nil nil [2760 2774])
            ("sys" include nil nil [2760 2774])
            ("types" include nil nil [2775 2787])
            ("textwrap" include nil nil [2788 2803])
            ("_repr" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [2815 2819]))                  )
                nil [2805 2896])
            ("try" code nil nil [3130 3236])
            ("_" variable nil nil [3236 3247])
            ("OptParseError" type
               (:superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3320 3334]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3300 3304])
                            ("msg" variable nil (reparse-symbol function_parameters) [3306 3309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3287 3335])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3352 3356]))                          )
                        (reparse-symbol indented_block_body) [3340 3383]))                  
                :type "class")
                nil [3250 3383])
            ("OptionError" type
               (:documentation "
    Raised if an Option instance is created with invalid or
    inconsistent arguments.
    "
                :superclasses ("OptParseError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3570 3584])
                            ("self" variable nil (reparse-symbol indented_block_body) [3593 3621]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3542 3546])
                            ("msg" variable nil (reparse-symbol function_parameters) [3548 3551])
                            ("option" variable nil (reparse-symbol function_parameters) [3553 3559]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3529 3622])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3639 3643]))                          )
                        (reparse-symbol indented_block_body) [3627 3779]))                  
                :type "class")
                nil [3385 3779])
            ("OptionConflictError" type
               (:documentation "
    Raised if conflicting options are added to an OptionParser.
    "
                :superclasses ("OptionError")
                :type "class")
                nil [3780 3901])
            ("OptionValueError" type
               (:documentation "
    Raised if an invalid option value is encountered on the command
    line.
    "
                :superclasses ("OptParseError")
                :type "class")
                nil [3902 4036])
            ("BadOptionError" type
               (:documentation "
    Raised if an invalid option is seen on the command line.
    "
                :superclasses ("OptParseError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4193 4215]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4169 4173])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [4175 4182]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4156 4216])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4233 4237]))                          )
                        (reparse-symbol indented_block_body) [4221 4294]))                  
                :type "class")
                nil [4037 4294])
            ("AmbiguousOptionError" type
               (:documentation "
    Raised if an ambiguous option is seen on the command line.
    "
                :superclasses ("BadOptionError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("BadOptionError" code nil (reparse-symbol indented_block_body) [4475 4513])
                            ("self" variable nil (reparse-symbol indented_block_body) [4522 4556]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4436 4440])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [4442 4449])
                            ("possibilities" variable nil (reparse-symbol function_parameters) [4451 4464]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4423 4557])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4574 4578]))                          )
                        (reparse-symbol indented_block_body) [4562 4694]))                  
                :type "class")
                nil [4295 4694])
            ("HelpFormatter" type
               (:documentation "
    Abstract base class for formatting option help.  OptionParser
    instances should use one of the HelpFormatter subclasses for
    formatting help; by default IndentedHelpFormatter is used.

    Instance attributes:
      parser : OptionParser
        the controlling OptionParser instance
      indent_increment : int
        the number of columns to indent per nesting level
      max_help_position : int
        the maximum starting column for option help text
      help_position : int
        the calculated starting column for option help text;
        initially the same as the maximum
      width : int
        total number of columns for output (pass None to constructor for
        this value to be taken from the $COLUMNS environment variable)
      level : int
        current indentation level
      current_indent : int
        current indentation level (in columns)
      help_width : int
        number of columns available for option help text (calculated)
      default_tag : str
        text to replace with each option's default value, \"%default\"
        by default.  Set to false value to disable default value expansion.
      option_strings : { Option : str }
        maps Option instances to the snippet of help text explaining
        the syntax of that option, e.g. \"-h, --help\" or
        \"-fFILE, --file=FILE\"
      _short_opt_fmt : str
        format string controlling how short options with values are
        printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or
        \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that
        Optik supports.
      _long_opt_fmt : str
        similar but for long options; must be either \"%s %s\" (\"--file FILE\")
        or \"%s=%s\" (\"--file=FILE\").
    "
                :members 
                  ( ("NO_DEFAULT_VALUE" variable nil (reparse-symbol indented_block_body) [6475 6500])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6659 6677])
                            ("self" variable nil (reparse-symbol indented_block_body) [6686 6726])
                            ("self" variable nil (reparse-symbol indented_block_body) [6735 6798])
                            ("if" code nil (reparse-symbol indented_block_body) [6807 6986])
                            ("self" variable nil (reparse-symbol indented_block_body) [6994 7012])
                            ("self" variable nil (reparse-symbol indented_block_body) [7021 7044])
                            ("self" variable nil (reparse-symbol indented_block_body) [7053 7067])
                            ("self" variable nil (reparse-symbol indented_block_body) [7076 7098])
                            ("self" variable nil (reparse-symbol indented_block_body) [7133 7163])
                            ("self" variable nil (reparse-symbol indented_block_body) [7172 7201])
                            ("self" variable nil (reparse-symbol indented_block_body) [7210 7234])
                            ("self" variable nil (reparse-symbol indented_block_body) [7243 7272])
                            ("self" variable nil (reparse-symbol indented_block_body) [7281 7309]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6519 6523])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [6542 6558])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [6577 6594])
                            ("width" variable nil (reparse-symbol function_parameters) [6613 6618])
                            ("short_first" variable nil (reparse-symbol function_parameters) [6637 6648]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6506 7310])
                    ("set_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7330 7334])
                            ("parser" variable nil (reparse-symbol function_parameters) [7336 7342]))                          )
                        (reparse-symbol indented_block_body) [7315 7374])
                    ("set_short_opt_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7407 7411])
                            ("delim" variable nil (reparse-symbol function_parameters) [7413 7418]))                          )
                        (reparse-symbol indented_block_body) [7379 7611])
                    ("set_long_opt_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7643 7647])
                            ("delim" variable nil (reparse-symbol function_parameters) [7649 7654]))                          )
                        (reparse-symbol indented_block_body) [7616 7846])
                    ("indent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7862 7866]))                          )
                        (reparse-symbol indented_block_body) [7851 7946])
                    ("dedent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7962 7966]))                          )
                        (reparse-symbol indented_block_body) [7951 8115])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8137 8141])
                            ("usage" variable nil (reparse-symbol function_parameters) [8143 8148]))                          )
                        (reparse-symbol indented_block_body) [8120 8214])
                    ("format_heading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8238 8242])
                            ("heading" variable nil (reparse-symbol function_parameters) [8244 8251]))                          )
                        (reparse-symbol indented_block_body) [8219 8317])
                    ("_format_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8339 8343])
                            ("text" variable nil (reparse-symbol function_parameters) [8345 8349]))                          
                        :documentation "
        Format a paragraph of free-form text for inclusion in the
        help output at the current indentation level.
        ")
                        (reparse-symbol indented_block_body) [8322 8774])
                    ("format_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8802 8806])
                            ("description" variable nil (reparse-symbol function_parameters) [8808 8819]))                          )
                        (reparse-symbol indented_block_body) [8779 8939])
                    ("format_epilog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8962 8966])
                            ("epilog" variable nil (reparse-symbol function_parameters) [8968 8974]))                          )
                        (reparse-symbol indented_block_body) [8944 9091])
                    ("expand_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9116 9120])
                            ("option" variable nil (reparse-symbol function_parameters) [9122 9128]))                          )
                        (reparse-symbol indented_block_body) [9097 9470])
                    ("format_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9493 9497])
                            ("option" variable nil (reparse-symbol function_parameters) [9499 9505]))                          )
                        (reparse-symbol indented_block_body) [9475 11085])
                    ("store_option_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11115 11119])
                            ("parser" variable nil (reparse-symbol function_parameters) [11121 11127]))                          )
                        (reparse-symbol indented_block_body) [11090 11846])
                    ("format_option_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11877 11881])
                            ("option" variable nil (reparse-symbol function_parameters) [11883 11889]))                          
                        :documentation "Return a comma-separated list of option strings & metavariables.")
                        (reparse-symbol indented_block_body) [11851 12564]))                  
                :type "class")
                nil [4696 12564])
            ("IndentedHelpFormatter" type
               (:documentation "Format help with indented section bodies.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HelpFormatter" code nil (reparse-symbol indented_block_body) [12837 12935]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12685 12689])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [12708 12724])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [12745 12762])
                            ("width" variable nil (reparse-symbol function_parameters) [12784 12789])
                            ("short_first" variable nil (reparse-symbol function_parameters) [12813 12824]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12672 12936])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12958 12962])
                            ("usage" variable nil (reparse-symbol function_parameters) [12964 12969]))                          )
                        (reparse-symbol indented_block_body) [12941 13012])
                    ("format_heading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13036 13040])
                            ("heading" variable nil (reparse-symbol function_parameters) [13042 13049]))                          )
                        (reparse-symbol indented_block_body) [13017 13115]))                  
                :type "class")
                nil [12565 13115])
            ("TitledHelpFormatter" type
               (:documentation "Format help with underlined section headers.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HelpFormatter" code nil (reparse-symbol indented_block_body) [13390 13489]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13238 13242])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [13261 13277])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [13298 13315])
                            ("width" variable nil (reparse-symbol function_parameters) [13337 13342])
                            ("short_first" variable nil (reparse-symbol function_parameters) [13366 13377]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13225 13490])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13512 13516])
                            ("usage" variable nil (reparse-symbol function_parameters) [13518 13523]))                          )
                        (reparse-symbol indented_block_body) [13495 13595])
                    ("format_heading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13619 13623])
                            ("heading" variable nil (reparse-symbol function_parameters) [13625 13632]))                          )
                        (reparse-symbol indented_block_body) [13600 13706]))                  
                :type "class")
                nil [13117 13706])
            ("_parse_num" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [13723 13726])
                ("type" variable nil (reparse-symbol function_parameters) [13728 13732]))              ) nil [13708 14108])
            ("_parse_int" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [14124 14127]))              ) nil [14109 14162])
            ("_parse_long" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [14179 14182]))              ) nil [14163 14218])
            ("_builtin_cvt" variable nil nil [14219 14443])
            ("check_builtin" function (:arguments 
              ( ("option" variable nil (reparse-symbol function_parameters) [14463 14469])
                ("opt" variable nil (reparse-symbol function_parameters) [14471 14474])
                ("value" variable nil (reparse-symbol function_parameters) [14476 14481]))              ) nil [14445 14689])
            ("check_choice" function (:arguments 
              ( ("option" variable nil (reparse-symbol function_parameters) [14707 14713])
                ("opt" variable nil (reparse-symbol function_parameters) [14715 14718])
                ("value" variable nil (reparse-symbol function_parameters) [14720 14725]))              ) nil [14690 14979])
            ("NO_DEFAULT" variable nil nil [15090 15120])
            ("Option" type
               (:documentation "
    Instance attributes:
      _short_opts : [string]
      _long_opts : [string]

      action : string
      type : string
      dest : string
      default : any
      nargs : int
      const : any
      choices : [string]
      callback : function
      callback_args : (any*)
      callback_kwargs : { string : any }
      help : string
      metavar : string
    "
                :members 
                  ( ("ATTRS" variable nil (reparse-symbol indented_block_body) [15624 15908])
                    ("ACTIONS" variable nil (reparse-symbol indented_block_body) [16043 16307])
                    ("STORE_ACTIONS" variable nil (reparse-symbol indented_block_body) [16507 16737])
                    ("TYPED_ACTIONS" variable nil (reparse-symbol indented_block_body) [16880 16969])
                    ("ALWAYS_TYPED_ACTIONS" variable nil (reparse-symbol indented_block_body) [17095 17165])
                    ("CONST_ACTIONS" variable nil (reparse-symbol indented_block_body) [17228 17296])
                    ("TYPES" variable nil (reparse-symbol indented_block_body) [17414 17477])
                    ("TYPE_CHECKER" variable nil (reparse-symbol indented_block_body) [18187 18437])
                    ("CHECK_METHODS" variable nil (reparse-symbol indented_block_body) [18958 18978])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [19236 19257])
                            ("self" variable nil (reparse-symbol indented_block_body) [19266 19286])
                            ("opts" variable nil (reparse-symbol indented_block_body) [19295 19331])
                            ("self" code nil (reparse-symbol indented_block_body) [19340 19367])
                            ("self" code nil (reparse-symbol indented_block_body) [19446 19468])
                            ("for" code nil (reparse-symbol indented_block_body) [19831 19892]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19072 19076])
                            ("opts" variable nil (reparse-symbol function_parameters) [19078 19083])
                            ("attrs" variable nil (reparse-symbol function_parameters) [19085 19092]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19059 19892])
                    ("_check_opt_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19920 19924])
                            ("opts" variable nil (reparse-symbol function_parameters) [19926 19930]))                          )
                        (reparse-symbol indented_block_body) [19897 20242])
                    ("_set_opt_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20268 20272])
                            ("opts" variable nil (reparse-symbol function_parameters) [20274 20278]))                          )
                        (reparse-symbol indented_block_body) [20247 21157])
                    ("_set_attrs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21177 21181])
                            ("attrs" variable nil (reparse-symbol function_parameters) [21183 21188]))                          )
                        (reparse-symbol indented_block_body) [21162 21707])
                    ("_check_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21805 21809]))                          )
                        (reparse-symbol indented_block_body) [21787 21996])
                    ("_check_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22017 22021]))                          )
                        (reparse-symbol indented_block_body) [22001 23377])
                    ("_check_choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23400 23404]))                          )
                        (reparse-symbol indented_block_body) [23382 23985])
                    ("_check_dest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24006 24010]))                          )
                        (reparse-symbol indented_block_body) [23990 24656])
                    ("_check_const" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24678 24682]))                          )
                        (reparse-symbol indented_block_body) [24661 24891])
                    ("_check_nargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24913 24917]))                          )
                        (reparse-symbol indented_block_body) [24896 25198])
                    ("_check_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25223 25227]))                          )
                        (reparse-symbol indented_block_body) [25203 26506])
                    ("CHECK_METHODS" variable nil (reparse-symbol indented_block_body) [26512 26755])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26848 26852]))                          )
                        (reparse-symbol indented_block_body) [26836 26915])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [26920 26936])
                    ("takes_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26958 26962]))                          )
                        (reparse-symbol indented_block_body) [26942 27002])
                    ("get_opt_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27026 27030]))                          )
                        (reparse-symbol indented_block_body) [27007 27152])
                    ("check_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27248 27252])
                            ("opt" variable nil (reparse-symbol function_parameters) [27254 27257])
                            ("value" variable nil (reparse-symbol function_parameters) [27259 27264]))                          )
                        (reparse-symbol indented_block_body) [27232 27430])
                    ("convert_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27453 27457])
                            ("opt" variable nil (reparse-symbol function_parameters) [27459 27462])
                            ("value" variable nil (reparse-symbol function_parameters) [27464 27469]))                          )
                        (reparse-symbol indented_block_body) [27435 27676])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27693 27697])
                            ("opt" variable nil (reparse-symbol function_parameters) [27699 27702])
                            ("value" variable nil (reparse-symbol function_parameters) [27704 27709])
                            ("values" variable nil (reparse-symbol function_parameters) [27711 27717])
                            ("parser" variable nil (reparse-symbol function_parameters) [27719 27725]))                          )
                        (reparse-symbol indented_block_body) [27681 28134])
                    ("take_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28155 28159])
                            ("action" variable nil (reparse-symbol function_parameters) [28161 28167])
                            ("dest" variable nil (reparse-symbol function_parameters) [28169 28173])
                            ("opt" variable nil (reparse-symbol function_parameters) [28175 28178])
                            ("value" variable nil (reparse-symbol function_parameters) [28180 28185])
                            ("values" variable nil (reparse-symbol function_parameters) [28187 28193])
                            ("parser" variable nil (reparse-symbol function_parameters) [28195 28201]))                          )
                        (reparse-symbol indented_block_body) [28139 29280]))                  
                :type "class")
                nil [15123 29280])
            ("SUPPRESS_HELP" code nil nil [29298 29331])
            ("SUPPRESS_USAGE" code nil nil [29332 29367])
            ("try" code nil nil [29369 29572])
            ("Values" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29635 29738]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29605 29609])
                            ("defaults" variable nil (reparse-symbol function_parameters) [29611 29619]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29592 29738])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29755 29759]))                          )
                        (reparse-symbol indented_block_body) [29743 29796])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [29801 29817])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29835 29839])
                            ("other" variable nil (reparse-symbol function_parameters) [29841 29846]))                          )
                        (reparse-symbol indented_block_body) [29823 30070])
                    ("_update_careful" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30095 30099])
                            ("dict" variable nil (reparse-symbol function_parameters) [30101 30105]))                          
                        :documentation "
        Update the option values from an arbitrary dictionary, but only
        use keys from dict that already have a corresponding attribute
        in self.  Any keys in dict without a corresponding attribute
        are silently ignored.
        ")
                        (reparse-symbol indented_block_body) [30075 30551])
                    ("_update_loose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30574 30578])
                            ("dict" variable nil (reparse-symbol function_parameters) [30580 30584]))                          
                        :documentation "
        Update the option values from an arbitrary dictionary,
        using all keys from the dictionary regardless of whether
        they have a corresponding attribute in self or not.
        ")
                        (reparse-symbol indented_block_body) [30556 30834])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30851 30855])
                            ("dict" variable nil (reparse-symbol function_parameters) [30857 30861])
                            ("mode" variable nil (reparse-symbol function_parameters) [30863 30867]))                          )
                        (reparse-symbol indented_block_body) [30839 31083])
                    ("read_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31104 31108])
                            ("modname" variable nil (reparse-symbol function_parameters) [31110 31117])
                            ("mode" variable nil (reparse-symbol function_parameters) [31119 31123]))                          )
                        (reparse-symbol indented_block_body) [31088 31237])
                    ("read_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31256 31260])
                            ("filename" variable nil (reparse-symbol function_parameters) [31262 31270])
                            ("mode" variable nil (reparse-symbol function_parameters) [31272 31276]))                          )
                        (reparse-symbol indented_block_body) [31242 31373])
                    ("ensure_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31395 31399])
                            ("attr" variable nil (reparse-symbol function_parameters) [31401 31405])
                            ("value" variable nil (reparse-symbol function_parameters) [31407 31412]))                          )
                        (reparse-symbol indented_block_body) [31378 31556]))                  
                :type "class")
                nil [29573 31556])
            ("OptionContainer" type
               (:documentation "
    Abstract base class.

    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      option_list : [Option]
        the list of Option objects contained by this OptionContainer
      _short_opt : { string : Option }
        dictionary mapping short option strings, eg. \"-f\" or \"-X\",
        to the Option instances that implement them.  If an Option
        has multiple short option strings, it will appears in this
        dictionary multiple times. [1]
      _long_opt : { string : Option }
        dictionary mapping long option strings, eg. \"--file\" or
        \"--exclude\", to the Option instances that implement them.
        Again, a given Option can occur multiple times in this
        dictionary. [1]
      defaults : { string : any }
        dictionary mapping option destination names to default
        values for each destination [1]

    [1] These mappings are common to (shared by) all components of the
        controlling OptionParser, where they are initially created.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [33095 33121])
                            ("self" variable nil (reparse-symbol indented_block_body) [33131 33163])
                            ("self" code nil (reparse-symbol indented_block_body) [33172 33215])
                            ("self" code nil (reparse-symbol indented_block_body) [33224 33257]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32782 32786])
                            ("option_class" variable nil (reparse-symbol function_parameters) [32788 32800])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [32802 32818])
                            ("description" variable nil (reparse-symbol function_parameters) [32820 32831]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32769 33258])
                    ("_create_option_mappings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33291 33295]))                          )
                        (reparse-symbol indented_block_body) [33263 33686])
                    ("_share_option_mappings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33719 33723])
                            ("parser" variable nil (reparse-symbol function_parameters) [33725 33731]))                          )
                        (reparse-symbol indented_block_body) [33692 33995])
                    ("set_conflict_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34025 34029])
                            ("handler" variable nil (reparse-symbol function_parameters) [34031 34038]))                          )
                        (reparse-symbol indented_block_body) [34000 34208])
                    ("set_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34233 34237])
                            ("description" variable nil (reparse-symbol function_parameters) [34239 34250]))                          )
                        (reparse-symbol indented_block_body) [34213 34292])
                    ("get_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34317 34321]))                          )
                        (reparse-symbol indented_block_body) [34297 34356])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34374 34378]))                          
                        :documentation "see OptionParser.destroy().")
                        (reparse-symbol indented_block_body) [34362 34504])
                    ("_check_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34604 34608])
                            ("option" variable nil (reparse-symbol function_parameters) [34610 34616]))                          )
                        (reparse-symbol indented_block_body) [34584 35749])
                    ("add_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35769 35773])
                            ("args" variable nil (reparse-symbol function_parameters) [35775 35780])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35782 35790]))                          
                        :documentation "add_option(Option)
           add_option(opt_str, ..., kwarg=val, ...)
        ")
                        (reparse-symbol indented_block_body) [35754 36828])
                    ("add_options" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36849 36853])
                            ("option_list" variable nil (reparse-symbol function_parameters) [36855 36866]))                          )
                        (reparse-symbol indented_block_body) [36833 36940])
                    ("get_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37034 37038])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [37040 37047]))                          )
                        (reparse-symbol indented_block_body) [37019 37143])
                    ("has_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37163 37167])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [37169 37176]))                          )
                        (reparse-symbol indented_block_body) [37148 37268])
                    ("remove_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37291 37295])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [37297 37304]))                          )
                        (reparse-symbol indented_block_body) [37273 37719])
                    ("format_option_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37822 37826])
                            ("formatter" variable nil (reparse-symbol function_parameters) [37828 37837]))                          )
                        (reparse-symbol indented_block_body) [37799 38098])
                    ("format_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38126 38130])
                            ("formatter" variable nil (reparse-symbol function_parameters) [38132 38141]))                          )
                        (reparse-symbol indented_block_body) [38103 38212])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38233 38237])
                            ("formatter" variable nil (reparse-symbol function_parameters) [38239 38248]))                          )
                        (reparse-symbol indented_block_body) [38217 38486]))                  
                :type "class")
                nil [31558 38486])
            ("OptionGroup" type
               (:superclasses ("OptionContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38591 38611])
                            ("OptionContainer" code nil (reparse-symbol indented_block_body) [38620 38722])
                            ("self" variable nil (reparse-symbol indented_block_body) [38731 38749]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38543 38547])
                            ("parser" variable nil (reparse-symbol function_parameters) [38549 38555])
                            ("title" variable nil (reparse-symbol function_parameters) [38557 38562])
                            ("description" variable nil (reparse-symbol function_parameters) [38564 38575]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38530 38750])
                    ("_create_option_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38779 38783]))                          )
                        (reparse-symbol indented_block_body) [38755 38865])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38884 38888])
                            ("title" variable nil (reparse-symbol function_parameters) [38890 38895]))                          )
                        (reparse-symbol indented_block_body) [38870 38925])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38942 38946]))                          
                        :documentation "see OptionParser.destroy().")
                        (reparse-symbol indented_block_body) [38930 39058])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39153 39157])
                            ("formatter" variable nil (reparse-symbol function_parameters) [39159 39168]))                          )
                        (reparse-symbol indented_block_body) [39137 39364]))                  
                :type "class")
                nil [38488 39364])
            ("OptionParser" type
               (:documentation "
    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      usage : string
        a usage string for your program.  Before it is displayed
        to the user, \"%prog\" will be expanded to the name of
        your program (self.prog or os.path.basename(sys.argv[0])).
      prog : string
        the name of the current program (to override
        os.path.basename(sys.argv[0])).
      description : string
        A paragraph of text giving a brief overview of your program.
        optparse reformats this paragraph to fit the current terminal
        width and prints it when the user requests help (after usage,
        but before the list of options).
      epilog : string
        paragraph of help text to print after option help

      option_groups : [OptionGroup]
        list of option groups in this parser (option groups are
        irrelevant for parsing the command-line, but very useful
        for generating help)

      allow_interspersed_args : bool = true
        if true, positional arguments may be interspersed with options.
        Assuming -a and -b each take a single argument, the command-line
          -ablah foo bar -bboo baz
        will be interpreted the same as
          -ablah -bboo -- foo bar baz
        If this flag were false, that command line would be interpreted as
          -ablah -- foo bar -bboo baz
        -- ie. we stop processing options as soon as we see the first
        non-option argument.  (This is the tradition followed by
        Python's getopt module, Perl's Getopt::Std, and other argument-
        parsing libraries, but it is generally annoying to users.)

      process_default_values : bool = true
        if true, option default values are processed similarly to option
        values from the command line: that is, they are passed to the
        type-checking function for the option's type (as long as the
        default value is a string).  (This really only matters if you
        have defined custom types; see SF bug #955889.)  Set it to false
        to restore the behaviour of Optik 1.4.1 and earlier.

      rargs : [string]
        the argument list currently being parsed.  Only set when
        parse_args() is active, and continually trimmed down as
        we consume arguments.  Mainly there for the benefit of
        callback options.
      largs : [string]
        the list of leftover arguments that we have skipped while
        parsing options.  If allow_interspersed_args is false, this
        list is always empty.
      values : Values
        the set of option values currently being accumulated.  Only
        set when parse_args() is active.  Also mainly for callbacks.

    Because of the 'rargs', 'largs', and 'values' attributes,
    OptionParser is not thread-safe.  If, for some perverse reason, you
    need to parse command-line arguments simultaneously in different
    threads, use different OptionParser instances.

    "
                :superclasses ("OptionContainer")
                :members 
                  ( ("standard_option_list" variable nil (reparse-symbol indented_block_body) [42529 42554])
                    ("__init__" function
                       (:suite 
                          ( ("OptionContainer" code nil (reparse-symbol indented_block_body) [42929 43017])
                            ("self" code nil (reparse-symbol indented_block_body) [43026 43047])
                            ("self" variable nil (reparse-symbol indented_block_body) [43056 43072])
                            ("self" variable nil (reparse-symbol indented_block_body) [43081 43103])
                            ("self" variable nil (reparse-symbol indented_block_body) [43112 43147])
                            ("self" variable nil (reparse-symbol indented_block_body) [43156 43190])
                            ("if" code nil (reparse-symbol indented_block_body) [43199 43269])
                            ("self" variable nil (reparse-symbol indented_block_body) [43277 43303])
                            ("self" code nil (reparse-symbol indented_block_body) [43312 43343])
                            ("self" variable nil (reparse-symbol indented_block_body) [43352 43372])
                            ("self" code nil (reparse-symbol indented_block_body) [43616 43716])
                            ("self" code nil (reparse-symbol indented_block_body) [43726 43752]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42573 42577])
                            ("usage" variable nil (reparse-symbol function_parameters) [42596 42601])
                            ("option_list" variable nil (reparse-symbol function_parameters) [42625 42636])
                            ("option_class" variable nil (reparse-symbol function_parameters) [42660 42672])
                            ("version" variable nil (reparse-symbol function_parameters) [42698 42705])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [42729 42745])
                            ("description" variable nil (reparse-symbol function_parameters) [42772 42783])
                            ("formatter" variable nil (reparse-symbol function_parameters) [42807 42816])
                            ("add_help_option" variable nil (reparse-symbol function_parameters) [42840 42855])
                            ("prog" variable nil (reparse-symbol function_parameters) [42879 42883])
                            ("epilog" variable nil (reparse-symbol function_parameters) [42907 42913]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42560 43753])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43771 43775]))                          
                        :documentation "
        Declare that you are done with this OptionParser.  This cleans up
        reference cycles so the OptionParser (and all objects referenced by
        it) can be garbage-collected promptly.  After calling destroy(), the
        OptionParser is unusable.
        ")
                        (reparse-symbol indented_block_body) [43759 44385])
                    ("_create_option_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44414 44418]))                          )
                        (reparse-symbol indented_block_body) [44390 44522])
                    ("_add_help_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44548 44552]))                          )
                        (reparse-symbol indented_block_body) [44527 44701])
                    ("_add_version_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44730 44734]))                          )
                        (reparse-symbol indented_block_body) [44706 44890])
                    ("_populate_option_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44921 44925])
                            ("option_list" variable nil (reparse-symbol function_parameters) [44927 44938])
                            ("add_help" variable nil (reparse-symbol function_parameters) [44940 44948]))                          )
                        (reparse-symbol indented_block_body) [44895 45237])
                    ("_init_parsing_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45266 45270]))                          )
                        (reparse-symbol indented_block_body) [45242 45426])
                    ("set_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45520 45524])
                            ("usage" variable nil (reparse-symbol function_parameters) [45526 45531]))                          )
                        (reparse-symbol indented_block_body) [45506 45870])
                    ("enable_interspersed_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45904 45908]))                          
                        :documentation "Set parsing to not stop on the first non-option, allowing
        interspersing switches with command arguments. This is the
        default behavior. See also disable_interspersed_args() and the
        class documentation description of the attribute
        allow_interspersed_args.")
                        (reparse-symbol indented_block_body) [45875 46255])
                    ("disable_interspersed_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46290 46294]))                          
                        :documentation "Set parsing to stop on the first non-option. Use this if
        you have a command processor which runs another command that
        has options of its own and you want to make sure these options
        don't get confused.
        ")
                        (reparse-symbol indented_block_body) [46260 46590])
                    ("set_process_default_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46626 46630])
                            ("process" variable nil (reparse-symbol function_parameters) [46632 46639]))                          )
                        (reparse-symbol indented_block_body) [46595 46688])
                    ("set_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46709 46713])
                            ("dest" variable nil (reparse-symbol function_parameters) [46715 46719])
                            ("value" variable nil (reparse-symbol function_parameters) [46721 46726]))                          )
                        (reparse-symbol indented_block_body) [46693 46765])
                    ("set_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46787 46791])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46793 46801]))                          )
                        (reparse-symbol indented_block_body) [46770 46841])
                    ("_get_all_options" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46867 46871]))                          )
                        (reparse-symbol indented_block_body) [46846 47022])
                    ("get_default_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47050 47054]))                          )
                        (reparse-symbol indented_block_body) [47027 47520])
                    ("add_option_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47621 47625])
                            ("args" variable nil (reparse-symbol function_parameters) [47627 47632])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47634 47642]))                          )
                        (reparse-symbol indented_block_body) [47600 48246])
                    ("get_option_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48272 48276])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [48278 48285]))                          )
                        (reparse-symbol indented_block_body) [48251 48493])
                    ("_get_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48587 48591])
                            ("args" variable nil (reparse-symbol function_parameters) [48593 48597]))                          )
                        (reparse-symbol indented_block_body) [48573 48740])
                    ("parse_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48760 48764])
                            ("args" variable nil (reparse-symbol function_parameters) [48766 48770])
                            ("values" variable nil (reparse-symbol function_parameters) [48777 48783]))                          
                        :documentation "
        parse_args(args : [string] = sys.argv[1:],
                   values : Values = None)
        -> (values : Values, args : [string])

        Parse the command-line options found in 'args' (default:
        sys.argv[1:]).  Any errors result in a call to 'error()', which
        by default prints the usage message to stderr and calls
        sys.exit() with an error message.  On success returns a pair
        (values, args) where 'values' is an Values instance (with all
        your option values) and 'args' is the list of arguments left
        over after parsing options.
        ")
                        (reparse-symbol indented_block_body) [48745 50263])
                    ("check_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50285 50289])
                            ("values" variable nil (reparse-symbol function_parameters) [50291 50297])
                            ("args" variable nil (reparse-symbol function_parameters) [50299 50303]))                          
                        :documentation "
        check_values(values : Values, args : [string])
        -> (values : Values, args : [string])

        Check that the supplied option values and leftover arguments are
        valid.  Returns the option values and leftover arguments
        (possibly adjusted, possibly completely new -- whatever you
        like).  Default implementation just returns the passed-in
        values; subclasses may override as desired.
        ")
                        (reparse-symbol indented_block_body) [50268 50786])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50809 50813])
                            ("largs" variable nil (reparse-symbol function_parameters) [50815 50820])
                            ("rargs" variable nil (reparse-symbol function_parameters) [50822 50827])
                            ("values" variable nil (reparse-symbol function_parameters) [50829 50835]))                          
                        :documentation "_process_args(largs : [string],
                         rargs : [string],
                         values : Values)

        Process command-line arguments and populate 'values', consuming
        options and arguments from 'rargs'.  If 'allow_interspersed_args' is
        false, stop at the first non-option argument.  If true, accumulate any
        interspersed non-option arguments in 'largs'.
        ")
                        (reparse-symbol indented_block_body) [50791 52187])
                    ("_match_long_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53127 53131])
                            ("opt" variable nil (reparse-symbol function_parameters) [53133 53136]))                          
                        :documentation "_match_long_opt(opt : string) -> string

        Determine which long option string 'opt' matches, ie. which one
        it is an unambiguous abbrevation for.  Raises BadOptionError if
        'opt' doesn't unambiguously match any long option string.
        ")
                        (reparse-symbol indented_block_body) [53107 53463])
                    ("_process_long_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53490 53494])
                            ("rargs" variable nil (reparse-symbol function_parameters) [53496 53501])
                            ("values" variable nil (reparse-symbol function_parameters) [53503 53509]))                          )
                        (reparse-symbol indented_block_body) [53468 54626])
                    ("_process_short_opts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54655 54659])
                            ("rargs" variable nil (reparse-symbol function_parameters) [54661 54666])
                            ("values" variable nil (reparse-symbol function_parameters) [54668 54674]))                          )
                        (reparse-symbol indented_block_body) [54631 55982])
                    ("get_prog_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56080 56084]))                          )
                        (reparse-symbol indented_block_body) [56062 56209])
                    ("expand_prog_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56235 56239])
                            ("s" variable nil (reparse-symbol function_parameters) [56241 56242]))                          )
                        (reparse-symbol indented_block_body) [56214 56301])
                    ("get_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56326 56330]))                          )
                        (reparse-symbol indented_block_body) [56306 56388])
                    ("exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56402 56406])
                            ("status" variable nil (reparse-symbol function_parameters) [56408 56414])
                            ("msg" variable nil (reparse-symbol function_parameters) [56418 56421]))                          )
                        (reparse-symbol indented_block_body) [56393 56504])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56519 56523])
                            ("msg" variable nil (reparse-symbol function_parameters) [56525 56528]))                          
                        :documentation "error(msg : string)

        Print a usage message incorporating 'msg' to stderr and exit.
        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        ")
                        (reparse-symbol indented_block_body) [56509 56873])
                    ("get_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56892 56896]))                          )
                        (reparse-symbol indented_block_body) [56878 57057])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57078 57082])
                            ("file" variable nil (reparse-symbol function_parameters) [57084 57088]))                          
                        :documentation "print_usage(file : file = stdout)

        Print the usage message for the current program (self.usage) to
        'file' (default stdout).  Any occurrence of the string \"%prog\" in
        self.usage is replaced with the name of the current program
        (basename of sys.argv[0]).  Does nothing if self.usage is empty
        or not defined.
        ")
                        (reparse-symbol indented_block_body) [57062 57530])
                    ("get_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57551 57555]))                          )
                        (reparse-symbol indented_block_body) [57535 57674])
                    ("print_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57697 57701])
                            ("file" variable nil (reparse-symbol function_parameters) [57703 57707]))                          
                        :documentation "print_version(file : file = stdout)

        Print the version message for this program (self.version) to
        'file' (default stdout).  As with print_usage(), any occurrence
        of \"%prog\" in self.version is replaced by the current program's
        name.  Does nothing if self.version is empty or undefined.
        ")
                        (reparse-symbol indented_block_body) [57679 58125])
                    ("format_option_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58153 58157])
                            ("formatter" variable nil (reparse-symbol function_parameters) [58159 58168]))                          )
                        (reparse-symbol indented_block_body) [58130 58807])
                    ("format_epilog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58830 58834])
                            ("formatter" variable nil (reparse-symbol function_parameters) [58836 58845]))                          )
                        (reparse-symbol indented_block_body) [58812 58900])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58921 58925])
                            ("formatter" variable nil (reparse-symbol function_parameters) [58927 58936]))                          )
                        (reparse-symbol indented_block_body) [58905 59347])
                    ("_get_encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59395 59399])
                            ("file" variable nil (reparse-symbol function_parameters) [59401 59405]))                          )
                        (reparse-symbol indented_block_body) [59377 59556])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59576 59580])
                            ("file" variable nil (reparse-symbol function_parameters) [59582 59586]))                          
                        :documentation "print_help(file : file = stdout)

        Print an extended help message, listing all options and any
        help text provided with them, to 'file' (default stdout).
        ")
                        (reparse-symbol indented_block_body) [59561 59951]))                  
                :type "class")
                nil [39366 59951])
            ("_match_abbrev" function
               (:documentation "_match_abbrev(s : string, wordmap : {string : Option}) -> string

    Return the string key in 'wordmap' for which 's' is an unambiguous
    abbreviation.  If 's' is found to be ambiguous or doesn't match any of
    'words', raise BadOptionError.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [59993 59994])
                    ("wordmap" variable nil (reparse-symbol function_parameters) [59996 60003]))                  )
                nil [59975 60882])
            ("make_option" variable nil nil [61104 61124]))          
      :file "optparse.py"
      :pointmax 61125
      :fsize 61124
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ConfigParser.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Configuration file parser.

A setup file consists of sections, lead by a \"[section]\" header,
and followed by \"name: value\" entries, with continuations and such in
the style of RFC 822.

The option values can contain format strings which refer to other values in
the same section, or values in a special [DEFAULT] section.

For example:

    something: %(dir)s/whatever

would resolve the \"%(dir)s\" to the value of dir.  All reference
expansions are done late, on demand.

Intrinsic defaults can be specified by passing them into the
ConfigParser constructor as a dictionary.

class:

ConfigParser -- responsible for parsing a list of
                configuration files, and managing the parsed database.

    methods:

    __init__(defaults=None)
        create the parser and specify a dictionary of intrinsic defaults.  The
        keys must be strings, the values must be appropriate for %()s string
        interpolation.  Note that `__name__' is always an intrinsic default;
        its value is the section's name.

    sections()
        return all the configuration section names, sans DEFAULT

    has_section(section)
        return whether the given section exists

    has_option(section, option)
        return whether the given option exists in the given section

    options(section)
        return list of configuration options for the named section

    read(filenames)
        read and parse the list of named configuration files, given by
        name.  A single filename is also allowed.  Non-existing files
        are ignored.  Return list of successfully read files.

    readfp(fp, filename=None)
        read and parse one configuration file, given as a file object.
        The filename defaults to fp.name; it is only used in error
        messages (if fp has no `name' attribute, the string `<???>' is used).

    get(section, option, raw=False, vars=None)
        return a string value for the named option.  All % interpolations are
        expanded in the return values, based on the defaults passed into the
        constructor and the DEFAULT section.  Additional substitutions may be
        provided using the `vars' argument, which must be a dictionary whose
        contents override any pre-existing defaults.

    getint(section, options)
        like get(), but convert value to an integer

    getfloat(section, options)
        like get(), but convert value to a float

    getboolean(section, options)
        like get(), but convert value to a boolean (currently case
        insensitively defined as 0, false, no, off for False, and 1, true,
        yes, on for True).  Returns False or True.

    items(section, raw=False, vars=None)
        return a list of tuples with (name, value) for each option
        in the section.

    remove_section(section)
        remove the given file section and all its options

    remove_option(section, option)
        remove the given option from the given section

    set(section, option, value)
        set the given option

    write(fp)
        write the configuration state in .ini format
\"\"\"" code nil nil [1 3087])
            ("try" code nil nil [3089 3260])
            ("re" include nil nil [3261 3270])
            ("__all__" variable nil nil [3272 3616])
            ("DEFAULTSECT" variable nil nil [3618 3641])
            ("MAX_INTERPOLATION_DEPTH" variable nil nil [3643 3671])
            ("Error" type
               (:documentation "Base class for ConfigParser exceptions."
                :superclasses ("Exception")
                :members 
                  ( ("_get_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3791 3795]))                          
                        :documentation "Getter for 'message'; needed only to override deprecation in
        BaseException.")
                        (reparse-symbol indented_block_body) [3774 3926])
                    ("_set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3948 3952])
                            ("value" variable nil (reparse-symbol function_parameters) [3954 3959]))                          
                        :documentation "Setter for 'message'; needed only to override deprecation in
        BaseException.")
                        (reparse-symbol indented_block_body) [3931 4091])
                    ("message" variable nil (reparse-symbol indented_block_body) [4304 4350])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4392 4410])
                            ("Exception" code nil (reparse-symbol indented_block_body) [4419 4448]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4369 4373])
                            ("msg" variable nil (reparse-symbol function_parameters) [4375 4378]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4356 4449])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4467 4471]))                          )
                        (reparse-symbol indented_block_body) [4454 4502])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [4507 4525]))                  
                :type "class")
                nil [3695 4526])
            ("NoSectionError" type
               (:documentation "Raised when no section matches a requested option."
                :superclasses ("Error")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Error" code nil (reparse-symbol indented_block_body) [4659 4710])
                            ("self" variable nil (reparse-symbol indented_block_body) [4719 4741]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4635 4639])
                            ("section" variable nil (reparse-symbol function_parameters) [4641 4648]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4622 4742]))                  
                :type "class")
                nil [4527 4742])
            ("DuplicateSectionError" type
               (:documentation "Raised when a section is multiply-created."
                :superclasses ("Error")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Error" code nil (reparse-symbol indented_block_body) [4874 4933])
                            ("self" variable nil (reparse-symbol indented_block_body) [4942 4964]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4850 4854])
                            ("section" variable nil (reparse-symbol function_parameters) [4856 4863]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4837 4965]))                  
                :type "class")
                nil [4743 4965])
            ("NoOptionError" type
               (:documentation "A requested option was not found."
                :superclasses ("Error")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Error" code nil (reparse-symbol indented_block_body) [5088 5182])
                            ("self" variable nil (reparse-symbol indented_block_body) [5191 5211])
                            ("self" variable nil (reparse-symbol indented_block_body) [5220 5242]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("option" variable nil (reparse-symbol function_parameters) [5062 5068])
                            ("section" variable nil (reparse-symbol function_parameters) [5070 5077]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5043 5243]))                  
                :type "class")
                nil [4966 5243])
            ("InterpolationError" type
               (:documentation "Base class for interpolation-related exceptions."
                :superclasses ("Error")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Error" code nil (reparse-symbol indented_block_body) [5391 5416])
                            ("self" variable nil (reparse-symbol indented_block_body) [5425 5445])
                            ("self" variable nil (reparse-symbol indented_block_body) [5454 5476]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5354 5358])
                            ("option" variable nil (reparse-symbol function_parameters) [5360 5366])
                            ("section" variable nil (reparse-symbol function_parameters) [5368 5375])
                            ("msg" variable nil (reparse-symbol function_parameters) [5377 5380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5341 5477]))                  
                :type "class")
                nil [5244 5477])
            ("InterpolationMissingOptionError" type
               (:documentation "A string substitution required a setting which was not available."
                :superclasses ("InterpolationError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("msg" variable nil (reparse-symbol indented_block_body) [5682 5905])
                            ("InterpolationError" code nil (reparse-symbol indented_block_body) [5914 5969])
                            ("self" variable nil (reparse-symbol indented_block_body) [5978 6004]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5631 5635])
                            ("option" variable nil (reparse-symbol function_parameters) [5637 5643])
                            ("section" variable nil (reparse-symbol function_parameters) [5645 5652])
                            ("rawval" variable nil (reparse-symbol function_parameters) [5654 5660])
                            ("reference" variable nil (reparse-symbol function_parameters) [5662 5671]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5618 6005]))                  
                :type "class")
                nil [5478 6005])
            ("InterpolationSyntaxError" type
               (:documentation "Raised when the source text into which substitutions are made
    does not conform to the required syntax."
                :superclasses ("InterpolationError")
                :type "class")
                nil [6006 6175])
            ("InterpolationDepthError" type
               (:documentation "Raised when substitutions are nested too deeply."
                :superclasses ("InterpolationError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("msg" variable nil (reparse-symbol indented_block_body) [6344 6541])
                            ("InterpolationError" code nil (reparse-symbol indented_block_body) [6550 6605]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6304 6308])
                            ("option" variable nil (reparse-symbol function_parameters) [6310 6316])
                            ("section" variable nil (reparse-symbol function_parameters) [6318 6325])
                            ("rawval" variable nil (reparse-symbol function_parameters) [6327 6333]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6291 6606]))                  
                :type "class")
                nil [6176 6606])
            ("ParsingError" type
               (:documentation "Raised when a configuration file does not follow legal syntax."
                :superclasses ("Error")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Error" code nil (reparse-symbol indented_block_body) [6750 6817])
                            ("self" variable nil (reparse-symbol indented_block_body) [6826 6850])
                            ("self" variable nil (reparse-symbol indented_block_body) [6859 6875]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6725 6729])
                            ("filename" variable nil (reparse-symbol function_parameters) [6731 6739]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6712 6876])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6892 6896])
                            ("lineno" variable nil (reparse-symbol function_parameters) [6898 6904])
                            ("line" variable nil (reparse-symbol function_parameters) [6906 6910]))                          )
                        (reparse-symbol indented_block_body) [6881 7018]))                  
                :type "class")
                nil [6607 7018])
            ("MissingSectionHeaderError" type
               (:documentation "Raised when a key-value pair is found before any section header."
                :superclasses ("ParsingError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Error" code nil (reparse-symbol indented_block_body) [7198 7343])
                            ("self" variable nil (reparse-symbol indented_block_body) [7352 7376])
                            ("self" variable nil (reparse-symbol indented_block_body) [7385 7405])
                            ("self" variable nil (reparse-symbol indented_block_body) [7414 7430]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7159 7163])
                            ("filename" variable nil (reparse-symbol function_parameters) [7165 7173])
                            ("lineno" variable nil (reparse-symbol function_parameters) [7175 7181])
                            ("line" variable nil (reparse-symbol function_parameters) [7183 7187]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7146 7431]))                  
                :type "class")
                nil [7019 7431])
            ("RawConfigParser" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7567 7589])
                            ("self" variable nil (reparse-symbol indented_block_body) [7598 7627])
                            ("self" variable nil (reparse-symbol indented_block_body) [7636 7665])
                            ("if" code nil (reparse-symbol indented_block_body) [7674 7788])
                            ("if" code nil (reparse-symbol indented_block_body) [7796 7919]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7473 7477])
                            ("defaults" variable nil (reparse-symbol function_parameters) [7479 7487])
                            ("dict_type" variable nil (reparse-symbol function_parameters) [7494 7503])
                            ("allow_no_value" variable nil (reparse-symbol function_parameters) [7536 7550]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7460 7919])
                    ("defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7937 7941]))                          )
                        (reparse-symbol indented_block_body) [7924 7974])
                    ("sections" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7992 7996]))                          
                        :documentation "Return a list of section names, excluding [DEFAULT]")
                        (reparse-symbol indented_block_body) [7979 8159])
                    ("add_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8180 8184])
                            ("section" variable nil (reparse-symbol function_parameters) [8186 8193]))                          
                        :documentation "Create a new section in the configuration.

        Raise DuplicateSectionError if a section by the specified name
        already exists. Raise ValueError if name is DEFAULT or any of it's
        case-insensitive variants.
        ")
                        (reparse-symbol indented_block_body) [8164 8687])
                    ("has_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8708 8712])
                            ("section" variable nil (reparse-symbol function_parameters) [8714 8721]))                          
                        :documentation "Indicate whether the named section is present in the configuration.

        The DEFAULT section is not acknowledged.
        ")
                        (reparse-symbol indented_block_body) [8692 8906])
                    ("options" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8923 8927])
                            ("section" variable nil (reparse-symbol function_parameters) [8929 8936]))                          
                        :documentation "Return a list of option names for the given section name.")
                        (reparse-symbol indented_block_body) [8911 9268])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9282 9286])
                            ("filenames" variable nil (reparse-symbol function_parameters) [9288 9297]))                          
                        :documentation "Read and parse a filename or a list of filenames.

        Files that cannot be opened are silently ignored; this is
        designed so that you can specify a list of potential
        configuration file locations (e.g. current directory, user's
        home directory, systemwide directory), and all existing
        configuration files in the list will be read.  A single
        filename may also be given.

        Return list of successfully read files.
        ")
                        (reparse-symbol indented_block_body) [9273 10147])
                    ("readfp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10163 10167])
                            ("fp" variable nil (reparse-symbol function_parameters) [10169 10171])
                            ("filename" variable nil (reparse-symbol function_parameters) [10173 10181]))                          
                        :documentation "Like read() but the argument must be a file-like object.

        The `fp' argument must have a `readline' method.  Optional
        second argument is the `filename', which if not given, is
        taken from fp.name.  If fp has no `name' attribute, `<???>' is
        used.

        ")
                        (reparse-symbol indented_block_body) [10152 10673])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10686 10690])
                            ("section" variable nil (reparse-symbol function_parameters) [10692 10699])
                            ("option" variable nil (reparse-symbol function_parameters) [10701 10707]))                          )
                        (reparse-symbol indented_block_body) [10678 11259])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11274 11278])
                            ("section" variable nil (reparse-symbol function_parameters) [11280 11287]))                          )
                        (reparse-symbol indented_block_body) [11264 11622])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11636 11640])
                            ("section" variable nil (reparse-symbol function_parameters) [11642 11649])
                            ("conv" variable nil (reparse-symbol function_parameters) [11651 11655])
                            ("option" variable nil (reparse-symbol function_parameters) [11657 11663]))                          )
                        (reparse-symbol indented_block_body) [11627 11713])
                    ("getint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11729 11733])
                            ("section" variable nil (reparse-symbol function_parameters) [11735 11742])
                            ("option" variable nil (reparse-symbol function_parameters) [11744 11750]))                          )
                        (reparse-symbol indented_block_body) [11718 11800])
                    ("getfloat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11818 11822])
                            ("section" variable nil (reparse-symbol function_parameters) [11824 11831])
                            ("option" variable nil (reparse-symbol function_parameters) [11833 11839]))                          )
                        (reparse-symbol indented_block_body) [11805 11891])
                    ("_boolean_states" variable nil (reparse-symbol indented_block_body) [11896 12042])
                    ("getboolean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12063 12067])
                            ("section" variable nil (reparse-symbol function_parameters) [12069 12076])
                            ("option" variable nil (reparse-symbol function_parameters) [12078 12084]))                          )
                        (reparse-symbol indented_block_body) [12048 12276])
                    ("optionxform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12297 12301])
                            ("optionstr" variable nil (reparse-symbol function_parameters) [12303 12312]))                          )
                        (reparse-symbol indented_block_body) [12281 12348])
                    ("has_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12368 12372])
                            ("section" variable nil (reparse-symbol function_parameters) [12374 12381])
                            ("option" variable nil (reparse-symbol function_parameters) [12383 12389]))                          
                        :documentation "Check for the existence of a given option in a given section.")
                        (reparse-symbol indented_block_body) [12353 12840])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12853 12857])
                            ("section" variable nil (reparse-symbol function_parameters) [12859 12866])
                            ("option" variable nil (reparse-symbol function_parameters) [12868 12874])
                            ("value" variable nil (reparse-symbol function_parameters) [12876 12881]))                          
                        :documentation "Set an option.")
                        (reparse-symbol indented_block_body) [12845 13214])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13229 13233])
                            ("fp" variable nil (reparse-symbol function_parameters) [13235 13237]))                          
                        :documentation "Write an .ini-format representation of the configuration state.")
                        (reparse-symbol indented_block_body) [13219 13984])
                    ("remove_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14007 14011])
                            ("section" variable nil (reparse-symbol function_parameters) [14013 14020])
                            ("option" variable nil (reparse-symbol function_parameters) [14022 14028]))                          
                        :documentation "Remove an option.")
                        (reparse-symbol indented_block_body) [13989 14463])
                    ("remove_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14487 14491])
                            ("section" variable nil (reparse-symbol function_parameters) [14493 14500]))                          
                        :documentation "Remove a file section.")
                        (reparse-symbol indented_block_body) [14468 14667])
                    ("SECTCRE" variable nil (reparse-symbol indented_block_body) [14751 14947])
                    ("OPTCRE" variable nil (reparse-symbol indented_block_body) [14952 15400])
                    ("OPTCRE_NV" variable nil (reparse-symbol indented_block_body) [15405 15915])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15931 15935])
                            ("fp" variable nil (reparse-symbol function_parameters) [15937 15939])
                            ("fpname" variable nil (reparse-symbol function_parameters) [15941 15947]))                          
                        :documentation "Parse a sectioned setup file.

        The sections in setup file contains a title line at the top,
        indicated by a name in square brackets (`[]'), plus key/value
        options lines, indicated by `name: value' format lines.
        Continuations are represented by an embedded newline then
        leading whitespace.  Blank lines, lines beginning with a '#',
        and just about everything else are ignored.
        ")
                        (reparse-symbol indented_block_body) [15921 20178]))                  
                :type "class")
                nil [7433 20178])
            ("UserDict" include nil nil [20179 20207])
            ("_Chainmap" type
               (:documentation "Combine multiple mappings for successive lookups.

    For example, to emulate Python's normal lookup sequence:

        import __builtin__
        pylookup = _Chainmap(locals(), globals(), vars(__builtin__))
    "
                :superclasses ("_UserDict.DictMixin")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20511 20528]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20489 20493])
                            ("maps" variable nil (reparse-symbol function_parameters) [20495 20500]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20476 20529])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20550 20554])
                            ("key" variable nil (reparse-symbol function_parameters) [20556 20559]))                          )
                        (reparse-symbol indented_block_body) [20534 20728])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20742 20746]))                          )
                        (reparse-symbol indented_block_body) [20733 20987]))                  
                :type "class")
                nil [20209 20987])
            ("ConfigParser" type
               (:superclasses ("RawConfigParser")
                :members 
                  ( ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21038 21042])
                            ("section" variable nil (reparse-symbol function_parameters) [21044 21051])
                            ("option" variable nil (reparse-symbol function_parameters) [21053 21059])
                            ("raw" variable nil (reparse-symbol function_parameters) [21061 21064])
                            ("vars" variable nil (reparse-symbol function_parameters) [21072 21076]))                          
                        :documentation "Get an option value for a given section.

        If `vars' is provided, it must be a dictionary. The option is looked up
        in `vars' (if provided), `section', and in `defaults' in that order.

        All % interpolations are expanded in the return values, unless the
        optional argument `raw' is true. Values for interpolation keys are
        looked up in the same manner as the option.

        The section DEFAULT is special.
        ")
                        (reparse-symbol indented_block_body) [21030 22292])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22307 22311])
                            ("section" variable nil (reparse-symbol function_parameters) [22313 22320])
                            ("raw" variable nil (reparse-symbol function_parameters) [22322 22325])
                            ("vars" variable nil (reparse-symbol function_parameters) [22333 22337]))                          
                        :documentation "Return a list of tuples with (name, value) for each option
        in the section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        ")
                        (reparse-symbol indented_block_body) [22297 23531])
                    ("_interpolate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23553 23557])
                            ("section" variable nil (reparse-symbol function_parameters) [23559 23566])
                            ("option" variable nil (reparse-symbol function_parameters) [23568 23574])
                            ("rawval" variable nil (reparse-symbol function_parameters) [23576 23582])
                            ("vars" variable nil (reparse-symbol function_parameters) [23584 23588]))                          )
                        (reparse-symbol indented_block_body) [23536 24289])
                    ("_KEYCRE" variable nil (reparse-symbol indented_block_body) [24294 24334])
                    ("_interpolation_replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24367 24371])
                            ("match" variable nil (reparse-symbol function_parameters) [24373 24378]))                          )
                        (reparse-symbol indented_block_body) [24340 24528]))                  
                :type "class")
                nil [20988 24528])
            ("SafeConfigParser" type
               (:superclasses ("ConfigParser")
                :members 
                  ( ("_interpolate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24590 24594])
                            ("section" variable nil (reparse-symbol function_parameters) [24596 24603])
                            ("option" variable nil (reparse-symbol function_parameters) [24605 24611])
                            ("rawval" variable nil (reparse-symbol function_parameters) [24613 24619])
                            ("vars" variable nil (reparse-symbol function_parameters) [24621 24625]))                          )
                        (reparse-symbol indented_block_body) [24573 24775])
                    ("_interpvar_re" variable nil (reparse-symbol indented_block_body) [24780 24824])
                    ("_interpolate_some" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24852 24856])
                            ("option" variable nil (reparse-symbol function_parameters) [24858 24864])
                            ("accum" variable nil (reparse-symbol function_parameters) [24866 24871])
                            ("rest" variable nil (reparse-symbol function_parameters) [24873 24877])
                            ("section" variable nil (reparse-symbol function_parameters) [24879 24886])
                            ("map" variable nil (reparse-symbol function_parameters) [24888 24891])
                            ("depth" variable nil (reparse-symbol function_parameters) [24893 24898]))                          )
                        (reparse-symbol indented_block_body) [24830 26322])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26335 26339])
                            ("section" variable nil (reparse-symbol function_parameters) [26341 26348])
                            ("option" variable nil (reparse-symbol function_parameters) [26350 26356])
                            ("value" variable nil (reparse-symbol function_parameters) [26358 26363]))                          
                        :documentation "Set an option.  Extend ConfigParser.set: check for string values.")
                        (reparse-symbol indented_block_body) [26327 27420]))                  
                :type "class")
                nil [24530 27420]))          
      :file "ConfigParser.py"
      :pointmax 27420
      :fsize 27419
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "UserDict.py"
      :file "UserDict.py"
      :fsize 5811
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "getpass.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Utilities to get a password and/or the current user name.

getpass(prompt[, stream]) - Prompt for a password, with echo turned off.
getuser() - Get the user name from the environment or password database.

GetPassWarning - This UserWarning is issued when getpass() cannot prevent
                 echoing of the password contents while reading.

On Windows, the msvcrt module will be used.
On the Mac EasyDialogs.AskPassword is used, if available.

\"\"\"" code nil nil [1 456])
            ("warnings" include nil nil [611 635])
            ("sys" include nil nil [611 635])
            ("os" include nil nil [611 635])
            ("__all__" variable nil nil [637 685])
            ("GetPassWarning" type
               (:superclasses ("UserWarning")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [688 728])
            ("unix_getpass" function
               (:documentation "Prompt for a password, with echo turned off.

    Args:
      prompt: Written on stream to ask for the input.  Default: 'Password: '
      stream: A writable file object to display the prompt.  Defaults to
              the tty.  If no tty is available defaults to sys.stderr.
    Returns:
      The seKr3t input.
    Raises:
      EOFError: If our input tty or stdin was closed.
      GetPassWarning: When we were unable to turn echo off on the input.

    Always restores terminal settings before returning.
    "
                :arguments 
                  ( ("prompt" variable nil (reparse-symbol function_parameters) [747 753])
                    ("stream" variable nil (reparse-symbol function_parameters) [768 774]))                  )
                nil [730 3053])
            ("win_getpass" function
               (:documentation "Prompt for password with echo off, using Windows getch()."
                :arguments 
                  ( ("prompt" variable nil (reparse-symbol function_parameters) [3071 3077])
                    ("stream" variable nil (reparse-symbol function_parameters) [3092 3098]))                  )
                nil [3055 3634])
            ("fallback_getpass" function (:arguments 
              ( ("prompt" variable nil (reparse-symbol function_parameters) [3657 3663])
                ("stream" variable nil (reparse-symbol function_parameters) [3678 3684]))              ) nil [3636 3945])
            ("_raw_input" function (:arguments 
              ( ("prompt" variable nil (reparse-symbol function_parameters) [3962 3968])
                ("stream" variable nil (reparse-symbol function_parameters) [3973 3979])
                ("input" variable nil (reparse-symbol function_parameters) [3986 3991]))              ) nil [3947 4489])
            ("getuser" function (:documentation "Get the username from the environment or password database.

    First try various environment variables, then the password
    database.  This works on Windows as long as USERNAME is set.

    ") nil [4491 4972])
            ("try" code nil nil [5025 5564]))          
      :file "getpass.py"
      :pointmax 5564
      :fsize 5563
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "glob.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("sys" include nil nil [35 45])
            ("os" include nil nil [46 55])
            ("re" include nil nil [56 65])
            ("fnmatch" include nil nil [66 80])
            ("__all__" variable nil nil [82 109])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la fnmatch.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [120 128]))                  )
                nil [111 304])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la fnmatch.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [315 323]))                  )
                nil [305 1060])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [1295 1302])
                ("pattern" variable nil (reparse-symbol function_parameters) [1304 1311]))              ) nil [1285 1768])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [1779 1786])
                ("basename" variable nil (reparse-symbol function_parameters) [1788 1796]))              ) nil [1769 2150])
            ("magic_check" variable nil nil [2152 2185])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2201 2202]))              ) nil [2187 2250]))          
      :file "glob.py"
      :pointmax 2250
      :fsize 2249
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "__future__.py"
      :file "__future__.py"
      :fsize 4380
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "cgi.py"
      :file "cgi.py"
      :fsize 33988
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "weakref.py"
      :file "weakref.py"
      :fsize 10693
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "queue.py"
      :file "queue.py"
      :fsize 8561
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "threading.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("time" include nil nil [190 237])
            ("traceback" include nil nil [238 285])
            ("collections" include nil nil [286 315])
            ("__all__" variable nil nil [896 1158])
            ("_start_new_thread" variable nil nil [1160 1203])
            ("_allocate_lock" variable nil nil [1204 1241])
            ("_get_ident" variable nil nil [1242 1271])
            ("ThreadError" variable nil nil [1272 1298])
            ("del" code nil nil [1299 1309])
            ("warnings" code nil nil [1424 1555])
            ("_VERBOSE" variable nil nil [1838 1854])
            ("if" code nil nil [1856 2779])
            ("_profile_hook" variable nil nil [2819 2839])
            ("_trace_hook" variable nil nil [2840 2858])
            ("setprofile" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2875 2879]))              ) nil [2860 2932])
            ("settrace" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2946 2950]))              ) nil [2933 2999])
            ("Lock" variable nil nil [3027 3048])
            ("RLock" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3060 3065])
                ("kwargs" variable nil (reparse-symbol function_parameters) [3067 3075]))              ) nil [3050 3113])
            ("_RLock" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [3185 3217])
                            ("self" variable nil (reparse-symbol indented_block_body) [3226 3257])
                            ("self" variable nil (reparse-symbol indented_block_body) [3266 3285])
                            ("self" variable nil (reparse-symbol indented_block_body) [3294 3310]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3156 3160])
                            ("verbose" variable nil (reparse-symbol function_parameters) [3162 3169]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3143 3311])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3329 3333]))                          )
                        (reparse-symbol indented_block_body) [3316 3566])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3583 3587])
                            ("blocking" variable nil (reparse-symbol function_parameters) [3589 3597]))                          )
                        (reparse-symbol indented_block_body) [3571 4180])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [4185 4204])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4222 4226]))                          )
                        (reparse-symbol indented_block_body) [4210 4671])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4689 4693])
                            ("t" variable nil (reparse-symbol function_parameters) [4695 4696])
                            ("v" variable nil (reparse-symbol function_parameters) [4698 4699])
                            ("tb" variable nil (reparse-symbol function_parameters) [4701 4703]))                          )
                        (reparse-symbol indented_block_body) [4676 4729])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4807 4811])
                            ("count_owner" variable nil (reparse-symbol function_parameters) [4813 4824]))                          )
                        (reparse-symbol indented_block_body) [4786 5027])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5050 5054]))                          )
                        (reparse-symbol indented_block_body) [5032 5302])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5321 5325]))                          )
                        (reparse-symbol indented_block_body) [5307 5372]))                  
                :type "class")
                nil [3114 5372])
            ("Condition" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [5388 5393])
                ("kwargs" variable nil (reparse-symbol function_parameters) [5395 5403]))              ) nil [5374 5445])
            ("_Condition" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [5532 5564])
                            ("if" code nil (reparse-symbol indented_block_body) [5573 5617])
                            ("self" variable nil (reparse-symbol indented_block_body) [5625 5643])
                            ("self" variable nil (reparse-symbol indented_block_body) [5712 5739])
                            ("self" variable nil (reparse-symbol indented_block_body) [5748 5775])
                            ("try" code nil (reparse-symbol indented_block_body) [5999 6104])
                            ("try" code nil (reparse-symbol indented_block_body) [6112 6223])
                            ("try" code nil (reparse-symbol indented_block_body) [6231 6328])
                            ("self" variable nil (reparse-symbol indented_block_body) [6336 6355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5492 5496])
                            ("lock" variable nil (reparse-symbol function_parameters) [5498 5502])
                            ("verbose" variable nil (reparse-symbol function_parameters) [5509 5516]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5479 6356])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6375 6379]))                          )
                        (reparse-symbol indented_block_body) [6361 6421])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6439 6443])
                            ("args" variable nil (reparse-symbol function_parameters) [6445 6450]))                          )
                        (reparse-symbol indented_block_body) [6426 6496])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6514 6518]))                          )
                        (reparse-symbol indented_block_body) [6501 6595])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6618 6622]))                          )
                        (reparse-symbol indented_block_body) [6600 6684])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6710 6714])
                            ("x" variable nil (reparse-symbol function_parameters) [6716 6717]))                          )
                        (reparse-symbol indented_block_body) [6689 6781])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6800 6804]))                          )
                        (reparse-symbol indented_block_body) [6786 7070])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7084 7088])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7090 7097]))                          )
                        (reparse-symbol indented_block_body) [7075 8892])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8908 8912])
                            ("n" variable nil (reparse-symbol function_parameters) [8914 8915]))                          )
                        (reparse-symbol indented_block_body) [8897 9492])
                    ("notifyAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9511 9515]))                          )
                        (reparse-symbol indented_block_body) [9497 9559])
                    ("notify_all" variable nil (reparse-symbol indented_block_body) [9564 9586]))                  
                :type "class")
                nil [5446 9587])
            ("Semaphore" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9603 9608])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9610 9618]))              ) nil [9589 9660])
            ("_Semaphore" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [9823 9906])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [9914 9946])
                            ("self" variable nil (reparse-symbol indented_block_body) [9955 9986])
                            ("self" variable nil (reparse-symbol indented_block_body) [9995 10015]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9785 9789])
                            ("value" variable nil (reparse-symbol function_parameters) [9791 9796])
                            ("verbose" variable nil (reparse-symbol function_parameters) [9800 9807]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9772 10016])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10033 10037])
                            ("blocking" variable nil (reparse-symbol function_parameters) [10039 10047]))                          )
                        (reparse-symbol indented_block_body) [10021 10632])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [10637 10656])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10674 10678]))                          )
                        (reparse-symbol indented_block_body) [10662 10931])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10949 10953])
                            ("t" variable nil (reparse-symbol function_parameters) [10955 10956])
                            ("v" variable nil (reparse-symbol function_parameters) [10958 10959])
                            ("tb" variable nil (reparse-symbol function_parameters) [10961 10963]))                          )
                        (reparse-symbol indented_block_body) [10936 10989]))                  
                :type "class")
                nil [9661 10989])
            ("BoundedSemaphore" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11012 11017])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11019 11027]))              ) nil [10991 11076])
            ("_BoundedSemaphore" type
               (:documentation "Semaphore that checks that # releases is <= # acquires"
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [11234 11275])
                            ("self" variable nil (reparse-symbol indented_block_body) [11284 11311]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11196 11200])
                            ("value" variable nil (reparse-symbol function_parameters) [11202 11207])
                            ("verbose" variable nil (reparse-symbol function_parameters) [11211 11218]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11183 11312])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11329 11333]))                          )
                        (reparse-symbol indented_block_body) [11317 11500]))                  
                :type "class")
                nil [11077 11500])
            ("Event" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11512 11517])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11519 11527]))              ) nil [11502 11565])
            ("_Event" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [11696 11728])
                            ("self" variable nil (reparse-symbol indented_block_body) [11737 11768])
                            ("self" variable nil (reparse-symbol indented_block_body) [11777 11796]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11667 11671])
                            ("verbose" variable nil (reparse-symbol function_parameters) [11673 11680]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11654 11797])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11828 11832]))                          )
                        (reparse-symbol indented_block_body) [11802 11942])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11957 11961]))                          )
                        (reparse-symbol indented_block_body) [11947 11991])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [11996 12010])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12024 12028]))                          )
                        (reparse-symbol indented_block_body) [12016 12193])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12208 12212]))                          )
                        (reparse-symbol indented_block_body) [12198 12341])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12355 12359])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12361 12368]))                          )
                        (reparse-symbol indented_block_body) [12346 12575]))                  
                :type "class")
                nil [11566 12575])
            ("_counter" variable nil nil [12614 12626])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [12640 12648]))              ) nil [12627 12742])
            ("_active_limbo_lock" variable nil nil [12774 12811])
            ("_active" variable nil nil [12812 12824])
            ("_limbo" variable nil nil [12862 12873])
            ("Thread" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [12931 12952])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [13203 13229])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [13332 13360])
                    ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [13483 13542])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [13551 13583])
                            ("if" code nil (reparse-symbol indented_block_body) [13592 13635])
                            ("self" variable nil (reparse-symbol indented_block_body) [13643 13665])
                            ("self" variable nil (reparse-symbol indented_block_body) [13674 13711])
                            ("self" variable nil (reparse-symbol indented_block_body) [13720 13738])
                            ("self" variable nil (reparse-symbol indented_block_body) [13747 13769])
                            ("self" variable nil (reparse-symbol indented_block_body) [13778 13814])
                            ("self" variable nil (reparse-symbol indented_block_body) [13823 13842])
                            ("self" variable nil (reparse-symbol indented_block_body) [13851 13875])
                            ("self" variable nil (reparse-symbol indented_block_body) [13884 13906])
                            ("self" variable nil (reparse-symbol indented_block_body) [13915 13947])
                            ("self" variable nil (reparse-symbol indented_block_body) [13956 13981])
                            ("self" variable nil (reparse-symbol indented_block_body) [14108 14135]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13379 13383])
                            ("group" variable nil (reparse-symbol function_parameters) [13385 13390])
                            ("target" variable nil (reparse-symbol function_parameters) [13397 13403])
                            ("name" variable nil (reparse-symbol function_parameters) [13410 13414])
                            ("args" variable nil (reparse-symbol function_parameters) [13438 13442])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13447 13453])
                            ("verbose" variable nil (reparse-symbol function_parameters) [13460 13467]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13366 14136])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14167 14171]))                          )
                        (reparse-symbol indented_block_body) [14141 14486])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14516 14520]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14491 14580])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14601 14605]))                          )
                        (reparse-symbol indented_block_body) [14585 14700])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14718 14722]))                          )
                        (reparse-symbol indented_block_body) [14705 15166])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15181 15185]))                          )
                        (reparse-symbol indented_block_body) [15171 15745])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15758 15762]))                          )
                        (reparse-symbol indented_block_body) [15750 16087])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16108 16112]))                          )
                        (reparse-symbol indented_block_body) [16092 17091])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17111 17115]))                          )
                        (reparse-symbol indented_block_body) [17096 17154])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17181 17185]))                          )
                        (reparse-symbol indented_block_body) [17159 20534])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20550 20554]))                          )
                        (reparse-symbol indented_block_body) [20539 20683])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20701 20705]))                          )
                        (reparse-symbol indented_block_body) [20688 22502])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22516 22520])
                            ("timeout" variable nil (reparse-symbol function_parameters) [22522 22529]))                          )
                        (reparse-symbol indented_block_body) [22507 23780])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23808 23812]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23785 23908])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23939 23943])
                            ("name" variable nil (reparse-symbol function_parameters) [23945 23949]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23913 24050])
                    ("ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24079 24083]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24055 24180])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24197 24201]))                          )
                        (reparse-symbol indented_block_body) [24185 24332])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [24337 24355])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24386 24390]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24361 24490])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24525 24529])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [24531 24539]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24495 24788])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24806 24810]))                          )
                        (reparse-symbol indented_block_body) [24793 24840])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24859 24863])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [24865 24873]))                          )
                        (reparse-symbol indented_block_body) [24845 24907])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24924 24928]))                          )
                        (reparse-symbol indented_block_body) [24912 24956])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24973 24977])
                            ("name" variable nil (reparse-symbol function_parameters) [24979 24983]))                          )
                        (reparse-symbol indented_block_body) [24961 25011]))                  
                :type "class")
                nil [12902 25011])
            ("Timer" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [25083 25088])
                ("kwargs" variable nil (reparse-symbol function_parameters) [25090 25098]))              ) nil [25073 25136])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

    t = Timer(30.0, f, args=[], kwargs={})
    t.start()
    t.cancel() # stop the timer's action if it's still waiting
    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [25421 25442])
                            ("self" variable nil (reparse-symbol indented_block_body) [25451 25475])
                            ("self" variable nil (reparse-symbol indented_block_body) [25484 25508])
                            ("self" variable nil (reparse-symbol indented_block_body) [25517 25533])
                            ("self" variable nil (reparse-symbol indented_block_body) [25542 25562])
                            ("self" variable nil (reparse-symbol indented_block_body) [25571 25594]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25366 25370])
                            ("interval" variable nil (reparse-symbol function_parameters) [25372 25380])
                            ("function" variable nil (reparse-symbol function_parameters) [25382 25390])
                            ("args" variable nil (reparse-symbol function_parameters) [25392 25396])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25401 25407]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25353 25595])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25611 25615]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [25600 25701])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25714 25718]))                          )
                        (reparse-symbol indented_block_body) [25706 25883]))                  
                :type "class")
                nil [25137 25883])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [26049 26089])
                            ("self" code nil (reparse-symbol indented_block_body) [26098 26125])
                            ("self" code nil (reparse-symbol indented_block_body) [26134 26151])
                            ("with" code nil (reparse-symbol indented_block_body) [26160 26226]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26034 26038]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26021 26226])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26247 26251]))                          )
                        (reparse-symbol indented_block_body) [26231 26275])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26294 26298]))                          )
                        (reparse-symbol indented_block_body) [26280 26653]))                  
                :type "class")
                nil [25989 26653])
            ("_pickSomeNonDaemonThread" function nil nil [26654 26791])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [27290 27338])
                            ("del" code nil (reparse-symbol indented_block_body) [27558 27581])
                            ("self" code nil (reparse-symbol indented_block_body) [27591 27618])
                            ("self" code nil (reparse-symbol indented_block_body) [27627 27644])
                            ("with" code nil (reparse-symbol indented_block_body) [27653 27719]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27275 27279]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27262 27719])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27740 27744]))                          )
                        (reparse-symbol indented_block_body) [27724 27767])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27781 27785])
                            ("timeout" variable nil (reparse-symbol function_parameters) [27787 27794]))                          )
                        (reparse-symbol indented_block_body) [27772 27853]))                  
                :type "class")
                nil [27229 27853])
            ("currentThread" function nil nil [27879 28069])
            ("current_thread" variable nil nil [28070 28100])
            ("activeCount" function nil nil [28102 28192])
            ("active_count" variable nil nil [28193 28219])
            ("_enumerate" function nil nil [28221 28353])
            ("enumerate" function nil nil [28354 28450])
            ("thread" include nil nil [28451 28480])
            ("_shutdown" variable nil nil [28596 28631])
            ("try" code nil nil [28730 28833])
            ("_after_fork" function nil nil [28835 30435])
            ("_test" function nil nil [30455 32681])
            ("if" code nil nil [32682 32721]))          
      :file "threading.py"
      :pointmax 32721
      :fsize 32720
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20183 . 20218) (NEWLINE 19967 . 19968) (COLON 19966 . 19967) (FINALLY 19959 . 19966)))
    (semanticdb-table "codecs.py"
      :file "codecs.py"
      :fsize 35266
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "pickle.py"
      :file "pickle.py"
      :fsize 45095
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "decimal.py"
      :file "decimal.py"
      :fsize 219383
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "sets.py"
      :file "sets.py"
      :fsize 19050
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "mimetypes.py"
      :file "mimetypes.py"
      :fsize 20609
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "smtplib.py"
      :file "smtplib.py"
      :fsize 30703
      :lastmodtime '(21002 22587 0 0))
    (semanticdb-table "md5.py"
      :major-mode 'python-mode
      :tags 
        '( ("warnings" include nil nil [120 135])
            ("warnings" code nil nil [136 241])
            ("hashlib" include nil nil [243 266])
            ("new" variable nil nil [267 276])
            ("blocksize" variable nil nil [278 291])
            ("digest_size" variable nil nil [342 358]))          
      :file "md5.py"
      :pointmax 359
      :fsize 358
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "SocketServer.py"
      :file "SocketServer.py"
      :fsize 23342
      :lastmodtime '(21002 22586 0 0))
    (semanticdb-table "tarfile.py"
      :major-mode 'python-mode
      :tags nil
      :file "tarfile.py"
      :pointmax 89071
      :fsize 89070
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "Cookie.py"
      :major-mode 'python-mode
      :tags nil
      :file "Cookie.py"
      :pointmax 25844
      :fsize 25843
      :lastmodtime '(21002 22586 0 0)
      :unmatched-syntax nil))
  :file "!System!Library!Frameworks!Python.framework!Versions!2.7!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
