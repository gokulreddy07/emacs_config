;; Object gevent/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "gevent/"
  :tables
  (list
    (semanticdb-table "pywsgi.py"
      :major-mode 'python-mode
      :tags 
        '( ("errno" include nil nil [98 110])
            ("sys" include nil nil [111 121])
            ("time" include nil nil [122 133])
            ("traceback" include nil nil [134 150])
            ("mimetools" include nil nil [151 167])
            ("datetime" include nil nil [168 197])
            ("urllib" include nil nil [198 224])
            ("gevent" include nil nil [226 251])
            ("gevent" include nil nil [252 265])
            ("gevent.server" include nil nil [266 304])
            ("gevent.hub" include nil nil [305 340])
            ("__all__" variable nil nil [343 382])
            ("MAX_REQUEST_LINE" variable nil nil [385 408])
            ("_WEEKDAYNAME" variable nil nil [482 546])
            ("_MONTHNAME" variable nil nil [547 723])
            ("_INTERNAL_ERROR_STATUS" variable nil nil [724 776])
            ("_INTERNAL_ERROR_BODY" variable nil nil [777 823])
            ("_INTERNAL_ERROR_HEADERS" variable nil nil [824 1013])
            ("_REQUEST_TOO_LONG_RESPONSE" variable nil nil [1014 1128])
            ("_BAD_REQUEST_RESPONSE" variable nil nil [1129 1229])
            ("_CONTINUE_RESPONSE" variable nil nil [1230 1282])
            ("format_date_time" function (:arguments 
              ( ("timestamp" variable nil (reparse-symbol function_parameters) [1306 1315]))              ) nil [1285 1500])
            ("Input" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1613 1631])
                            ("self" variable nil (reparse-symbol indented_block_body) [1640 1676])
                            ("self" variable nil (reparse-symbol indented_block_body) [1685 1705])
                            ("self" variable nil (reparse-symbol indented_block_body) [1714 1731])
                            ("self" variable nil (reparse-symbol indented_block_body) [1740 1774])
                            ("self" code nil (reparse-symbol indented_block_body) [1783 1805]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1541 1545])
                            ("rfile" variable nil (reparse-symbol function_parameters) [1547 1552])
                            ("content_length" variable nil (reparse-symbol function_parameters) [1554 1568])
                            ("socket" variable nil (reparse-symbol function_parameters) [1570 1576])
                            ("chunked_input" variable nil (reparse-symbol function_parameters) [1583 1596]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1528 1806])
                    ("_discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1824 1828]))                          )
                        (reparse-symbol indented_block_body) [1811 2083])
                    ("_send_100_continue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2111 2115]))                          )
                        (reparse-symbol indented_block_body) [2088 2237])
                    ("_do_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2255 2259])
                            ("length" variable nil (reparse-symbol function_parameters) [2261 2267])
                            ("use_readline" variable nil (reparse-symbol function_parameters) [2274 2286]))                          )
                        (reparse-symbol indented_block_body) [2242 3242])
                    ("_chunked_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3265 3269])
                            ("length" variable nil (reparse-symbol function_parameters) [3271 3277])
                            ("use_readline" variable nil (reparse-symbol function_parameters) [3284 3296]))                          )
                        (reparse-symbol indented_block_body) [3247 4913])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4927 4931])
                            ("length" variable nil (reparse-symbol function_parameters) [4933 4939]))                          )
                        (reparse-symbol indented_block_body) [4918 5061])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5079 5083])
                            ("size" variable nil (reparse-symbol function_parameters) [5085 5089]))                          )
                        (reparse-symbol indented_block_body) [5066 5250])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5269 5273])
                            ("hint" variable nil (reparse-symbol function_parameters) [5275 5279]))                          )
                        (reparse-symbol indented_block_body) [5255 5313])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5331 5335]))                          )
                        (reparse-symbol indented_block_body) [5318 5358])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5372 5376]))                          )
                        (reparse-symbol indented_block_body) [5363 5483]))                  
                :type "class")
                nil [1502 5483])
            ("WSGIHandler" type
               (:superclasses ("object")
                :members 
                  ( ("protocol_version" variable nil (reparse-symbol indented_block_body) [5516 5545])
                    ("MessageClass" variable nil (reparse-symbol indented_block_body) [5550 5582])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5653 5673])
                            ("self" variable nil (reparse-symbol indented_block_body) [5682 5711])
                            ("self" variable nil (reparse-symbol indented_block_body) [5720 5740])
                            ("if" code nil (reparse-symbol indented_block_body) [5749 5863]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5601 5605])
                            ("socket" variable nil (reparse-symbol function_parameters) [5607 5613])
                            ("address" variable nil (reparse-symbol function_parameters) [5615 5622])
                            ("server" variable nil (reparse-symbol function_parameters) [5624 5630])
                            ("rfile" variable nil (reparse-symbol function_parameters) [5632 5637]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5588 5863])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5879 5883]))                          )
                        (reparse-symbol indented_block_body) [5868 6808])
                    ("_check_http_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6837 6841]))                          )
                        (reparse-symbol indented_block_body) [6813 7140])
                    ("read_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7162 7166])
                            ("raw_requestline" variable nil (reparse-symbol function_parameters) [7168 7183]))                          )
                        (reparse-symbol indented_block_body) [7145 9141])
                    ("log_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9160 9164])
                            ("msg" variable nil (reparse-symbol function_parameters) [9166 9169])
                            ("args" variable nil (reparse-symbol function_parameters) [9171 9176]))                          )
                        (reparse-symbol indented_block_body) [9146 9559])
                    ("read_requestline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9585 9589]))                          )
                        (reparse-symbol indented_block_body) [9564 9645])
                    ("handle_one_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9673 9677]))                          )
                        (reparse-symbol indented_block_body) [9650 11097])
                    ("finalize_headers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11123 11127]))                          )
                        (reparse-symbol indented_block_body) [11102 11840])
                    ("_sendall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11858 11862])
                            ("data" variable nil (reparse-symbol function_parameters) [11864 11868]))                          )
                        (reparse-symbol indented_block_body) [11845 12134])
                    ("_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12150 12154])
                            ("data" variable nil (reparse-symbol function_parameters) [12156 12160]))                          )
                        (reparse-symbol indented_block_body) [12139 12365])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12380 12384])
                            ("data" variable nil (reparse-symbol function_parameters) [12386 12390]))                          )
                        (reparse-symbol indented_block_body) [12370 12756])
                    ("if" code nil (reparse-symbol indented_block_body) [12761 14166])
                    ("start_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14190 14194])
                            ("status" variable nil (reparse-symbol function_parameters) [14196 14202])
                            ("headers" variable nil (reparse-symbol function_parameters) [14204 14211])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [14213 14221]))                          )
                        (reparse-symbol indented_block_body) [14171 15698])
                    ("log_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15719 15723]))                          )
                        (reparse-symbol indented_block_body) [15703 15824])
                    ("format_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15848 15852]))                          )
                        (reparse-symbol indented_block_body) [15829 16386])
                    ("process_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16410 16414]))                          )
                        (reparse-symbol indented_block_body) [16391 16702])
                    ("run_application" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16727 16731]))                          )
                        (reparse-symbol indented_block_body) [16707 16838])
                    ("handle_one_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16867 16871]))                          )
                        (reparse-symbol indented_block_body) [16843 17490])
                    ("handle_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17512 17516])
                            ("type" variable nil (reparse-symbol function_parameters) [17518 17522])
                            ("value" variable nil (reparse-symbol function_parameters) [17524 17529])
                            ("tb" variable nil (reparse-symbol function_parameters) [17531 17533]))                          )
                        (reparse-symbol indented_block_body) [17495 17885])
                    ("_headers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17903 17907]))                          )
                        (reparse-symbol indented_block_body) [17890 18434])
                    ("get_environ" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18455 18459]))                          )
                        (reparse-symbol indented_block_body) [18439 19905]))                  
                :type "class")
                nil [5485 19905])
            ("WSGIServer" type
               (:documentation "A WSGI server based on :class:`StreamServer` that supports HTTPS."
                :superclasses ("StreamServer")
                :members 
                  ( ("handler_class" variable nil (reparse-symbol indented_block_body) [20020 20047])
                    ("base_env" variable nil (reparse-symbol indented_block_body) [20052 20412])
                    ("__init__" function
                       (:suite 
                          ( ("StreamServer" code nil (reparse-symbol indented_block_body) [20583 20662])
                            ("if" code nil (reparse-symbol indented_block_body) [20671 20742])
                            ("if" code nil (reparse-symbol indented_block_body) [20750 20827])
                            ("if" code nil (reparse-symbol indented_block_body) [20835 20931])
                            ("self" code nil (reparse-symbol indented_block_body) [20939 20964])
                            ("self" code nil (reparse-symbol indented_block_body) [20973 20994]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20431 20435])
                            ("listener" variable nil (reparse-symbol function_parameters) [20437 20445])
                            ("application" variable nil (reparse-symbol function_parameters) [20447 20458])
                            ("backlog" variable nil (reparse-symbol function_parameters) [20465 20472])
                            ("spawn" variable nil (reparse-symbol function_parameters) [20479 20484])
                            ("log" variable nil (reparse-symbol function_parameters) [20496 20499])
                            ("handler_class" variable nil (reparse-symbol function_parameters) [20511 20524])
                            ("environ" variable nil (reparse-symbol function_parameters) [20548 20555])
                            ("ssl_args" variable nil (reparse-symbol function_parameters) [20562 20572]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20418 20995])
                    ("set_environ" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21016 21020])
                            ("environ" variable nil (reparse-symbol function_parameters) [21022 21029]))                          )
                        (reparse-symbol indented_block_body) [21000 21546])
                    ("set_max_accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21570 21574]))                          )
                        (reparse-symbol indented_block_body) [21551 21659])
                    ("get_environ" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21680 21684]))                          )
                        (reparse-symbol indented_block_body) [21664 21722])
                    ("init_socket" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21743 21747]))                          )
                        (reparse-symbol indented_block_body) [21727 21819])
                    ("update_environ" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21843 21847]))                          )
                        (reparse-symbol indented_block_body) [21824 22368])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22384 22388])
                            ("socket" variable nil (reparse-symbol function_parameters) [22390 22396])
                            ("address" variable nil (reparse-symbol function_parameters) [22398 22405]))                          )
                        (reparse-symbol indented_block_body) [22373 22493]))                  
                :type "class")
                nil [19907 22493]))          
      :file "pywsgi.py"
      :pointmax 22493
      :fsize 22492
      :lastmodtime '(21002 34062 0 0)
      :unmatched-syntax '((INDENT_BLOCK 17416 . 17490) (NEWLINE 17415 . 17416) (COLON 17414 . 17415) (FINALLY 17407 . 17414)))
    (semanticdb-table "server.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"TCP/SSL server\"\"\"" code nil nil [67 87])
            ("sys" include nil nil [88 98])
            ("_socket" include nil nil [99 113])
            ("gevent.baseserver" include nil nil [114 154])
            ("gevent.socket" include nil nil [155 200])
            ("__all__" variable nil nil [203 247])
            ("if" code nil nil [250 424])
            ("StreamServer" type
               (:documentation "A generic TCP server. Accepts connections on a listening socket and spawns user-provided *handle*
    for each connection with 2 arguments: the client socket and the client address.

    If any of the following keyword arguments are present, then the server assumes SSL mode and uses these arguments
    to create an SSL wrapper for the client socket before passing it to *handle*:

    - keyfile
    - certfile
    - cert_reqs
    - ssl_version
    - ca_certs
    - suppress_ragged_eofs
    - do_handshake_on_connect
    - ciphers

    Note that although the errors in a successfully spawned handler will not affect the server or other connections,
    the errors raised by :func:`accept` and *spawn* cause the server to stop accepting for a short amount of time. The
    exact period depends on the values of :attr:`min_delay` and :attr:`max_delay` attributes.

    The delay starts with :attr:`min_delay` and doubles with each successive error until it reaches :attr:`max_delay`.
    A successful :func:`accept` resets the delay to :attr:`min_delay` again.
    "
                :superclasses ("BaseServer")
                :members 
                  ( ("backlog" variable nil (reparse-symbol indented_block_body) [1603 1616])
                    ("reuse_addr" variable nil (reparse-symbol indented_block_body) [1622 1653])
                    ("__init__" function
                       (:suite 
                          ( ("BaseServer" code nil (reparse-symbol indented_block_body) [1753 1816])
                            ("try" code nil (reparse-symbol indented_block_body) [1825 2377]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1672 1676])
                            ("listener" variable nil (reparse-symbol function_parameters) [1678 1686])
                            ("handle" variable nil (reparse-symbol function_parameters) [1688 1694])
                            ("backlog" variable nil (reparse-symbol function_parameters) [1701 1708])
                            ("spawn" variable nil (reparse-symbol function_parameters) [1715 1720])
                            ("ssl_args" variable nil (reparse-symbol function_parameters) [1732 1742]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1659 2377])
                    ("ssl_enabled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2412 2416]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2382 2460])
                    ("set_listener" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2482 2486])
                            ("listener" variable nil (reparse-symbol function_parameters) [2488 2496]))                          )
                        (reparse-symbol indented_block_body) [2465 2652])
                    ("init_socket" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2673 2677]))                          )
                        (reparse-symbol indented_block_body) [2657 2992])
                    ("get_listener" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3031 3035])
                            ("address" variable nil (reparse-symbol function_parameters) [3037 3044])
                            ("backlog" variable nil (reparse-symbol function_parameters) [3046 3053])
                            ("family" variable nil (reparse-symbol function_parameters) [3060 3066]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2997 3235])
                    ("do_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3252 3256]))                          )
                        (reparse-symbol indented_block_body) [3240 3496])
                    ("wrap_socket_and_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3528 3532])
                            ("client_socket" variable nil (reparse-symbol function_parameters) [3534 3547])
                            ("address" variable nil (reparse-symbol function_parameters) [3549 3556]))                          )
                        (reparse-symbol indented_block_body) [3501 3715]))                  
                :type "class")
                nil [426 3715])
            ("DatagramServer" type
               (:documentation "A UDP server"
                :superclasses ("BaseServer")
                :members 
                  ( ("reuse_addr" variable nil (reparse-symbol indented_block_body) [3779 3810])
                    ("__init__" function
                       (:suite 
                          ( ("BaseServer" code nil (reparse-symbol indented_block_body) [3861 3903])
                            ("gevent.lock" include nil (reparse-symbol indented_block_body) [3912 3945])
                            ("self" variable nil (reparse-symbol indented_block_body) [3954 3983]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3829 3833])
                            ("args" variable nil (reparse-symbol function_parameters) [3835 3840])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3842 3850]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3816 3984])
                    ("init_socket" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4005 4009]))                          )
                        (reparse-symbol indented_block_body) [3989 4318])
                    ("get_listener" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4357 4361])
                            ("address" variable nil (reparse-symbol function_parameters) [4363 4370])
                            ("family" variable nil (reparse-symbol function_parameters) [4372 4378]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4323 4465])
                    ("do_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4482 4486]))                          )
                        (reparse-symbol indented_block_body) [4470 4701])
                    ("sendto" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4717 4721])
                            ("args" variable nil (reparse-symbol function_parameters) [4723 4728]))                          )
                        (reparse-symbol indented_block_body) [4706 4871]))                  
                :type "class")
                nil [3717 4871])
            ("_tcp_listener" function
               (:documentation "A shortcut to create a TCP socket, bind it and put it into listening state."
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [4891 4898])
                    ("backlog" variable nil (reparse-symbol function_parameters) [4900 4907])
                    ("reuse_addr" variable nil (reparse-symbol function_parameters) [4912 4922])
                    ("family" variable nil (reparse-symbol function_parameters) [4929 4935]))                  )
                nil [4873 5494])
            ("_udp_socket" function (:arguments 
              ( ("address" variable nil (reparse-symbol function_parameters) [5512 5519])
                ("backlog" variable nil (reparse-symbol function_parameters) [5521 5528])
                ("reuse_addr" variable nil (reparse-symbol function_parameters) [5533 5543])
                ("family" variable nil (reparse-symbol function_parameters) [5550 5556]))              ) nil [5496 6045]))          
      :file "server.py"
      :pointmax 6045
      :fsize 6044
      :lastmodtime '(21002 34062 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "baseserver.py"
      :file "baseserver.py"
      :fsize 11725
      :lastmodtime '(21002 34062 0 0))
    (semanticdb-table "socket.py"
      :file "socket.py"
      :fsize 22900
      :lastmodtime '(21002 34062 0 0))
    (semanticdb-table "hub.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [68 106])
            ("sys" include nil nil [107 117])
            ("os" include nil nil [118 127])
            ("traceback" include nil nil [128 144])
            ("greenlet" include nil nil [146 161])
            ("greenlet_version" variable nil nil [203 260])
            ("if" code nil nil [261 356])
            ("if" code nil nil [356 631])
            ("greenlet" include nil nil [631 686])
            ("__all__" variable nil nil [689 906])
            ("PY3" code nil nil [909 939])
            ("if" code nil nil [942 1068])
            ("if" code nil nil [1070 1152])
            ("threadlocal" variable nil nil [1152 1179])
            ("_threadlocal" variable nil nil [1180 1208])
            ("_threadlocal" variable nil nil [1209 1232])
            ("get_ident" variable nil nil [1233 1261])
            ("MAIN_THREAD" variable nil nil [1262 1287])
            ("spawn_raw" function (:arguments 
              ( ("function" variable nil (reparse-symbol function_parameters) [1304 1312])
                ("args" variable nil (reparse-symbol function_parameters) [1314 1319])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1321 1329]))              ) nil [1290 1450])
            ("sleep" function
               (:documentation "Put the current greenlet to sleep for at least *seconds*.

    *seconds* may be specified as an integer, or a float if fractional seconds
    are desired.

    If *ref* is false, the greenlet running sleep() will not prevent gevent.run()
    from exiting.
    "
                :arguments 
                  ( ("seconds" variable nil (reparse-symbol function_parameters) [1462 1469])
                    ("ref" variable nil (reparse-symbol function_parameters) [1473 1476]))                  )
                nil [1452 1961])
            ("idle" function (:arguments 
              ( ("priority" variable nil (reparse-symbol function_parameters) [1972 1980]))              ) nil [1963 2110])
            ("kill" function
               (:documentation "Kill greenlet asynchronously. The current greenlet is not unscheduled.

    Note, that :meth:`gevent.Greenlet.kill` method does the same and more. However,
    MAIN greenlet - the one that exists initially - does not have ``kill()`` method
    so you have to use this function.
    "
                :arguments 
                  ( ("greenlet" variable nil (reparse-symbol function_parameters) [2121 2129])
                    ("exception" variable nil (reparse-symbol function_parameters) [2131 2140]))                  )
                nil [2112 2538])
            ("signal" type
               (:superclasses ("object")
                :members 
                  ( ("greenlet_class" variable nil (reparse-symbol indented_block_body) [2567 2588])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2659 2679])
                            ("self" variable nil (reparse-symbol indented_block_body) [2688 2745])
                            ("self" code nil (reparse-symbol indented_block_body) [2754 2785])
                            ("self" variable nil (reparse-symbol indented_block_body) [2794 2816])
                            ("self" variable nil (reparse-symbol indented_block_body) [2825 2841])
                            ("self" variable nil (reparse-symbol indented_block_body) [2850 2870])
                            ("if" code nil (reparse-symbol indented_block_body) [2879 2994]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2607 2611])
                            ("signalnum" variable nil (reparse-symbol function_parameters) [2613 2622])
                            ("handler" variable nil (reparse-symbol function_parameters) [2624 2631])
                            ("args" variable nil (reparse-symbol function_parameters) [2633 2638])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2640 2648]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2594 2994])
                    ("_get_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3012 3016]))                          )
                        (reparse-symbol indented_block_body) [2999 3051])
                    ("_set_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3069 3073])
                            ("value" variable nil (reparse-symbol function_parameters) [3075 3080]))                          )
                        (reparse-symbol indented_block_body) [3056 3116])
                    ("ref" variable nil (reparse-symbol indented_block_body) [3121 3155])
                    ("del" code nil (reparse-symbol indented_block_body) [3160 3182])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3199 3203]))                          )
                        (reparse-symbol indented_block_body) [3188 3234])
                    ("_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3250 3254]))                          )
                        (reparse-symbol indented_block_body) [3239 3430])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3446 3450]))                          )
                        (reparse-symbol indented_block_body) [3435 3591]))                  
                :type "class")
                nil [2540 3591])
            ("reinit" function nil nil [3593 3678])
            ("get_hub_class" function (:documentation "Return the type of hub to use for the current thread.

    If there's no type of hub for the current thread yet, 'gevent.hub.Hub' is used.
    ") nil [3680 4057])
            ("get_hub" function
               (:documentation "Return the hub for the current thread.

    If hub does not exists in the current thread, the new one is created with call to :meth:`get_hub_class`.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [4071 4076])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4078 4086]))                  )
                nil [4059 4456])
            ("_get_hub" function (:documentation "Return the hub for the current thread.

    Return ``None`` if no hub has been created yet.
    ") nil [4458 4686])
            ("set_hub" function (:arguments 
              ( ("hub" variable nil (reparse-symbol function_parameters) [4700 4703]))              ) nil [4688 4733])
            ("_import" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [4747 4751]))              ) nil [4735 5814])
            ("config" function (:arguments 
              ( ("default" variable nil (reparse-symbol function_parameters) [5827 5834])
                ("envvar" variable nil (reparse-symbol function_parameters) [5836 5842]))              ) nil [5816 5984])
            ("resolver_config" function (:arguments 
              ( ("default" variable nil (reparse-symbol function_parameters) [6006 6013])
                ("envvar" variable nil (reparse-symbol function_parameters) [6015 6021]))              ) nil [5986 6111])
            ("_resolvers" variable nil nil [6113 6283])
            ("Hub" type
               (:documentation "A greenlet that runs the event loop.

    It is created automatically by :func:`get_hub`.
    "
                :superclasses ("greenlet")
                :members 
                  ( ("SYSTEM_ERROR" variable nil (reparse-symbol indented_block_body) [6417 6476])
                    ("NOT_ERROR" variable nil (reparse-symbol indented_block_body) [6481 6519])
                    ("loop_class" variable nil (reparse-symbol indented_block_body) [6524 6578])
                    ("resolver_class" variable nil (reparse-symbol indented_block_body) [6583 6746])
                    ("resolver_class" variable nil (reparse-symbol indented_block_body) [6751 6818])
                    ("threadpool_class" variable nil (reparse-symbol indented_block_body) [6823 6901])
                    ("backend" variable nil (reparse-symbol indented_block_body) [6906 6946])
                    ("format_context" variable nil (reparse-symbol indented_block_body) [6951 6984])
                    ("threadpool_size" variable nil (reparse-symbol indented_block_body) [6989 7009])
                    ("__init__" function
                       (:suite 
                          ( ("greenlet" code nil (reparse-symbol indented_block_body) [7068 7091])
                            ("if" code nil (reparse-symbol indented_block_body) [7100 7542])
                            ("self" variable nil (reparse-symbol indented_block_body) [7550 7571])
                            ("self" variable nil (reparse-symbol indented_block_body) [7580 7603])
                            ("self" variable nil (reparse-symbol indented_block_body) [7612 7662]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7028 7032])
                            ("loop" variable nil (reparse-symbol function_parameters) [7034 7038])
                            ("default" variable nil (reparse-symbol function_parameters) [7045 7052]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7015 7663])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7681 7685]))                          )
                        (reparse-symbol indented_block_body) [7668 8209])
                    ("handle_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8231 8235])
                            ("context" variable nil (reparse-symbol function_parameters) [8237 8244])
                            ("type" variable nil (reparse-symbol function_parameters) [8246 8250])
                            ("value" variable nil (reparse-symbol function_parameters) [8252 8257])
                            ("tb" variable nil (reparse-symbol function_parameters) [8259 8261]))                          )
                        (reparse-symbol indented_block_body) [8214 8489])
                    ("handle_system_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8518 8522])
                            ("type" variable nil (reparse-symbol function_parameters) [8524 8528])
                            ("value" variable nil (reparse-symbol function_parameters) [8530 8535]))                          )
                        (reparse-symbol indented_block_body) [8494 9123])
                    ("print_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9148 9152])
                            ("context" variable nil (reparse-symbol function_parameters) [9154 9161])
                            ("type" variable nil (reparse-symbol function_parameters) [9163 9167])
                            ("value" variable nil (reparse-symbol function_parameters) [9169 9174])
                            ("tb" variable nil (reparse-symbol function_parameters) [9176 9178]))                          )
                        (reparse-symbol indented_block_body) [9128 9622])
                    ("switch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9638 9642]))                          )
                        (reparse-symbol indented_block_body) [9627 9805])
                    ("switch_out" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9825 9829]))                          )
                        (reparse-symbol indented_block_body) [9810 9928])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9942 9946])
                            ("watcher" variable nil (reparse-symbol function_parameters) [9948 9955]))                          )
                        (reparse-symbol indented_block_body) [9933 10259])
                    ("cancel_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10280 10284])
                            ("watcher" variable nil (reparse-symbol function_parameters) [10286 10293])
                            ("error" variable nil (reparse-symbol function_parameters) [10295 10300]))                          )
                        (reparse-symbol indented_block_body) [10264 10414])
                    ("_cancel_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10436 10440])
                            ("watcher" variable nil (reparse-symbol function_parameters) [10442 10449])
                            ("error" variable nil (reparse-symbol function_parameters) [10451 10456]))                          )
                        (reparse-symbol indented_block_body) [10419 10703])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10716 10720]))                          )
                        (reparse-symbol indented_block_body) [10708 11093])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11406 11410])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11412 11419]))                          
                        :documentation "Wait for the event loop to finish. Exits only when there are
        no more spawned greenlets, started servers, active timeouts or watchers.

        If *timeout* is provided, wait no longer for the specified number of seconds.

        Returns True if exited because the loop finished execution.
        Returns False if exited because of timeout expired.
        ")
                        (reparse-symbol indented_block_body) [11397 12318])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12335 12339])
                            ("destroy_loop" variable nil (reparse-symbol function_parameters) [12341 12353]))                          )
                        (reparse-symbol indented_block_body) [12323 12857])
                    ("_get_resolver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12880 12884]))                          )
                        (reparse-symbol indented_block_body) [12862 13130])
                    ("_set_resolver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13153 13157])
                            ("value" variable nil (reparse-symbol function_parameters) [13159 13164]))                          )
                        (reparse-symbol indented_block_body) [13135 13198])
                    ("_del_resolver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13221 13225]))                          )
                        (reparse-symbol indented_block_body) [13203 13255])
                    ("resolver" variable nil (reparse-symbol indented_block_body) [13260 13324])
                    ("_get_threadpool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13350 13354]))                          )
                        (reparse-symbol indented_block_body) [13330 13636])
                    ("_set_threadpool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13661 13665])
                            ("value" variable nil (reparse-symbol function_parameters) [13667 13672]))                          )
                        (reparse-symbol indented_block_body) [13641 13708])
                    ("_del_threadpool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13733 13737]))                          )
                        (reparse-symbol indented_block_body) [13713 13769])
                    ("threadpool" variable nil (reparse-symbol indented_block_body) [13774 13846]))                  
                :type "class")
                nil [6286 13847])
            ("LoopExit" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [13880 13884]))                  
                :type "class")
                nil [13849 13885])
            ("Waiter" type
               (:documentation "A low level communication utility for greenlets.

    Wrapper around greenlet's ``switch()`` and ``throw()`` calls that makes them somewhat safer:

    * switching will occur only if the waiting greenlet is executing :meth:`get` method currently;
    * any error raised in the greenlet is handled inside :meth:`switch` and :meth:`throw`
    * if :meth:`switch`/:meth:`throw` is called before the receiver calls :meth:`get`, then :class:`Waiter`
      will store the value/exception. The following :meth:`get` will return the value/raise the exception.

    The :meth:`switch` and :meth:`throw` methods must only be called from the :class:`Hub` greenlet.
    The :meth:`get` method must be called from a greenlet other than :class:`Hub`.

        >>> result = Waiter()
        >>> timer = get_hub().loop.timer(0.1)
        >>> timer.start(result.switch, 'hello from Waiter')
        >>> result.get() # blocks for 0.1 seconds
        'hello from Waiter'

    If switch is called before the greenlet gets a chance to call :meth:`get` then
    :class:`Waiter` stores the value.

        >>> result = Waiter()
        >>> timer = get_hub().loop.timer(0.1)
        >>> timer.start(result.switch, 'hi from Waiter')
        >>> sleep(0.2)
        >>> result.get() # returns immediatelly without blocking
        'hi from Waiter'

    .. warning::

        This a limited and dangerous way to communicate between greenlets. It can easily
        leave a greenlet unscheduled forever if used incorrectly. Consider using safer
        :class:`Event`/:class:`AsyncResult`/:class:`Queue` classes.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15513 15567])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15611 15701])
                            ("self" variable nil (reparse-symbol indented_block_body) [15709 15729])
                            ("self" variable nil (reparse-symbol indented_block_body) [15738 15755])
                            ("self" variable nil (reparse-symbol indented_block_body) [15764 15787]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15586 15590])
                            ("hub" variable nil (reparse-symbol function_parameters) [15592 15595]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15573 15788])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15803 15807]))                          )
                        (reparse-symbol indented_block_body) [15793 15897])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15914 15918]))                          )
                        (reparse-symbol indented_block_body) [15902 16289])
                    ("ready" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16304 16308]))                          
                        :documentation "Return true if and only if it holds a value or an exception")
                        (reparse-symbol indented_block_body) [16294 16429])
                    ("successful" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16449 16453]))                          
                        :documentation "Return true if and only if it is ready and holds a value")
                        (reparse-symbol indented_block_body) [16434 16566])
                    ("exc_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16598 16602]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16571 16789])
                    ("switch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16805 16809])
                            ("value" variable nil (reparse-symbol function_parameters) [16811 16816]))                          
                        :documentation "Switch to the greenlet if one's available. Otherwise store the value.")
                        (reparse-symbol indented_block_body) [16794 17320])
                    ("switch_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17341 17345])
                            ("args" variable nil (reparse-symbol function_parameters) [17347 17352]))                          )
                        (reparse-symbol indented_block_body) [17325 17388])
                    ("throw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17403 17407])
                            ("throw_args" variable nil (reparse-symbol function_parameters) [17409 17420]))                          
                        :documentation "Switch to the greenlet with the exception. If there's no greenlet, store the exception.")
                        (reparse-symbol indented_block_body) [17393 17914])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17927 17931]))                          
                        :documentation "If a value/an exception is stored, return/raise it. Otherwise until switch() or throw() is called.")
                        (reparse-symbol indented_block_body) [17919 18502])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18520 18524])
                            ("source" variable nil (reparse-symbol function_parameters) [18526 18532]))                          )
                        (reparse-symbol indented_block_body) [18507 18665]))                  
                :type "class")
                nil [13887 18665])
            ("iwait" function (:arguments 
              ( ("objects" variable nil (reparse-symbol function_parameters) [18854 18861])
                ("timeout" variable nil (reparse-symbol function_parameters) [18863 18870]))              ) nil [18844 19699])
            ("wait" function (:arguments 
              ( ("objects" variable nil (reparse-symbol function_parameters) [19710 19717])
                ("timeout" variable nil (reparse-symbol function_parameters) [19724 19731])
                ("count" variable nil (reparse-symbol function_parameters) [19738 19743]))              ) nil [19701 20066])
            ("linkproxy" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [20097 20128])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20177 20201])
                            ("self" variable nil (reparse-symbol indented_block_body) [20210 20224]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20147 20151])
                            ("callback" variable nil (reparse-symbol function_parameters) [20153 20161])
                            ("obj" variable nil (reparse-symbol function_parameters) [20163 20166]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20134 20225])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20243 20247])
                            ("args" variable nil (reparse-symbol function_parameters) [20249 20254]))                          )
                        (reparse-symbol indented_block_body) [20230 20388]))                  
                :type "class")
                nil [20068 20388])
            ("_NONE" type
               (:superclasses ("object")
                :members 
                  ( ("\"A special thingy you must never pass to any of gevent API\"" code nil (reparse-symbol indented_block_body) [20415 20474])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [20479 20493])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20512 20516]))                          )
                        (reparse-symbol indented_block_body) [20499 20544]))                  
                :type "class")
                nil [20390 20544])
            ("_NONE" variable nil nil [20545 20560]))          
      :file "hub.py"
      :pointmax 20561
      :fsize 20560
      :lastmodtime '(21002 34062 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "os.py"
      :file "os.py"
      :fsize 2731
      :lastmodtime '(21002 34062 0 0))
    (semanticdb-table "greenlet.py"
      :file "greenlet.py"
      :fsize 15658
      :lastmodtime '(21002 34062 0 0))
    (semanticdb-table "wsgi.py"
      :major-mode 'python-mode
      :tags 
        '( ("gevent.pywsgi" include nil nil [1 28])
            ("gevent.pywsgi" include nil nil [29 60])
            ("__all__" variable nil nil [61 86])
            ("del" code nil nil [87 98]))          
      :file "wsgi.py"
      :pointmax 99
      :fsize 98
      :lastmodtime '(21002 34062 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "local.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Greenlet-local objects.

This module is based on `_threading_local.py`__ from the standard library.

__ http://svn.python.org/view/python/trunk/Lib/_threading_local.py?view=markup&pathrev=78336

Greenlet-local objects support the management of greenlet-local data.
If you have data that you want to be local to a greenlet, simply create
a greenlet-local object and use its attributes:

  >>> mydata = local()
  >>> mydata.number = 42
  >>> mydata.number
  42

You can also access the local-object's dictionary:

  >>> mydata.__dict__
  {'number': 42}
  >>> mydata.__dict__.setdefault('widgets', [])
  []
  >>> mydata.widgets
  []

What's important about greenlet-local objects is that their data are
local to a greenlet. If we access the data in a different greenlet:

  >>> log = []
  >>> def f():
  ...     items = mydata.__dict__.items()
  ...     items.sort()
  ...     log.append(items)
  ...     mydata.number = 11
  ...     log.append(mydata.number)
  >>> greenlet = gevent.spawn(f)
  >>> greenlet.join()
  >>> log
  [[], 11]

we get different data.  Furthermore, changes made in the other greenlet
don't affect data seen in this greenlet:

  >>> mydata.number
  42

Of course, values you get from a local object, including a __dict__
attribute, are for whatever greenlet was current at the time the
attribute was read.  For that reason, you generally don't want to save
these values across greenlets, as they apply only to the greenlet they
came from.

You can create custom local objects by subclassing the local class:

  >>> class MyLocal(local):
  ...     number = 2
  ...     initialized = False
  ...     def __init__(self, **kw):
  ...         if self.initialized:
  ...             raise SystemError('__init__ called too many times')
  ...         self.initialized = True
  ...         self.__dict__.update(kw)
  ...     def squared(self):
  ...         return self.number ** 2

This can be useful to support default values, methods and
initialization.  Note that if you define an __init__ method, it will be
called each time the local object is used in a separate greenlet.  This
is necessary to initialize each greenlet's dictionary.

Now if we create a local object:

  >>> mydata = MyLocal(color='red')

Now we have a default number:

  >>> mydata.number
  2

an initial color:

  >>> mydata.color
  'red'
  >>> del mydata.color

And a method that operates on the data:

  >>> mydata.squared()
  4

As before, we can access the data in a separate greenlet:

  >>> log = []
  >>> greenlet = gevent.spawn(f)
  >>> greenlet.join()
  >>> log
  [[('color', 'red'), ('initialized', True)], 11]

without affecting this greenlet's data:

  >>> mydata.number
  2
  >>> mydata.color
  Traceback (most recent call last):
  ...
  AttributeError: 'MyLocal' object has no attribute 'color'

Note that subclasses can define slots, but they are not greenlet
local. They are shared across greenlets::

  >>> class MyLocal(local):
  ...     __slots__ = 'number'

  >>> mydata = MyLocal()
  >>> mydata.number = 42
  >>> mydata.color = 'red'

So, the separate greenlet:

  >>> greenlet = gevent.spawn(f)
  >>> greenlet.join()

affects what we see:

  >>> mydata.number
  11

>>> del mydata
\"\"\"" code nil nil [1 3197])
            ("weakref" include nil nil [3198 3235])
            ("copy" include nil nil [3236 3257])
            ("gevent.hub" include nil nil [3258 3291])
            ("gevent.lock" include nil nil [3292 3321])
            ("__all__" variable nil nil [3323 3342])
            ("_localbase" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3375 3434])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [3452 3455])
                        ("args" variable nil (reparse-symbol function_parameters) [3457 3462])
                        ("kw" variable nil (reparse-symbol function_parameters) [3464 3468]))                      ) (reparse-symbol indented_block_body) [3440 4114]))                  
                :type "class")
                nil [3345 4114])
            ("_init_locals" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4133 4137]))                  )
                nil [4116 4524])
            ("local" type
               (:superclasses ("_localbase")
                :members 
                  ( ("__getattribute__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4577 4581])
                            ("name" variable nil (reparse-symbol function_parameters) [4583 4587]))                          )
                        (reparse-symbol indented_block_body) [4556 5265])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5286 5290])
                            ("name" variable nil (reparse-symbol function_parameters) [5292 5296])
                            ("value" variable nil (reparse-symbol function_parameters) [5298 5303]))                          )
                        (reparse-symbol indented_block_body) [5270 5922])
                    ("__delattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5943 5947])
                            ("name" variable nil (reparse-symbol function_parameters) [5949 5953]))                          )
                        (reparse-symbol indented_block_body) [5927 6558])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6576 6580]))                          )
                        (reparse-symbol indented_block_body) [6563 7070]))                  
                :type "class")
                nil [4526 7070]))          
      :file "local.py"
      :pointmax 7070
      :fsize 7069
      :lastmodtime '(21002 34062 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "coros.py"
      :file "coros.py"
      :fsize 251
      :lastmodtime '(21002 34062 0 0))
    (semanticdb-table "lock.py"
      :file "lock.py"
      :fsize 3077
      :lastmodtime '(21002 34062 0 0)))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!gevent!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
