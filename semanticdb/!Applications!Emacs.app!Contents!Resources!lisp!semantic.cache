;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "winner.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1589 1606])
            ("winner-active-region" function nil nil [1609 1944])
            ("defalias" code nil nil [1946 2030])
            ("defalias" code nil nil [2031 2188])
            ("ring" include nil nil [2190 2205])
            ("winner" customgroup (:user-visible-flag t) nil [2207 2283])
            ("winner-dont-bind-my-keys" variable nil nil [2285 2411])
            ("winner-ring-size" variable (:default-value 200) nil [2413 2542])
            ("winner-boring-buffers" variable (:default-value (quote ("*Completions*"))) nil [2544 2814])
            ("winner-sorted-window-list" function nil nil [2962 3217])
            ("winner-win-data" function nil nil [3219 3425])
            ("winner-currents" variable nil nil [3519 3547])
            ("winner-conf" function nil nil [3604 3695])
            ("winner-remember" function nil nil [3784 3984])
            ("winner-configuration" function (:arguments ("frame")) nil [4016 4175])
            ("winner-ring-alist" variable nil nil [4302 4332])
            ("winner-ring" function (:arguments ("frame")) nil [4393 4637])
            ("winner-last-command" variable nil nil [4740 4772])
            ("winner-last-frames" variable nil nil [4818 4849])
            ("winner-equal" function (:arguments ("a" "b")) nil [4852 4993])
            ("winner-insert-if-new" function (:arguments ("frame")) nil [5102 5584])
            ("winner-modified-list" variable nil nil [5642 5675])
            ("winner-change-fun" function nil nil [5772 5950])
            ("winner-save-old-configurations" function nil nil [6033 6378])
            ("winner-save-unconditionally" function nil nil [6410 6637])
            ("winner-save-conditionally" function nil nil [6733 6839])
            ("winner-set-conf" function (:arguments ("winconf")) nil [7036 7552])
            ("winner-point-alist" variable nil nil [7556 7587])
            ("winner-make-point-alist" function nil nil [7856 8359])
            ("winner-get-point" function (:arguments ("buf" "win")) nil [8361 8922])
            ("winner-set" function (:arguments ("conf")) nil [9159 10684])
            ("winner-mode-hook" variable nil nil [10722 10848])
            ("define-obsolete-variable-alias" code nil nil [10850 10937])
            ("winner-mode-off-hook" variable nil nil [10939 11063])
            ("winner-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (unless winner-dont-bind-my-keys (define-key map [(control c) left] (quote winner-undo)) (define-key map [(control c) right] (quote winner-redo))) map)) nil [11065 11311])
            ("define-minor-mode" code nil nil [11330 11946])
            ("winner-undo-frame" variable nil nil [11981 12011])
            ("winner-pending-undo-ring" variable nil nil [12013 12096])
            ("winner-undo-counter" variable nil nil [12097 12129])
            ("winner-undone-data" variable nil nil [12130 12162])
            ("winner-undo" function (:user-visible-flag t) nil [12196 13073])
            ("winner-undo-this" function nil nil [13079 13806])
            ("winner-redo" function (:user-visible-flag t) nil [13809 14289])
            ("winner" package nil nil [14291 14308]))          
      :file "winner.el.gz"
      :pointmax 14333
      :fsize 4502
      :lastmodtime '(20992 40716 0 0)
      :unmatched-syntax '((close-paren 1606 . 1607) (symbol 1571 . 1588) (open-paren 1570 . 1571)))
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1232 1249])
            ("custom-define-hook" variable nil nil [1251 1400])
            ("custom-dont-initialize" variable nil nil [1402 1585])
            ("custom-current-group-alist" variable nil nil [1587 1700])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1730 2193])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2195 2770])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2772 3539])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3541 4319])
            ("custom-delayed-init-variables" variable nil nil [4321 4418])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4420 5544])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5546 8145])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8147 14220])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14248 17159])
            ("custom-current-group" function nil nil [17188 17277])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17279 18340])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18342 19502])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19504 19850])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19852 20254])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20273 20863])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20865 21576])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21578 22331])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22333 22784])
            ("defalias" code nil nil [22785 22841])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22843 23079])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23081 23231])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23233 23407])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23409 23705])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23707 23993])
            ("custom-variable-p" function (:arguments ("variable")) nil [23995 24428])
            ("define-obsolete-function-alias" code nil nil [24430 24505])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24507 24802])
            ("custom-load-recursion" variable nil nil [24945 25021])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25023 26282])
            ("custom-local-buffer" variable nil nil [26285 26605])
            ("put" code nil nil [26606 26651])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26653 27034])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27036 27460])
            ("custom-quote" function (:arguments ("sexp")) nil [27462 27800])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27802 28965])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [28967 30122])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30124 30596])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32423 32811])
            ("custom-theme-p" function (:arguments ("theme")) nil [32813 32922])
            ("custom-check-theme" function (:arguments ("theme")) nil [32924 33102])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33104 35249])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35251 36021])
            ("custom-set-variables" function (:arguments ("args")) nil [36024 36635])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36637 39312])
            ("custom--sort-vars-table" variable nil nil [39314 39346])
            ("custom--sort-vars-result" variable nil nil [39347 39380])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39382 40914])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [40916 41500])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42096 42717])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42719 43207])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43209 43714])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [43738 44085])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44087 44888])
            ("custom--inhibit-theme-enable" variable nil nil [44890 45176])
            ("provide-theme" function (:arguments ("theme")) nil [45178 45576])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45578 46198])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46200 49076])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49078 49828])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [49830 50095])
            ("custom-available-themes" function nil nil [50097 50629])
            ("custom-theme--load-path" function nil nil [50631 50950])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [50997 52233])
            ("custom-enabled-themes" variable nil nil [52235 53545])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [53547 53665])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [53667 55266])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [55268 55628])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [55630 56023])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56025 56480])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [56482 56754])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [56971 57342])
            ("custom-reset-variables" function (:arguments ("args")) nil [57344 57685])
            ("while" code nil nil [57766 57945])
            ("custom" package nil nil [57947 57964]))          
      :file "custom.el.gz"
      :pointmax 57990
      :fsize 16799
      :lastmodtime '(20988 43681 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "frame.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [932 949])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [952 1434])
            ("window-system-default-frame-alist" variable nil nil [1436 1879])
            ("display-format-alist" variable nil nil [1881 2133])
            ("initial-frame-alist" variable nil nil [2325 3555])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3557 4259])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4261 4730])
            ("frame-initial-frame" variable nil nil [5508 5540])
            ("frame-initial-frame-alist" variable nil nil [5619 5653])
            ("frame-initial-geometry-arguments" variable nil nil [5655 5700])
            ("frame-initialize" function nil nil [5889 7602])
            ("frame-notice-user-settings" variable (:default-value t) nil [7604 7713])
            ("declare-function" code nil nil [7715 7774])
            ("frame-notice-user-settings" function nil nil [7971 19079])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19081 19282])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [19349 20524])
            ("get-other-frame" function nil nil [20526 20784])
            ("next-multiframe-window" function (:user-visible-flag t) nil [20786 21044])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21046 21310])
            ("window-system-for-display" function (:arguments ("display")) nil [21312 21648])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [21650 21919])
            ("declare-function" code nil nil [21921 21978])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [21980 23332])
            ("make-frame-command" function (:user-visible-flag t) nil [23334 23597])
            ("before-make-frame-hook" variable nil nil [23599 23682])
            ("after-make-frame-functions" variable nil nil [23684 23831])
            ("after-setting-font-hook" variable nil nil [23833 23929])
            ("define-obsolete-function-alias" code nil nil [23959 24021])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24023 24191])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [24193 27840])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [27842 28141])
            ("minibuffer-frame-list" function nil nil [28143 28336])
            ("get-device-terminal" function (:arguments ("device")) nil [28388 29141])
            ("frames-on-display-list" function (:arguments ("device")) nil [29143 29585])
            ("framep-on-display" function (:arguments ("terminal")) nil [29587 30026])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [30028 30889])
            ("declare-function" code nil nil [30891 30940])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [30942 32052])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32054 33033])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [33035 33265])
            ("suspend-frame" function (:user-visible-flag t) nil [33267 33744])
            ("make-frame-names-alist" function nil nil [33746 34152])
            ("frame-name-history" variable nil nil [34154 34185])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [34186 34877])
            ("frame-background-mode" variable nil nil [34904 35484])
            ("declare-function" code nil nil [35486 35580])
            ("inhibit-frame-set-background-mode" variable nil nil [35582 35628])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [35630 38528])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [38530 39046])
            ("current-frame-configuration" function nil nil [39077 39673])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [39675 41680])
            ("frame-height" function (:arguments ("frame")) nil [41775 42441])
            ("frame-width" function (:arguments ("frame")) nil [42443 42648])
            ("declare-function" code nil nil [42650 42755])
            ("define-obsolete-function-alias" code nil nil [42757 42830])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [42832 46139])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [46141 46392])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [46394 46864])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [46866 47336])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47338 47824])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47826 48292])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48294 48676])
            ("define-minor-mode" code nil nil [48678 49558])
            ("define-minor-mode" code nil nil [49560 50401])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [50403 50779])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [50781 51308])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [51310 51993])
            ("declare-function" code nil nil [52031 52074])
            ("display-mouse-p" function (:arguments ("display")) nil [52076 52741])
            ("display-popup-menus-p" function (:arguments ("display")) nil [52743 53128])
            ("display-graphic-p" function (:arguments ("display")) nil [53130 53587])
            ("display-images-p" function (:arguments ("display")) nil [53589 53867])
            ("defalias" code nil nil [53869 53921])
            ("defalias" code nil nil [53922 53973])
            ("display-selections-p" function (:arguments ("display")) nil [53975 54619])
            ("declare-function" code nil nil [54621 54687])
            ("display-screens" function (:arguments ("display")) nil [54689 54940])
            ("declare-function" code nil nil [54942 55013])
            ("display-pixel-height" function (:arguments ("display")) nil [55015 55629])
            ("declare-function" code nil nil [55631 55701])
            ("display-pixel-width" function (:arguments ("display")) nil [55703 56312])
            ("display-mm-dimensions-alist" variable nil nil [56314 56961])
            ("declare-function" code nil nil [56963 57031])
            ("display-mm-height" function (:arguments ("display")) nil [57033 57732])
            ("declare-function" code nil nil [57734 57801])
            ("display-mm-width" function (:arguments ("display")) nil [57803 58498])
            ("declare-function" code nil nil [58500 58572])
            ("display-backing-store" function (:arguments ("display")) nil [58677 59078])
            ("declare-function" code nil nil [59080 59149])
            ("display-save-under" function (:arguments ("display")) nil [59151 59431])
            ("declare-function" code nil nil [59433 59498])
            ("display-planes" function (:arguments ("display")) nil [59500 59824])
            ("declare-function" code nil nil [59826 59896])
            ("display-color-cells" function (:arguments ("display")) nil [59898 60226])
            ("declare-function" code nil nil [60228 60299])
            ("display-visual-class" function (:arguments ("display")) nil [60301 60774])
            ("declare-function" code nil nil [60776 60862])
            ("declare-function" code nil nil [60863 60952])
            ("declare-function" code nil nil [60953 61041])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [61043 62844])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [62876 64746])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [64748 66007])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [66011 67063])
            ("define-obsolete-variable-alias" code nil nil [67108 67194])
            ("cursor" customgroup (:user-visible-flag t) nil [67218 67303])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [67305 67433])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [67435 67553])
            ("blink-cursor-blinks" variable (:default-value 10) nil [67555 67752])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [67754 67853])
            ("blink-cursor-idle-timer" variable nil nil [67855 68030])
            ("blink-cursor-timer" variable nil nil [68032 68194])
            ("blink-cursor-start" function nil nil [68196 68895])
            ("blink-cursor-timer-function" function nil nil [68897 69392])
            ("blink-cursor-end" function nil nil [69395 69790])
            ("blink-cursor-suspend" function nil nil [69792 70214])
            ("blink-cursor-check" function nil nil [70216 70701])
            ("define-obsolete-variable-alias" code nil nil [70703 70775])
            ("define-minor-mode" code nil nil [70777 71771])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [71809 72620])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [72622 73442])
            ("define-key" code nil nil [73465 73513])
            ("define-key" code nil nil [73514 73563])
            ("define-key" code nil nil [73564 73606])
            ("define-key" code nil nil [73607 73648])
            ("define-key" code nil nil [73649 73703])
            ("define-key" code nil nil [73704 73764])
            ("define-key" code nil nil [73765 73825])
            ("define-obsolete-variable-alias" code nil nil [73875 73957])
            ("make-variable-buffer-local" code nil nil [73959 74013])
            ("make-obsolete-variable" code nil nil [74040 74134])
            ("frame" package nil nil [74136 74152]))          
      :file "frame.el.gz"
      :pointmax 74177
      :fsize 19518
      :lastmodtime '(21001 55684 0 0)
      :unmatched-syntax '((close-paren 949 . 950) (symbol 914 . 931) (open-paren 913 . 914))))
  :file "!Applications!Emacs.app!Contents!Resources!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
