;; Object terminal/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "terminal/"
  :tables
  (list
    (semanticdb-table "embed.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
An embedded IPython shell.

Authors:

* Brian Granger
* Fernando Perez

Notes
-----
\"\"\"" code nil nil [19 110])
            ("__future__" include nil nil [633 670])
            ("sys" include nil nil [672 682])
            ("warnings" include nil nil [683 698])
            ("try" code nil nil [842 941])
            ("IPython.core" include nil nil [942 974])
            ("IPython.core.magic" include nil nil [975 1038])
            ("IPython.frontend.terminal.interactiveshell" include nil nil [1039 1118])
            ("IPython.frontend.terminal.ipapp" include nil nil [1119 1182])
            ("IPython.utils.traitlets" include nil nil [1184 1240])
            ("IPython.utils.io" include nil nil [1241 1280])
            ("EmbeddedMagics" type
               (:superclasses ("Magics")
                :members 
                  ( ("kill_embedded" function
                       (:parent "dummy"
                        :decorators 
                          ( ("line_magic" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1615 1619])
                            ("parameter_s" variable nil (reparse-symbol function_parameters) [1621 1632]))                          
                        :documentation "%kill_embedded : deactivate for good the current embedded IPython.

        This function (after asking for confirmation) sets an internal flag so
        that an embedded IPython will never activate again.  This is useful to
        permanently disable a shell that is being called inside a loop: once
        you've figured out what you needed from it, you may then kill it and
        the program will then continue to run without the interactive shell
        interfering again.
        ")
                        (reparse-symbol indented_block_body) [1581 2446]))                  
                :type "class")
                nil [1546 2446])
            ("InteractiveShellEmbed" type
               (:superclasses ("TerminalInteractiveShell")
                :members 
                  ( ("dummy_mode" variable nil (reparse-symbol indented_block_body) [2508 2532])
                    ("exit_msg" variable nil (reparse-symbol indented_block_body) [2537 2559])
                    ("embedded" variable nil (reparse-symbol indented_block_body) [2564 2586])
                    ("embedded_active" variable nil (reparse-symbol indented_block_body) [2591 2620])
                    ("display_banner" variable nil (reparse-symbol indented_block_body) [2725 2753])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3031 3219])
                            ("super" code nil (reparse-symbol indented_block_body) [3228 3525])
                            ("self" variable nil (reparse-symbol indented_block_body) [3535 3559])
                            ("sys" variable nil (reparse-symbol indented_block_body) [3664 3852]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2772 2776])
                            ("config" variable nil (reparse-symbol function_parameters) [2778 2784])
                            ("ipython_dir" variable nil (reparse-symbol function_parameters) [2791 2802])
                            ("user_ns" variable nil (reparse-symbol function_parameters) [2809 2816])
                            ("user_module" variable nil (reparse-symbol function_parameters) [2840 2851])
                            ("custom_exceptions" variable nil (reparse-symbol function_parameters) [2858 2875])
                            ("usage" variable nil (reparse-symbol function_parameters) [2904 2909])
                            ("banner1" variable nil (reparse-symbol function_parameters) [2916 2923])
                            ("banner2" variable nil (reparse-symbol function_parameters) [2930 2937])
                            ("display_banner" variable nil (reparse-symbol function_parameters) [2961 2975])
                            ("exit_msg" variable nil (reparse-symbol function_parameters) [2982 2990])
                            ("user_global_ns" variable nil (reparse-symbol function_parameters) [2996 3010]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2759 3853])
                    ("init_sys_modules" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3879 3883]))                          )
                        (reparse-symbol indented_block_body) [3858 3899])
                    ("init_magics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3920 3924]))                          )
                        (reparse-symbol indented_block_body) [3904 4029])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4047 4051])
                            ("header" variable nil (reparse-symbol function_parameters) [4053 4059])
                            ("local_ns" variable nil (reparse-symbol function_parameters) [4064 4072])
                            ("module" variable nil (reparse-symbol function_parameters) [4079 4085])
                            ("dummy" variable nil (reparse-symbol function_parameters) [4092 4097])
                            ("stack_depth" variable nil (reparse-symbol function_parameters) [4121 4132])
                            ("global_ns" variable nil (reparse-symbol function_parameters) [4136 4145]))                          
                        :documentation "Activate the interactive interpreter.

        __call__(self,header='',local_ns=None,module=None,dummy=None) -> Start
        the interpreter shell with the given local and global namespaces, and
        optionally print a header string at startup.

        The shell can be globally activated/deactivated using the
        dummy_mode attribute. This allows you to turn off a shell used
        for debugging globally.

        However, *each* time you call the shell you can override the current
        state of dummy_mode with the optional keyword parameter 'dummy'. For
        example, if you set dummy mode on with IPShell.dummy_mode = True, you
        can still have a specific call work by making it as IPShell(dummy=False).
        ")
                        (reparse-symbol indented_block_body) [4034 5976])
                    ("mainloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5994 5998])
                            ("local_ns" variable nil (reparse-symbol function_parameters) [6000 6008])
                            ("module" variable nil (reparse-symbol function_parameters) [6015 6021])
                            ("stack_depth" variable nil (reparse-symbol function_parameters) [6028 6039])
                            ("display_banner" variable nil (reparse-symbol function_parameters) [6060 6074])
                            ("global_ns" variable nil (reparse-symbol function_parameters) [6081 6090]))                          
                        :documentation "Embeds IPython into a running python program.

        Input:

          - header: An optional header message can be specified.

          - local_ns, module: working local namespace (a dict) and module (a
          module or similar object). If given as None, they are automatically
          taken from the scope where the shell was called, so that
          program variables become visible.

          - stack_depth: specifies how many levels in the stack to go to
          looking for namespaces (when local_ns or module is None).  This
          allows an intermediate caller to make sure that this function gets
          the namespace from the intended level in the stack.  By default (0)
          it will get its locals and globals from the immediate caller.

        Warning: it's possible to use this in a program which is being run by
        IPython itself (via %run), but some funny things will happen (a few
        globals get overwritten). In the future this will be cleaned up, as
        there is no fundamental reason why it can't work perfectly.")
                        (reparse-symbol indented_block_body) [5981 9973]))                  
                :type "class")
                nil [2448 9973])
            ("_embedded_shell" variable nil nil [9974 9996])
            ("embed" function
               (:documentation "Call this to embed IPython at the current point in your program.

    The first invocation of this will create an :class:`InteractiveShellEmbed`
    instance and then call it.  Consecutive calls just call the already
    created instance.

    Here is a simple example::

        from IPython import embed
        a = 10
        b = 20
        embed('First time')
        c = 30
        d = 40
        embed

    Full customization can be done by passing a :class:`Struct` in as the
    config argument.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [10009 10017]))                  )
                nil [9999 10946]))          
      :file "embed.py"
      :pointmax 10946
      :fsize 10945
      :lastmodtime '(21002 33909 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "interactiveshell.py"
      :file "interactiveshell.py"
      :fsize 27792
      :lastmodtime '(21002 33909 0 0))
    (semanticdb-table "ipapp.py"
      :file "ipapp.py"
      :fsize 14433
      :lastmodtime '(21002 33909 0 0)))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!IPython!frontend!terminal!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
