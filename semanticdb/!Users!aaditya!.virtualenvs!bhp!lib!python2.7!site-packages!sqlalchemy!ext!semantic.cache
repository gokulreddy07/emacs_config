;; Object ext/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ext/"
  :tables
  (list
    (semanticdb-table "associationproxy.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Contain the ``AssociationProxy`` class.

The ``AssociationProxy`` is a Python property object which provides
transparent proxied access to the endpoint of an association object.

See the example ``examples/association/proxied_association.py``.

\"\"\"" code nil nil [243 494])
            ("itertools" include nil nil [495 511])
            ("operator" include nil nil [512 527])
            ("weakref" include nil nil [528 542])
            ("util" include nil nil [551 572])
            ("orm" include nil nil [551 572])
            ("exc" include nil nil [551 572])
            ("interfaces" include nil nil [584 614])
            ("collections" include nil nil [584 614])
            ("not_" include nil nil [626 637])
            ("association_proxy" function
               (:documentation "Return a Python property implementing a view of a target
    attribute which references an attribute on members of the
    target.

    The returned value is an instance of :class:`.AssociationProxy`.

    Implements a Python property representing a relationship as a collection
    of simpler values, or a scalar value.  The proxied property will mimic
    the collection type of the target (list, dict or set), or, in the case of
    a one to one relationship, a simple scalar value.

    :param target_collection: Name of the attribute we'll proxy to.
      This attribute is typically mapped by
      :func:`~sqlalchemy.orm.relationship` to link to a target collection, but
      can also be a many-to-one or non-scalar relationship.

    :param attr: Attribute on the associated instance or instances we'll
      proxy for.

      For example, given a target collection of [obj1, obj2], a list created
      by this proxy property would look like [getattr(obj1, *attr*),
      getattr(obj2, *attr*)]

      If the relationship is one-to-one or otherwise uselist=False, then
      simply: getattr(obj, *attr*)

    :param creator: optional.

      When new items are added to this proxied collection, new instances of
      the class collected by the target collection will be created.  For list
      and set collections, the target class constructor will be called with
      the 'value' for the new instance.  For dict types, two arguments are
      passed: key and value.

      If you want to construct instances differently, supply a *creator*
      function that takes arguments as above and returns instances.

      For scalar relationships, creator() will be called if the target is None.
      If the target is present, set operations are proxied to setattr() on the
      associated object.

      If you have an associated object with multiple attributes, you may set
      up multiple association proxies mapping to different attributes.  See
      the unit tests for examples, and for examples of how creator() functions
      can be used to construct the scalar relationship on-demand in this
      situation.

    :param \\*\\*kw: Passes along any other keyword arguments to
      :class:`.AssociationProxy`.

    "
                :arguments 
                  ( ("target_collection" variable nil (reparse-symbol function_parameters) [662 679])
                    ("attr" variable nil (reparse-symbol function_parameters) [681 685])
                    ("kw" variable nil (reparse-symbol function_parameters) [687 691]))                  )
                nil [640 2997])
            ("ASSOCIATION_PROXY" variable nil nil [2999 3051])
            ("\"\"\"Symbol indicating an :class:`_InspectionAttr` that's
    of type :class:`.AssociationProxy`.

   Is assigned to the :attr:`._InspectionAttr.extension_type`
   attibute.

\"\"\"" code nil nil [3052 3228])
            ("AssociationProxy" type
               (:documentation "A descriptor that presents a read/write view of an object attribute."
                :superclasses ("interfaces._InspectionAttr")
                :members 
                  ( ("is_attribute" variable nil (reparse-symbol indented_block_body) [3366 3386])
                    ("extension_type" variable nil (reparse-symbol indented_block_body) [3391 3425])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a new :class:`.AssociationProxy`.

        The :func:`.association_proxy` function is provided as the usual
        entrypoint here, though :class:`.AssociationProxy` can be instantiated
        and/or subclassed directly.

        :param target_collection: Name of the collection we'll proxy to,
          usually created with :func:`.relationship`.

        :param attr: Attribute on the collected instances we'll proxy
          for.  For example, given a target collection of [obj1, obj2], a
          list created by this proxy property would look like
          [getattr(obj1, attr), getattr(obj2, attr)]

        :param creator: Optional. When new items are added to this proxied
          collection, new instances of the class collected by the target
          collection will be created.  For list and set collections, the
          target class constructor will be called with the 'value' for the
          new instance.  For dict types, two arguments are passed:
          key and value.

          If you want to construct instances differently, supply a 'creator'
          function that takes arguments as above and returns instances.

        :param getset_factory: Optional.  Proxied attribute access is
          automatically handled by routines that get and set values based on
          the `attr` argument for this proxy.

          If you would like to customize this behavior, you may supply a
          `getset_factory` callable that produces a tuple of `getter` and
          `setter` functions.  The factory is called with two arguments, the
          abstract type of the underlying collection and this proxy instance.

        :param proxy_factory: Optional.  The type of collection to emulate is
          determined by sniffing the target collection.  If your collection
          type can't be determined by duck typing or you'd like to use a
          different collection implementation, you may supply a factory
          function to produce those collections.  Only applicable to
          non-scalar relationships.

        :param proxy_bulk_set: Optional, use with proxy_factory.  See
          the _set() method for details.

        \"\"\"" code nil (reparse-symbol indented_block_body) [3595 5784])
                            ("self" variable nil (reparse-symbol indented_block_body) [5793 5835])
                            ("self" variable nil (reparse-symbol indented_block_body) [5844 5866])
                            ("self" variable nil (reparse-symbol indented_block_body) [5875 5897])
                            ("self" variable nil (reparse-symbol indented_block_body) [5906 5942])
                            ("self" variable nil (reparse-symbol indented_block_body) [5951 5985])
                            ("self" variable nil (reparse-symbol indented_block_body) [5994 6030])
                            ("self" variable nil (reparse-symbol indented_block_body) [6040 6064])
                            ("self" code nil (reparse-symbol indented_block_body) [6073 6161])
                            ("self" variable nil (reparse-symbol indented_block_body) [6170 6198]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3445 3449])
                            ("target_collection" variable nil (reparse-symbol function_parameters) [3451 3468])
                            ("attr" variable nil (reparse-symbol function_parameters) [3470 3474])
                            ("creator" variable nil (reparse-symbol function_parameters) [3476 3483])
                            ("getset_factory" variable nil (reparse-symbol function_parameters) [3507 3521])
                            ("proxy_factory" variable nil (reparse-symbol function_parameters) [3528 3541])
                            ("proxy_bulk_set" variable nil (reparse-symbol function_parameters) [3565 3579]))                          
                        :documentation "Construct a new :class:`.AssociationProxy`.

        The :func:`.association_proxy` function is provided as the usual
        entrypoint here, though :class:`.AssociationProxy` can be instantiated
        and/or subclassed directly.

        :param target_collection: Name of the collection we'll proxy to,
          usually created with :func:`.relationship`.

        :param attr: Attribute on the collected instances we'll proxy
          for.  For example, given a target collection of [obj1, obj2], a
          list created by this proxy property would look like
          [getattr(obj1, attr), getattr(obj2, attr)]

        :param creator: Optional. When new items are added to this proxied
          collection, new instances of the class collected by the target
          collection will be created.  For list and set collections, the
          target class constructor will be called with the 'value' for the
          new instance.  For dict types, two arguments are passed:
          key and value.

          If you want to construct instances differently, supply a 'creator'
          function that takes arguments as above and returns instances.

        :param getset_factory: Optional.  Proxied attribute access is
          automatically handled by routines that get and set values based on
          the `attr` argument for this proxy.

          If you would like to customize this behavior, you may supply a
          `getset_factory` callable that produces a tuple of `getter` and
          `setter` functions.  The factory is called with two arguments, the
          abstract type of the underlying collection and this proxy instance.

        :param proxy_factory: Optional.  The type of collection to emulate is
          determined by sniffing the target collection.  If your collection
          type can't be determined by duck typing or you'd like to use a
          different collection implementation, you may supply a factory
          function to produce those collections.  Only applicable to
          non-scalar relationships.

        :param proxy_bulk_set: Optional, use with proxy_factory.  See
          the _set() method for details.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3432 6199])
                    ("remote_attr" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6234 6238]))                          
                        :documentation "The 'remote' :class:`.MapperProperty` referenced by this
        :class:`.AssociationProxy`.

        .. versionadded:: 0.7.3

        See also:

        :attr:`.AssociationProxy.attr`

        :attr:`.AssociationProxy.local_attr`

        ")
                        (reparse-symbol indented_block_body) [6204 6555])
                    ("local_attr" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6589 6593]))                          
                        :documentation "The 'local' :class:`.MapperProperty` referenced by this
        :class:`.AssociationProxy`.

        .. versionadded:: 0.7.3

        See also:

        :attr:`.AssociationProxy.attr`

        :attr:`.AssociationProxy.remote_attr`

        ")
                        (reparse-symbol indented_block_body) [6560 6917])
                    ("attr" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6945 6949]))                          
                        :documentation "Return a tuple of ``(local_attr, remote_attr)``.

        This attribute is convenient when specifying a join
        using :meth:`.Query.join` across two relationships::

            sess.query(Parent).join(*Parent.proxied.attr)

        .. versionadded:: 0.7.3

        See also:

        :attr:`.AssociationProxy.local_attr`

        :attr:`.AssociationProxy.remote_attr`

        ")
                        (reparse-symbol indented_block_body) [6922 7402])
                    ("_get_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7425 7429]))                          )
                        (reparse-symbol indented_block_body) [7407 7539])
                    ("target_class" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7589 7593]))                          
                        :documentation "The intermediary class handled by this :class:`.AssociationProxy`.

        Intercepted append/set/assignment events will result
        in the generation of new instances of this class.

        ")
                        (reparse-symbol indented_block_body) [7544 7857])
                    ("scalar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7901 7905]))                          
                        :documentation "Return ``True`` if this :class:`.AssociationProxy` proxies a scalar
        relationship on the local side.")
                        (reparse-symbol indented_block_body) [7862 8170])
                    ("_value_is_scalar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8224 8228]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8175 8338])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8355 8359])
                            ("obj" variable nil (reparse-symbol function_parameters) [8361 8364])
                            ("class_" variable nil (reparse-symbol function_parameters) [8366 8372]))                          )
                        (reparse-symbol indented_block_body) [8343 9124])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9141 9145])
                            ("obj" variable nil (reparse-symbol function_parameters) [9147 9150])
                            ("values" variable nil (reparse-symbol function_parameters) [9152 9158]))                          )
                        (reparse-symbol indented_block_body) [9129 9730])
                    ("__delete__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9750 9754])
                            ("obj" variable nil (reparse-symbol function_parameters) [9756 9759]))                          )
                        (reparse-symbol indented_block_body) [9735 9873])
                    ("_initialize_scalar_accessors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9911 9915]))                          )
                        (reparse-symbol indented_block_body) [9878 10123])
                    ("_default_getset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10148 10152])
                            ("collection_class" variable nil (reparse-symbol function_parameters) [10154 10170]))                          )
                        (reparse-symbol indented_block_body) [10128 10439])
                    ("_new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10453 10457])
                            ("lazy_collection" variable nil (reparse-symbol function_parameters) [10459 10474]))                          )
                        (reparse-symbol indented_block_body) [10444 11703])
                    ("_inflate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11721 11725])
                            ("proxy" variable nil (reparse-symbol function_parameters) [11727 11732]))                          )
                        (reparse-symbol indented_block_body) [11708 12095])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12109 12113])
                            ("proxy" variable nil (reparse-symbol function_parameters) [12115 12120])
                            ("values" variable nil (reparse-symbol function_parameters) [12122 12128]))                          )
                        (reparse-symbol indented_block_body) [12100 12597])
                    ("_comparator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12632 12636]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12602 12686])
                    ("any" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12699 12703])
                            ("criterion" variable nil (reparse-symbol function_parameters) [12705 12714])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12721 12729]))                          
                        :documentation "Produce a proxied 'any' expression using EXISTS.

        This expression will be a composed product
        using the :meth:`.RelationshipProperty.Comparator.any`
        and/or :meth:`.RelationshipProperty.Comparator.has`
        operators of the underlying proxied attributes.

        ")
                        (reparse-symbol indented_block_body) [12691 13718])
                    ("has" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13731 13735])
                            ("criterion" variable nil (reparse-symbol function_parameters) [13737 13746])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13753 13761]))                          
                        :documentation "Produce a proxied 'has' expression using EXISTS.

        This expression will be a composed product
        using the :meth:`.RelationshipProperty.Comparator.any`
        and/or :meth:`.RelationshipProperty.Comparator.has`
        operators of the underlying proxied attributes.

        ")
                        (reparse-symbol indented_block_body) [13723 14239])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14257 14261])
                            ("obj" variable nil (reparse-symbol function_parameters) [14263 14266]))                          
                        :documentation "Produce a proxied 'contains' expression using EXISTS.

        This expression will be a composed product
        using the :meth:`.RelationshipProperty.Comparator.any`
        , :meth:`.RelationshipProperty.Comparator.has`,
        and/or :meth:`.RelationshipProperty.Comparator.contains`
        operators of the underlying proxied attributes.
        ")
                        (reparse-symbol indented_block_body) [14244 14902])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14918 14922])
                            ("obj" variable nil (reparse-symbol function_parameters) [14924 14927]))                          )
                        (reparse-symbol indented_block_body) [14907 14992])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15008 15012])
                            ("obj" variable nil (reparse-symbol function_parameters) [15014 15017]))                          )
                        (reparse-symbol indented_block_body) [14997 15058]))                  
                :type "class")
                nil [3230 15058])
            ("_lazy_collection" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15137 15164])
                            ("self" variable nil (reparse-symbol indented_block_body) [15173 15193]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15109 15113])
                            ("obj" variable nil (reparse-symbol function_parameters) [15115 15118])
                            ("target" variable nil (reparse-symbol function_parameters) [15120 15126]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15096 15194])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15212 15216]))                          )
                        (reparse-symbol indented_block_body) [15199 15449])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15471 15475]))                          )
                        (reparse-symbol indented_block_body) [15454 15536])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15558 15562])
                            ("state" variable nil (reparse-symbol function_parameters) [15564 15569]))                          )
                        (reparse-symbol indented_block_body) [15541 15655]))                  
                :type "class")
                nil [15060 15655])
            ("_AssociationCollection" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructs an _AssociationCollection.

        This will always be a subclass of either _AssociationList,
        _AssociationSet, or _AssociationDict.

        lazy_collection
          A callable returning a list-based collection of entities (usually an
          object attribute managed by a SQLAlchemy relationship())

        creator
          A function that creates new target entities.  Given one parameter:
          value.  This assertion is assumed::

            obj = creator(somevalue)
            assert getter(obj) == somevalue

        getter
          A function.  Given an associated object, return the 'value'.

        setter
          A function.  Given an associated object and a value, store that
          value on the object.

        \"\"\"" code nil (reparse-symbol indented_block_body) [15777 16545])
                            ("self" variable nil (reparse-symbol indented_block_body) [16554 16592])
                            ("self" variable nil (reparse-symbol indented_block_body) [16601 16623])
                            ("self" variable nil (reparse-symbol indented_block_body) [16632 16652])
                            ("self" variable nil (reparse-symbol indented_block_body) [16661 16681])
                            ("self" variable nil (reparse-symbol indented_block_body) [16690 16710]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15712 15716])
                            ("lazy_collection" variable nil (reparse-symbol function_parameters) [15718 15733])
                            ("creator" variable nil (reparse-symbol function_parameters) [15735 15742])
                            ("getter" variable nil (reparse-symbol function_parameters) [15744 15750])
                            ("setter" variable nil (reparse-symbol function_parameters) [15752 15758])
                            ("parent" variable nil (reparse-symbol function_parameters) [15760 15766]))                          
                        :documentation "Constructs an _AssociationCollection.

        This will always be a subclass of either _AssociationList,
        _AssociationSet, or _AssociationDict.

        lazy_collection
          A callable returning a list-based collection of entities (usually an
          object attribute managed by a SQLAlchemy relationship())

        creator
          A function that creates new target entities.  Given one parameter:
          value.  This assertion is assumed::

            obj = creator(somevalue)
            assert getter(obj) == somevalue

        getter
          A function.  Given an associated object, return the 'value'.

        setter
          A function.  Given an associated object and a value, store that
          value on the object.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15699 16711])
                    ("col" variable nil (reparse-symbol indented_block_body) [16716 16767])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16785 16789]))                          )
                        (reparse-symbol indented_block_body) [16773 16821])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16842 16846]))                          )
                        (reparse-symbol indented_block_body) [16826 16879])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16901 16905]))                          )
                        (reparse-symbol indented_block_body) [16884 16988])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17010 17014])
                            ("state" variable nil (reparse-symbol function_parameters) [17016 17021]))                          )
                        (reparse-symbol indented_block_body) [16993 17153]))                  
                :type "class")
                nil [15657 17153])
            ("_AssociationList" type
               (:documentation "Generic, converting, list-to-list proxy."
                :superclasses ("_AssociationCollection")
                :members 
                  ( ("_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17271 17275])
                            ("value" variable nil (reparse-symbol function_parameters) [17277 17282]))                          )
                        (reparse-symbol indented_block_body) [17259 17320])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17334 17338])
                            ("object" variable nil (reparse-symbol function_parameters) [17340 17346]))                          )
                        (reparse-symbol indented_block_body) [17325 17384])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17398 17402])
                            ("object" variable nil (reparse-symbol function_parameters) [17404 17410])
                            ("value" variable nil (reparse-symbol function_parameters) [17412 17417]))                          )
                        (reparse-symbol indented_block_body) [17389 17462])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17483 17487])
                            ("index" variable nil (reparse-symbol function_parameters) [17489 17494]))                          )
                        (reparse-symbol indented_block_body) [17467 17539])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17560 17564])
                            ("index" variable nil (reparse-symbol function_parameters) [17566 17571])
                            ("value" variable nil (reparse-symbol function_parameters) [17573 17578]))                          )
                        (reparse-symbol indented_block_body) [17544 18601])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18622 18626])
                            ("index" variable nil (reparse-symbol function_parameters) [18628 18633]))                          )
                        (reparse-symbol indented_block_body) [18606 18664])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18686 18690])
                            ("value" variable nil (reparse-symbol function_parameters) [18692 18697]))                          )
                        (reparse-symbol indented_block_body) [18669 18867])
                    ("__getslice__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18889 18893])
                            ("start" variable nil (reparse-symbol function_parameters) [18895 18900])
                            ("end" variable nil (reparse-symbol function_parameters) [18902 18905]))                          )
                        (reparse-symbol indented_block_body) [18872 18977])
                    ("__setslice__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18999 19003])
                            ("start" variable nil (reparse-symbol function_parameters) [19005 19010])
                            ("end" variable nil (reparse-symbol function_parameters) [19012 19015])
                            ("values" variable nil (reparse-symbol function_parameters) [19017 19023]))                          )
                        (reparse-symbol indented_block_body) [18982 19116])
                    ("__delslice__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19138 19142])
                            ("start" variable nil (reparse-symbol function_parameters) [19144 19149])
                            ("end" variable nil (reparse-symbol function_parameters) [19151 19154]))                          )
                        (reparse-symbol indented_block_body) [19121 19189])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19207 19211]))                          
                        :documentation "Iterate over proxied values.

        For the actual domain objects, iterate over .col instead or
        just use the underlying collection directly from its property
        on the parent.
        ")
                        (reparse-symbol indented_block_body) [19194 19525])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19541 19545])
                            ("value" variable nil (reparse-symbol function_parameters) [19547 19552]))                          )
                        (reparse-symbol indented_block_body) [19530 19620])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19635 19639])
                            ("value" variable nil (reparse-symbol function_parameters) [19641 19646]))                          )
                        (reparse-symbol indented_block_body) [19625 19754])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19770 19774])
                            ("values" variable nil (reparse-symbol function_parameters) [19776 19782]))                          )
                        (reparse-symbol indented_block_body) [19759 19837])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19853 19857])
                            ("index" variable nil (reparse-symbol function_parameters) [19859 19864])
                            ("value" variable nil (reparse-symbol function_parameters) [19866 19871]))                          )
                        (reparse-symbol indented_block_body) [19842 19928])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19941 19945])
                            ("index" variable nil (reparse-symbol function_parameters) [19947 19952]))                          )
                        (reparse-symbol indented_block_body) [19933 20006])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20022 20026])
                            ("value" variable nil (reparse-symbol function_parameters) [20028 20033]))                          )
                        (reparse-symbol indented_block_body) [20011 20205])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20222 20226]))                          
                        :documentation "Not supported, use reversed(mylist)")
                        (reparse-symbol indented_block_body) [20210 20314])
                    ("sort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20328 20332]))                          
                        :documentation "Not supported, use sorted(mylist)")
                        (reparse-symbol indented_block_body) [20319 20418])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20433 20437]))                          )
                        (reparse-symbol indented_block_body) [20423 20478])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20494 20498])
                            ("other" variable nil (reparse-symbol function_parameters) [20500 20505]))                          )
                        (reparse-symbol indented_block_body) [20483 20543])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20559 20563])
                            ("other" variable nil (reparse-symbol function_parameters) [20565 20570]))                          )
                        (reparse-symbol indented_block_body) [20548 20608])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20624 20628])
                            ("other" variable nil (reparse-symbol function_parameters) [20630 20635]))                          )
                        (reparse-symbol indented_block_body) [20613 20672])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20688 20692])
                            ("other" variable nil (reparse-symbol function_parameters) [20694 20699]))                          )
                        (reparse-symbol indented_block_body) [20677 20737])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20753 20757])
                            ("other" variable nil (reparse-symbol function_parameters) [20759 20764]))                          )
                        (reparse-symbol indented_block_body) [20742 20801])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20817 20821])
                            ("other" variable nil (reparse-symbol function_parameters) [20823 20828]))                          )
                        (reparse-symbol indented_block_body) [20806 20866])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20883 20887])
                            ("other" variable nil (reparse-symbol function_parameters) [20889 20894]))                          )
                        (reparse-symbol indented_block_body) [20871 20935])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20952 20956])
                            ("iterable" variable nil (reparse-symbol function_parameters) [20958 20966]))                          )
                        (reparse-symbol indented_block_body) [20940 21111])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21129 21133])
                            ("iterable" variable nil (reparse-symbol function_parameters) [21135 21143]))                          )
                        (reparse-symbol indented_block_body) [21116 21288])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21305 21309])
                            ("n" variable nil (reparse-symbol function_parameters) [21311 21312]))                          )
                        (reparse-symbol indented_block_body) [21293 21414])
                    ("__rmul__" variable nil (reparse-symbol indented_block_body) [21418 21436])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21455 21459])
                            ("iterable" variable nil (reparse-symbol function_parameters) [21461 21469]))                          )
                        (reparse-symbol indented_block_body) [21442 21522])
                    ("__imul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21540 21544])
                            ("n" variable nil (reparse-symbol function_parameters) [21546 21547]))                          )
                        (reparse-symbol indented_block_body) [21527 22043])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22057 22061]))                          )
                        (reparse-symbol indented_block_body) [22048 22090])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22108 22112]))                          )
                        (reparse-symbol indented_block_body) [22095 22147])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22165 22169]))                          )
                        (reparse-symbol indented_block_body) [22152 22247])
                    ("for" code nil (reparse-symbol indented_block_body) [22252 22481])
                    ("del" code nil (reparse-symbol indented_block_body) [22485 22504]))                  
                :type "class")
                nil [17155 22505])
            ("_NotProvided" variable nil nil [22507 22549])
            ("_AssociationDict" type
               (:documentation "Generic, converting, dict-to-dict proxy."
                :superclasses ("_AssociationCollection")
                :members 
                  ( ("_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22668 22672])
                            ("key" variable nil (reparse-symbol function_parameters) [22674 22677])
                            ("value" variable nil (reparse-symbol function_parameters) [22679 22684]))                          )
                        (reparse-symbol indented_block_body) [22656 22727])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22741 22745])
                            ("object" variable nil (reparse-symbol function_parameters) [22747 22753]))                          )
                        (reparse-symbol indented_block_body) [22732 22791])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22805 22809])
                            ("object" variable nil (reparse-symbol function_parameters) [22811 22817])
                            ("key" variable nil (reparse-symbol function_parameters) [22819 22822])
                            ("value" variable nil (reparse-symbol function_parameters) [22824 22829]))                          )
                        (reparse-symbol indented_block_body) [22796 22879])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22900 22904])
                            ("key" variable nil (reparse-symbol function_parameters) [22906 22909]))                          )
                        (reparse-symbol indented_block_body) [22884 22952])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22973 22977])
                            ("key" variable nil (reparse-symbol function_parameters) [22979 22982])
                            ("value" variable nil (reparse-symbol function_parameters) [22984 22989]))                          )
                        (reparse-symbol indented_block_body) [22957 23136])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23157 23161])
                            ("key" variable nil (reparse-symbol function_parameters) [23163 23166]))                          )
                        (reparse-symbol indented_block_body) [23141 23195])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23217 23221])
                            ("key" variable nil (reparse-symbol function_parameters) [23223 23226]))                          )
                        (reparse-symbol indented_block_body) [23200 23301])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23318 23322])
                            ("key" variable nil (reparse-symbol function_parameters) [23324 23327]))                          )
                        (reparse-symbol indented_block_body) [23306 23402])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23420 23424]))                          )
                        (reparse-symbol indented_block_body) [23407 23462])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23477 23481]))                          )
                        (reparse-symbol indented_block_body) [23467 23509])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23525 23529])
                            ("other" variable nil (reparse-symbol function_parameters) [23531 23536]))                          )
                        (reparse-symbol indented_block_body) [23514 23574])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23590 23594])
                            ("other" variable nil (reparse-symbol function_parameters) [23596 23601]))                          )
                        (reparse-symbol indented_block_body) [23579 23639])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23655 23659])
                            ("other" variable nil (reparse-symbol function_parameters) [23661 23666]))                          )
                        (reparse-symbol indented_block_body) [23644 23703])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23719 23723])
                            ("other" variable nil (reparse-symbol function_parameters) [23725 23730]))                          )
                        (reparse-symbol indented_block_body) [23708 23768])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23784 23788])
                            ("other" variable nil (reparse-symbol function_parameters) [23790 23795]))                          )
                        (reparse-symbol indented_block_body) [23773 23832])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23848 23852])
                            ("other" variable nil (reparse-symbol function_parameters) [23854 23859]))                          )
                        (reparse-symbol indented_block_body) [23837 23897])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23914 23918])
                            ("other" variable nil (reparse-symbol function_parameters) [23920 23925]))                          )
                        (reparse-symbol indented_block_body) [23902 23966])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23984 23988]))                          )
                        (reparse-symbol indented_block_body) [23971 24031])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24044 24048])
                            ("key" variable nil (reparse-symbol function_parameters) [24050 24053])
                            ("default" variable nil (reparse-symbol function_parameters) [24055 24062]))                          )
                        (reparse-symbol indented_block_body) [24036 24164])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24184 24188])
                            ("key" variable nil (reparse-symbol function_parameters) [24190 24193])
                            ("default" variable nil (reparse-symbol function_parameters) [24195 24202]))                          )
                        (reparse-symbol indented_block_body) [24169 24367])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24381 24385]))                          )
                        (reparse-symbol indented_block_body) [24372 24419])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24437 24441]))                          )
                        (reparse-symbol indented_block_body) [24424 24479])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24495 24499]))                          )
                        (reparse-symbol indented_block_body) [24484 24569])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24589 24593]))                          )
                        (reparse-symbol indented_block_body) [24574 24696])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24711 24715]))                          )
                        (reparse-symbol indented_block_body) [24701 24777])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24796 24800]))                          )
                        (reparse-symbol indented_block_body) [24782 24910])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24923 24927])
                            ("key" variable nil (reparse-symbol function_parameters) [24929 24932])
                            ("default" variable nil (reparse-symbol function_parameters) [24934 24941]))                          )
                        (reparse-symbol indented_block_body) [24915 25127])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25144 25148]))                          )
                        (reparse-symbol indented_block_body) [25132 25230])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25246 25250])
                            ("a" variable nil (reparse-symbol function_parameters) [25252 25254])
                            ("kw" variable nil (reparse-symbol function_parameters) [25256 25260]))                          )
                        (reparse-symbol indented_block_body) [25235 26131])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26145 26149]))                          )
                        (reparse-symbol indented_block_body) [26136 26186])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26204 26208]))                          )
                        (reparse-symbol indented_block_body) [26191 26286])
                    ("for" code nil (reparse-symbol indented_block_body) [26291 26520])
                    ("del" code nil (reparse-symbol indented_block_body) [26524 26543]))                  
                :type "class")
                nil [22552 26544])
            ("_AssociationSet" type
               (:documentation "Generic, converting, set-to-set proxy."
                :superclasses ("_AssociationCollection")
                :members 
                  ( ("_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26659 26663])
                            ("value" variable nil (reparse-symbol function_parameters) [26665 26670]))                          )
                        (reparse-symbol indented_block_body) [26647 26708])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26722 26726])
                            ("object" variable nil (reparse-symbol function_parameters) [26728 26734]))                          )
                        (reparse-symbol indented_block_body) [26713 26772])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26786 26790])
                            ("object" variable nil (reparse-symbol function_parameters) [26792 26798])
                            ("value" variable nil (reparse-symbol function_parameters) [26800 26805]))                          )
                        (reparse-symbol indented_block_body) [26777 26850])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26867 26871]))                          )
                        (reparse-symbol indented_block_body) [26855 26903])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26924 26928]))                          )
                        (reparse-symbol indented_block_body) [26908 27015])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27037 27041])
                            ("value" variable nil (reparse-symbol function_parameters) [27043 27048]))                          )
                        (reparse-symbol indented_block_body) [27020 27218])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27236 27240]))                          
                        :documentation "Iterate over proxied values.

        For the actual domain objects, iterate over .col instead or just use
        the underlying collection directly from its property on the parent.

        ")
                        (reparse-symbol indented_block_body) [27223 27546])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27559 27563])
                            ("value" variable nil (reparse-symbol function_parameters) [27565 27570]))                          )
                        (reparse-symbol indented_block_body) [27551 27649])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27775 27779])
                            ("value" variable nil (reparse-symbol function_parameters) [27781 27786]))                          )
                        (reparse-symbol indented_block_body) [27763 27927])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27943 27947])
                            ("value" variable nil (reparse-symbol function_parameters) [27949 27954]))                          )
                        (reparse-symbol indented_block_body) [27932 28126])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28139 28143]))                          )
                        (reparse-symbol indented_block_body) [28131 28288])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28304 28308])
                            ("other" variable nil (reparse-symbol function_parameters) [28310 28315]))                          )
                        (reparse-symbol indented_block_body) [28293 28374])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28391 28395])
                            ("other" variable nil (reparse-symbol function_parameters) [28397 28402]))                          )
                        (reparse-symbol indented_block_body) [28379 28581])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28595 28599]))                          )
                        (reparse-symbol indented_block_body) [28586 28633])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28648 28652])
                            ("other" variable nil (reparse-symbol function_parameters) [28654 28659]))                          )
                        (reparse-symbol indented_block_body) [28638 28700])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [28705 28719])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28740 28744])
                            ("other" variable nil (reparse-symbol function_parameters) [28746 28751]))                          )
                        (reparse-symbol indented_block_body) [28725 28797])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [28802 28822])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28850 28854])
                            ("other" variable nil (reparse-symbol function_parameters) [28856 28861]))                          )
                        (reparse-symbol indented_block_body) [28828 28924])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28942 28946])
                            ("other" variable nil (reparse-symbol function_parameters) [28948 28953]))                          )
                        (reparse-symbol indented_block_body) [28929 29136])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29158 29162])
                            ("other" variable nil (reparse-symbol function_parameters) [29164 29169]))                          )
                        (reparse-symbol indented_block_body) [29141 29217])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [29222 29244])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29274 29278])
                            ("other" variable nil (reparse-symbol function_parameters) [29280 29285]))                          )
                        (reparse-symbol indented_block_body) [29250 29508])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29526 29530])
                            ("other" variable nil (reparse-symbol function_parameters) [29532 29537]))                          )
                        (reparse-symbol indented_block_body) [29513 29880])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29910 29914])
                            ("other" variable nil (reparse-symbol function_parameters) [29916 29921]))                          )
                        (reparse-symbol indented_block_body) [29885 29977])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [29982 30012])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30050 30054])
                            ("other" variable nil (reparse-symbol function_parameters) [30056 30061]))                          )
                        (reparse-symbol indented_block_body) [30018 30292])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30310 30314])
                            ("other" variable nil (reparse-symbol function_parameters) [30316 30321]))                          )
                        (reparse-symbol indented_block_body) [30297 30672])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30690 30694])
                            ("other" variable nil (reparse-symbol function_parameters) [30696 30701]))                          )
                        (reparse-symbol indented_block_body) [30677 30745])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30765 30769])
                            ("other" variable nil (reparse-symbol function_parameters) [30771 30776]))                          )
                        (reparse-symbol indented_block_body) [30750 30822])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30837 30841]))                          )
                        (reparse-symbol indented_block_body) [30827 30869])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30883 30887]))                          )
                        (reparse-symbol indented_block_body) [30874 30915])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30931 30935])
                            ("other" variable nil (reparse-symbol function_parameters) [30937 30942]))                          )
                        (reparse-symbol indented_block_body) [30920 30979])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30995 30999])
                            ("other" variable nil (reparse-symbol function_parameters) [31001 31006]))                          )
                        (reparse-symbol indented_block_body) [30984 31043])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31059 31063])
                            ("other" variable nil (reparse-symbol function_parameters) [31065 31070]))                          )
                        (reparse-symbol indented_block_body) [31048 31106])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31122 31126])
                            ("other" variable nil (reparse-symbol function_parameters) [31128 31133]))                          )
                        (reparse-symbol indented_block_body) [31111 31170])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31186 31190])
                            ("other" variable nil (reparse-symbol function_parameters) [31192 31197]))                          )
                        (reparse-symbol indented_block_body) [31175 31233])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31249 31253])
                            ("other" variable nil (reparse-symbol function_parameters) [31255 31260]))                          )
                        (reparse-symbol indented_block_body) [31238 31297])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31315 31319]))                          )
                        (reparse-symbol indented_block_body) [31302 31353])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31371 31375]))                          )
                        (reparse-symbol indented_block_body) [31358 31453])
                    ("for" code nil (reparse-symbol indented_block_body) [31458 31685])
                    ("del" code nil (reparse-symbol indented_block_body) [31689 31708]))                  
                :type "class")
                nil [26546 31709]))          
      :file "associationproxy.py"
      :pointmax 31709
      :fsize 31708
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax '((PERIOD 621 . 622) (FROM 615 . 619) (PERIOD 620 . 621) (PERIOD 579 . 580) (FROM 573 . 577) (PERIOD 578 . 579) (PERIOD 549 . 550) (FROM 543 . 547) (PERIOD 548 . 549)))
    (semanticdb-table "mutable.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Provide support for tracking of in-place changes to scalar values,
which are propagated into ORM change events on owning parent objects.

The :mod:`sqlalchemy.ext.mutable` extension replaces SQLAlchemy's legacy
approach to in-place mutations of scalar values, established by the
:class:`.types.MutableType` class as well as the ``mutable=True`` type flag,
with a system that allows change events to be propagated from the value to
the owning parent, thereby removing the need for the ORM to maintain copies
of values as well as the very expensive requirement of scanning through all
\"mutable\" values on each flush call, looking for changes.

.. _mutable_scalars:

Establishing Mutability on Scalar Column Values
===============================================

A typical example of a \"mutable\" structure is a Python dictionary.
Following the example introduced in :ref:`types_toplevel`, we
begin with a custom type that marshals Python dictionaries into
JSON strings before being persisted::

    from sqlalchemy.types import TypeDecorator, VARCHAR
    import json

    class JSONEncodedDict(TypeDecorator):
        \"Represents an immutable structure as a json-encoded string.\"

        impl = VARCHAR

        def process_bind_param(self, value, dialect):
            if value is not None:
                value = json.dumps(value)
            return value

        def process_result_value(self, value, dialect):
            if value is not None:
                value = json.loads(value)
            return value

The usage of ``json`` is only for the purposes of example. The
:mod:`sqlalchemy.ext.mutable` extension can be used
with any type whose target Python type may be mutable, including
:class:`.PickleType`, :class:`.postgresql.ARRAY`, etc.

When using the :mod:`sqlalchemy.ext.mutable` extension, the value itself
tracks all parents which reference it.  Below, we illustrate the a simple
version of the :class:`.MutableDict` dictionary object, which applies
the :class:`.Mutable` mixin to a plain Python dictionary::

    import collections
    from sqlalchemy.ext.mutable import Mutable

    class MutableDict(Mutable, dict):
        @classmethod
        def coerce(cls, key, value):
            \"Convert plain dictionaries to MutableDict.\"

            if not isinstance(value, MutableDict):
                if isinstance(value, dict):
                    return MutableDict(value)

                # this call will raise ValueError
                return Mutable.coerce(key, value)
            else:
                return value

        def __setitem__(self, key, value):
            \"Detect dictionary set events and emit change events.\"

            dict.__setitem__(self, key, value)
            self.changed()

        def __delitem__(self, key):
            \"Detect dictionary del events and emit change events.\"

            dict.__delitem__(self, key)
            self.changed()

The above dictionary class takes the approach of subclassing the Python
built-in ``dict`` to produce a dict
subclass which routes all mutation events through ``__setitem__``.  There are
variants on this approach, such as subclassing ``UserDict.UserDict`` or
``collections.MutableMapping``; the part that's important to this example is
that the :meth:`.Mutable.changed` method is called whenever an in-place
change to the datastructure takes place.

We also redefine the :meth:`.Mutable.coerce` method which will be used to
convert any values that are not instances of ``MutableDict``, such
as the plain dictionaries returned by the ``json`` module, into the
appropriate type.  Defining this method is optional; we could just as well
created our ``JSONEncodedDict`` such that it always returns an instance
of ``MutableDict``, and additionally ensured that all calling code
uses ``MutableDict`` explicitly.  When :meth:`.Mutable.coerce` is not
overridden, any values applied to a parent object which are not instances
of the mutable type will raise a ``ValueError``.

Our new ``MutableDict`` type offers a class method
:meth:`~.Mutable.as_mutable` which we can use within column metadata
to associate with types. This method grabs the given type object or
class and associates a listener that will detect all future mappings
of this type, applying event listening instrumentation to the mapped
attribute. Such as, with classical table metadata::

    from sqlalchemy import Table, Column, Integer

    my_data = Table('my_data', metadata,
        Column('id', Integer, primary_key=True),
        Column('data', MutableDict.as_mutable(JSONEncodedDict))
    )

Above, :meth:`~.Mutable.as_mutable` returns an instance of ``JSONEncodedDict``
(if the type object was not an instance already), which will intercept any
attributes which are mapped against this type.  Below we establish a simple
mapping against the ``my_data`` table::

    from sqlalchemy import mapper

    class MyDataClass(object):
        pass

    # associates mutation listeners with MyDataClass.data
    mapper(MyDataClass, my_data)

The ``MyDataClass.data`` member will now be notified of in place changes
to its value.

There's no difference in usage when using declarative::

    from sqlalchemy.ext.declarative import declarative_base

    Base = declarative_base()

    class MyDataClass(Base):
        __tablename__ = 'my_data'
        id = Column(Integer, primary_key=True)
        data = Column(MutableDict.as_mutable(JSONEncodedDict))

Any in-place changes to the ``MyDataClass.data`` member
will flag the attribute as \"dirty\" on the parent object::

    >>> from sqlalchemy.orm import Session

    >>> sess = Session()
    >>> m1 = MyDataClass(data={'value1':'foo'})
    >>> sess.add(m1)
    >>> sess.commit()

    >>> m1.data['value1'] = 'bar'
    >>> assert m1 in sess.dirty
    True

The ``MutableDict`` can be associated with all future instances
of ``JSONEncodedDict`` in one step, using
:meth:`~.Mutable.associate_with`.  This is similar to
:meth:`~.Mutable.as_mutable` except it will intercept all occurrences
of ``MutableDict`` in all mappings unconditionally, without
the need to declare it individually::

    MutableDict.associate_with(JSONEncodedDict)

    class MyDataClass(Base):
        __tablename__ = 'my_data'
        id = Column(Integer, primary_key=True)
        data = Column(JSONEncodedDict)


Supporting Pickling
--------------------

The key to the :mod:`sqlalchemy.ext.mutable` extension relies upon the
placement of a ``weakref.WeakKeyDictionary`` upon the value object, which
stores a mapping of parent mapped objects keyed to the attribute name under
which they are associated with this value. ``WeakKeyDictionary`` objects are
not picklable, due to the fact that they contain weakrefs and function
callbacks. In our case, this is a good thing, since if this dictionary were
picklable, it could lead to an excessively large pickle size for our value
objects that are pickled by themselves outside of the context of the parent.
The developer responsibility here is only to provide a ``__getstate__`` method
that excludes the :meth:`~.MutableBase._parents` collection from the pickle
stream::

    class MyMutableType(Mutable):
        def __getstate__(self):
            d = self.__dict__.copy()
            d.pop('_parents', None)
            return d

With our dictionary example, we need to return the contents of the dict itself
(and also restore them on __setstate__)::

    class MutableDict(Mutable, dict):
        # ....

        def __getstate__(self):
            return dict(self)

        def __setstate__(self, state):
            self.update(state)

In the case that our mutable value object is pickled as it is attached to one
or more parent objects that are also part of the pickle, the :class:`.Mutable`
mixin will re-establish the :attr:`.Mutable._parents` collection on each value
object as the owning parents themselves are unpickled.

.. _mutable_composites:

Establishing Mutability on Composites
=====================================

Composites are a special ORM feature which allow a single scalar attribute to
be assigned an object value which represents information \"composed\" from one
or more columns from the underlying mapped table. The usual example is that of
a geometric \"point\", and is introduced in :ref:`mapper_composite`.

.. versionchanged:: 0.7
    The internals of :func:`.orm.composite` have been
    greatly simplified and in-place mutation detection is no longer enabled by
    default; instead, the user-defined value must detect changes on its own and
    propagate them to all owning parents. The :mod:`sqlalchemy.ext.mutable`
    extension provides the helper class :class:`.MutableComposite`, which is a
    slight variant on the :class:`.Mutable` class.

As is the case with :class:`.Mutable`, the user-defined composite class
subclasses :class:`.MutableComposite` as a mixin, and detects and delivers
change events to its parents via the :meth:`.MutableComposite.changed` method.
In the case of a composite class, the detection is usually via the usage of
Python descriptors (i.e. ``@property``), or alternatively via the special
Python method ``__setattr__()``. Below we expand upon the ``Point`` class
introduced in :ref:`mapper_composite` to subclass :class:`.MutableComposite`
and to also route attribute set events via ``__setattr__`` to the
:meth:`.MutableComposite.changed` method::

    from sqlalchemy.ext.mutable import MutableComposite

    class Point(MutableComposite):
        def __init__(self, x, y):
            self.x = x
            self.y = y

        def __setattr__(self, key, value):
            \"Intercept set events\"

            # set the attribute
            object.__setattr__(self, key, value)

            # alert all parents to the change
            self.changed()

        def __composite_values__(self):
            return self.x, self.y

        def __eq__(self, other):
            return isinstance(other, Point) and \\\\
                other.x == self.x and \\\\
                other.y == self.y

        def __ne__(self, other):
            return not self.__eq__(other)

The :class:`.MutableComposite` class uses a Python metaclass to automatically
establish listeners for any usage of :func:`.orm.composite` that specifies our
``Point`` type. Below, when ``Point`` is mapped to the ``Vertex`` class,
listeners are established which will route change events from ``Point``
objects to each of the ``Vertex.start`` and ``Vertex.end`` attributes::

    from sqlalchemy.orm import composite, mapper
    from sqlalchemy import Table, Column

    vertices = Table('vertices', metadata,
        Column('id', Integer, primary_key=True),
        Column('x1', Integer),
        Column('y1', Integer),
        Column('x2', Integer),
        Column('y2', Integer),
        )

    class Vertex(object):
        pass

    mapper(Vertex, vertices, properties={
        'start': composite(Point, vertices.c.x1, vertices.c.y1),
        'end': composite(Point, vertices.c.x2, vertices.c.y2)
    })

Any in-place changes to the ``Vertex.start`` or ``Vertex.end`` members
will flag the attribute as \"dirty\" on the parent object::

    >>> from sqlalchemy.orm import Session

    >>> sess = Session()
    >>> v1 = Vertex(start=Point(3, 4), end=Point(12, 15))
    >>> sess.add(v1)
    >>> sess.commit()

    >>> v1.end.x = 8
    >>> assert v1 in sess.dirty
    True

Coercing Mutable Composites
---------------------------

The :meth:`.MutableBase.coerce` method is also supported on composite types.
In the case of :class:`.MutableComposite`, the :meth:`.MutableBase.coerce`
method is only called for attribute set operations, not load operations.
Overriding the :meth:`.MutableBase.coerce` method is essentially equivalent
to using a :func:`.validates` validation routine for all attributes which
make use of the custom composite type::

    class Point(MutableComposite):
        # other Point methods
        # ...

        def coerce(cls, key, value):
            if isinstance(value, tuple):
                value = Point(*value)
            elif not isinstance(value, Point):
                raise ValueError(\"tuple or Point expected\")
            return value

.. versionadded:: 0.7.10,0.8.0b2
    Support for the :meth:`.MutableBase.coerce` method in conjunction with
    objects of type :class:`.MutableComposite`.

Supporting Pickling
--------------------

As is the case with :class:`.Mutable`, the :class:`.MutableComposite` helper
class uses a ``weakref.WeakKeyDictionary`` available via the
:meth:`.MutableBase._parents` attribute which isn't picklable. If we need to
pickle instances of ``Point`` or its owning class ``Vertex``, we at least need
to define a ``__getstate__`` that doesn't include the ``_parents`` dictionary.
Below we define both a ``__getstate__`` and a ``__setstate__`` that package up
the minimal form of our ``Point`` class::

    class Point(MutableComposite):
        # ...

        def __getstate__(self):
            return self.x, self.y

        def __setstate__(self, state):
            self.x, self.y = state

As with :class:`.Mutable`, the :class:`.MutableComposite` augments the
pickling process of the parent's object-relational state so that the
:meth:`.MutableBase._parents` collection is restored to all ``Point`` objects.

\"\"\"" code nil nil [234 13488])
            ("flag_modified" include nil nil [13511 13531])
            ("types" include nil nil [13540 13559])
            ("event" include nil nil [13540 13559])
            ("Mapper" include nil nil [13571 13607])
            ("object_mapper" include nil nil [13571 13607])
            ("mapper" include nil nil [13571 13607])
            ("memoized_property" include nil nil [13620 13644])
            ("weakref" include nil nil [13645 13659])
            ("MutableBase" type
               (:documentation "Common base class to :class:`.Mutable`
    and :class:`.MutableComposite`.

    "
                :superclasses ("object")
                :members 
                  ( ("_parents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13821 13825]))                          
                        :documentation "Dictionary of parent object->attribute name on the parent.

        This attribute is a so-called \"memoized\" property.  It initializes
        itself with a new ``weakref.WeakKeyDictionary`` the first time
        it is accessed, returning the same object upon subsequent access.

        ")
                        (reparse-symbol indented_block_body) [13785 14176])
                    ("coerce" function
                       (:documentation "Given a value, coerce it into the target type.

        Can be overridden by custom subclasses to coerce incoming
        data into a particular type.

        By default, raises ``ValueError``.

        This method is called in different scenarios depending on if
        the parent class is of type :class:`.Mutable` or of type
        :class:`.MutableComposite`.  In the case of the former, it is called
        for both attribute-set operations as well as during ORM loading
        operations.  For the latter, it is only called during attribute-set
        operations; the mechanics of the :func:`.composite` construct
        handle coercion during load operations.


        :param key: string name of the ORM-mapped attribute being set.
        :param value: the incoming value.
        :return: the method should return the coerced value, or raise
         ``ValueError`` if the coercion cannot be completed.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14209 14212])
                            ("key" variable nil (reparse-symbol function_parameters) [14214 14217])
                            ("value" variable nil (reparse-symbol function_parameters) [14219 14224]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14181 15337])
                    ("_listen_on_attribute" function
                       (:documentation "Establish this type as a mutation listener for the given
        mapped descriptor.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15384 15387])
                            ("attribute" variable nil (reparse-symbol function_parameters) [15389 15398])
                            ("coerce" variable nil (reparse-symbol function_parameters) [15400 15406])
                            ("parent_cls" variable nil (reparse-symbol function_parameters) [15408 15418]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15342 17667]))                  
                :type "class")
                nil [13662 17667])
            ("Mutable" type
               (:documentation "Mixin that defines transparent propagation of change
    events to a parent object.

    See the example in :ref:`mutable_scalars` for usage information.

    "
                :superclasses ("MutableBase")
                :members 
                  ( ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17884 17888]))                          
                        :documentation "Subclasses should call this method whenever change events occur.")
                        (reparse-symbol indented_block_body) [17872 18060])
                    ("associate_with_attribute" function
                       (:documentation "Establish this type as a mutation listener for the given
        mapped descriptor.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18111 18114])
                            ("attribute" variable nil (reparse-symbol function_parameters) [18116 18125]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18065 18304])
                    ("associate_with" function
                       (:documentation "Associate this wrapper with all future mapped columns
        of the given type.

        This is a convenience method that calls
        ``associate_with_attribute`` automatically.

        .. warning::

           The listeners established by this method are *global*
           to all mappers, and are *not* garbage collected.   Only use
           :meth:`.associate_with` for types that are permanent to an
           application, not with ad-hoc types else this will cause unbounded
           growth in memory usage.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18345 18348])
                            ("sqltype" variable nil (reparse-symbol function_parameters) [18350 18357]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18309 19204])
                    ("as_mutable" function
                       (:documentation "Associate a SQL type with this mutable Python type.

        This establishes listeners that will detect ORM mappings against
        the given type, adding mutation event trackers to those mappings.

        The type is returned, unconditionally as an instance, so that
        :meth:`.as_mutable` can be used inline::

            Table('mytable', metadata,
                Column('id', Integer, primary_key=True),
                Column('data', MyMutableType.as_mutable(PickleType))
            )

        Note that the returned type is always an instance, even if a class
        is given, and that only columns which are declared specifically with
        that type instance receive additional instrumentation.

        To associate a particular mutable type with all occurrences of a
        particular type, use the :meth:`.Mutable.associate_with` classmethod
        of the particular :meth:`.Mutable` subclass to establish a global
        association.

        .. warning::

           The listeners established by this method are *global*
           to all mappers, and are *not* garbage collected.   Only use
           :meth:`.as_mutable` for types that are permanent to an application,
           not with ad-hoc types else this will cause unbounded growth
           in memory usage.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19241 19244])
                            ("sqltype" variable nil (reparse-symbol function_parameters) [19246 19253]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19209 20935]))                  
                :type "class")
                nil [17669 20935])
            ("MutableComposite" type
               (:documentation "Mixin that defines transparent propagation of change
    events on a SQLAlchemy \"composite\" object to its
    owning parent or parents.

    See the example in :ref:`mutable_composites` for usage information.

    "
                :superclasses ("MutableBase")
                :members 
                  ( ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21217 21221]))                          
                        :documentation "Subclasses should call this method whenever change events occur.")
                        (reparse-symbol indented_block_body) [21205 21629]))                  
                :type "class")
                nil [20938 21629])
            ("_setup_composite_listener" function nil nil [21630 22232])
            ("_setup_composite_listener" code nil nil [22232 22259])
            ("MutableDict" type
               (:documentation "A dictionary type that implements :class:`.Mutable`.

    .. versionadded:: 0.8

    "
                :superclasses ("Mutable" "dict")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22413 22417])
                            ("key" variable nil (reparse-symbol function_parameters) [22419 22422])
                            ("value" variable nil (reparse-symbol function_parameters) [22424 22429]))                          
                        :documentation "Detect dictionary set events and emit change events.")
                        (reparse-symbol indented_block_body) [22397 22565])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22586 22590])
                            ("key" variable nil (reparse-symbol function_parameters) [22592 22595]))                          
                        :documentation "Detect dictionary del events and emit change events.")
                        (reparse-symbol indented_block_body) [22570 22724])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22739 22743]))                          )
                        (reparse-symbol indented_block_body) [22729 22794])
                    ("coerce" function
                       (:documentation "Convert plain dictionary to MutableDict."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22827 22830])
                            ("key" variable nil (reparse-symbol function_parameters) [22832 22835])
                            ("value" variable nil (reparse-symbol function_parameters) [22837 22842]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22799 23114])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23136 23140]))                          )
                        (reparse-symbol indented_block_body) [23119 23169])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23191 23195])
                            ("state" variable nil (reparse-symbol function_parameters) [23197 23202]))                          )
                        (reparse-symbol indented_block_body) [23174 23232]))                  
                :type "class")
                nil [22262 23232]))          
      :file "mutable.py"
      :pointmax 23232
      :fsize 23231
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax '((PERIOD 13614 . 13615) (FROM 13608 . 13612) (PERIOD 13613 . 13614) (PERIOD 13566 . 13567) (FROM 13560 . 13564) (PERIOD 13565 . 13566) (PERIOD 13538 . 13539) (FROM 13532 . 13536) (PERIOD 13537 . 13538) (PERIOD 13495 . 13496) (FROM 13489 . 13493) (PERIOD 13494 . 13495)))
    (semanticdb-table "hybrid.py"
      :file "hybrid.py"
      :fsize 27980
      :lastmodtime '(21002 33914 0 0)))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!sqlalchemy!ext!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
