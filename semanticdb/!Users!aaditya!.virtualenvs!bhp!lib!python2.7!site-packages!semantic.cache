;; Object site-packages/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "site-packages/"
  :tables
  (list
    (semanticdb-table "pkg_resources.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Package resource API
--------------------

A resource is a logical file contained within a package, or a logical
subdirectory thereof.  The package resource API expects resource names
to have their path parts separated with ``/``, *not* whatever the local
path separator is.  Do not use os.path operations to manipulate resource
names being passed into the API.

The package resource API is designed to work with normal filesystem packages,
.egg files, and unpacked .egg files.  It can also work in a limited way with
.zip files and with custom PEP 302 loaders that support the ``get_data()``
method.
\"\"\"" code nil nil [1 608])
            ("zipimport" include nil nil [610 666])
            ("zipfile" include nil nil [610 666])
            ("types" include nil nil [610 666])
            ("imp" include nil nil [610 666])
            ("re" include nil nil [610 666])
            ("time" include nil nil [610 666])
            ("os" include nil nil [610 666])
            ("sys" include nil nil [610 666])
            ("warnings" include nil nil [667 682])
            ("stat" include nil nil [683 694])
            ("try" code nil nil [695 816])
            ("try" code nil nil [817 901])
            ("try" code nil nil [901 1684])
            ("os" include nil nil [1722 1742])
            ("try" code nil nil [1743 1903])
            ("os" include nil nil [1904 1934])
            ("os.path" include nil nil [1935 1967])
            ("if" code nil nil [2046 2210])
            ("try" code nil nil [2211 2263])
            ("_bypass_ensure_directory" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2293 2297])
                ("mode" variable nil (reparse-symbol function_parameters) [2299 2303]))              ) nil [2264 2627])
            ("_state_vars" variable nil nil [2629 2645])
            ("_declare_state" function (:arguments 
              ( ("vartype" variable nil (reparse-symbol function_parameters) [2666 2673])
                ("kw" variable nil (reparse-symbol function_parameters) [2675 2679]))              ) nil [2647 2791])
            ("__getstate__" function nil nil [2792 2938])
            ("__setstate__" function (:arguments 
              ( ("state" variable nil (reparse-symbol function_parameters) [2956 2961]))              ) nil [2939 3077])
            ("_sget_dict" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [3093 3096]))              ) nil [3078 3121])
            ("_sset_dict" function (:arguments 
              ( ("key" variable nil (reparse-symbol function_parameters) [3137 3140])
                ("ob" variable nil (reparse-symbol function_parameters) [3142 3144])
                ("state" variable nil (reparse-symbol function_parameters) [3146 3151]))              ) nil [3122 3190])
            ("_sget_object" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [3208 3211]))              ) nil [3191 3244])
            ("_sset_object" function (:arguments 
              ( ("key" variable nil (reparse-symbol function_parameters) [3262 3265])
                ("ob" variable nil (reparse-symbol function_parameters) [3267 3269])
                ("state" variable nil (reparse-symbol function_parameters) [3271 3276]))              ) nil [3245 3306])
            ("_sget_none" variable nil nil [3307 3351])
            ("get_supported_platform" function (:documentation "Return this platform's maximum compatible version.

    distutils.util.get_platform() normally reports the minimum version
    of Mac OS X that would be required to *use* extensions produced by
    distutils.  But what we want when checking compatibility is to know the
    version of Mac OS X that we are *running*.  To allow usage of packages that
    explicitly require a newer version of Mac OS X, we must also know the
    current version of the OS.

    If this condition occurs for any other platform with a version in its
    platform strings, this function should be extended accordingly.
    ") nil [3356 4288])
            ("__all__" variable nil nil [4309 6056])
            ("ResolutionError" type
               (:documentation "Abstract base for dependency resolution errors"
                :superclasses ("Exception")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6165 6169]))                          )
                        (reparse-symbol indented_block_body) [6152 6227]))                  
                :type "class")
                nil [6057 6227])
            ("VersionConflict" type
               (:documentation "An already-installed version conflicts with the requested version"
                :superclasses ("ResolutionError")
                :type "class")
                nil [6228 6344])
            ("DistributionNotFound" type
               (:documentation "A requested distribution was not found"
                :superclasses ("ResolutionError")
                :type "class")
                nil [6345 6439])
            ("UnknownExtra" type
               (:documentation "Distribution doesn't have an \"extra feature\" of the given name"
                :superclasses ("ResolutionError")
                :type "class")
                nil [6440 6550])
            ("_provider_factories" variable nil nil [6550 6574])
            ("PY_MAJOR" variable nil nil [6576 6602])
            ("EGG_DIST" variable nil nil [6603 6618])
            ("BINARY_DIST" variable nil nil [6619 6634])
            ("SOURCE_DIST" variable nil nil [6635 6650])
            ("CHECKOUT_DIST" variable nil nil [6651 6668])
            ("DEVELOP_DIST" code nil nil [6669 6686])
            ("register_loader_type" function
               (:documentation "Register `provider_factory` to make providers for `loader_type`

    `loader_type` is the type or class of a PEP 302 ``module.__loader__``,
    and `provider_factory` is a function that, passed a *module* object,
    returns an ``IResourceProvider`` for that module.
    "
                :arguments 
                  ( ("loader_type" variable nil (reparse-symbol function_parameters) [6713 6724])
                    ("provider_factory" variable nil (reparse-symbol function_parameters) [6726 6742]))                  )
                nil [6688 7083])
            ("get_provider" function
               (:documentation "Return an IResourceProvider for the named module or requirement"
                :arguments 
                  ( ("moduleOrReq" variable nil (reparse-symbol function_parameters) [7101 7112]))                  )
                nil [7084 7567])
            ("_macosx_vers" function (:arguments 
              ( ("_cache" variable nil (reparse-symbol function_parameters) [7585 7591]))              ) nil [7568 8176])
            ("_macosx_arch" function (:arguments 
              ( ("machine" variable nil (reparse-symbol function_parameters) [8194 8201]))              ) nil [8177 8279])
            ("get_build_platform" function (:documentation "Return this platform's string for platform-specific distributions

    XXX Currently this is the same as ``distutils.util.get_platform()``, but it
    needs some hacks for Linux and Mac OS X.
    ") nil [8280 9167])
            ("macosVersionString" variable nil nil [9168 9228])
            ("darwinVersionString" variable nil nil [9229 9297])
            ("get_platform" variable nil nil [9298 9331])
            ("compatible_platforms" function
               (:documentation "Can code for the `provided` platform run on the `required` platform?

    Returns true if either platform is ``None``, or the platforms are equal.

    XXX Needs compatibility checks for Linux and other unixy OSes.
    "
                :arguments 
                  ( ("provided" variable nil (reparse-symbol function_parameters) [9388 9396])
                    ("required" variable nil (reparse-symbol function_parameters) [9397 9405]))                  )
                nil [9363 11247])
            ("run_script" function
               (:documentation "Locate distribution `dist_spec` and run its `script_name` script"
                :arguments 
                  ( ("dist_spec" variable nil (reparse-symbol function_parameters) [11264 11273])
                    ("script_name" variable nil (reparse-symbol function_parameters) [11275 11286]))                  )
                nil [11249 11521])
            ("run_main" variable nil nil [11522 11543])
            ("get_distribution" function
               (:documentation "Return a current distribution object for a Requirement or string"
                :arguments 
                  ( ("dist" variable nil (reparse-symbol function_parameters) [11593 11597]))                  )
                nil [11572 11942])
            ("load_entry_point" function
               (:documentation "Return `name` entry point of `group` for `dist` or raise ImportError"
                :arguments 
                  ( ("dist" variable nil (reparse-symbol function_parameters) [11964 11968])
                    ("group" variable nil (reparse-symbol function_parameters) [11970 11975])
                    ("name" variable nil (reparse-symbol function_parameters) [11977 11981]))                  )
                nil [11943 12127])
            ("get_entry_map" function
               (:documentation "Return the entry point map for `group`, or the full entry map"
                :arguments 
                  ( ("dist" variable nil (reparse-symbol function_parameters) [12146 12150])
                    ("group" variable nil (reparse-symbol function_parameters) [12152 12157]))                  )
                nil [12128 12292])
            ("get_entry_info" function
               (:documentation "Return the EntryPoint object for `group`+`name`, or ``None``"
                :arguments 
                  ( ("dist" variable nil (reparse-symbol function_parameters) [12312 12316])
                    ("group" variable nil (reparse-symbol function_parameters) [12318 12323])
                    ("name" variable nil (reparse-symbol function_parameters) [12325 12329]))                  )
                nil [12293 12465])
            ("IMetadataProvider" type
               (:members 
                  ( ("has_metadata" function
                       (:documentation "Does the package's distribution contain the named metadata?"
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [12514 12518]))                          )
                        (reparse-symbol indented_block_body) [12497 12595])
                    ("get_metadata" function
                       (:documentation "The named metadata resource as a string"
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [12617 12621]))                          )
                        (reparse-symbol indented_block_body) [12600 12678])
                    ("get_metadata_lines" function
                       (:documentation "Yield named metadata resource as list of non-blank non-comment lines

       Leading and trailing whitespace is stripped from each line, and lines
       with ``#`` as the first non-blank character are omitted."
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [12706 12710]))                          )
                        (reparse-symbol indented_block_body) [12683 12938])
                    ("metadata_isdir" function
                       (:documentation "Is the named metadata a directory?  (like ``os.path.isdir()``)"
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [12962 12966]))                          )
                        (reparse-symbol indented_block_body) [12943 13046])
                    ("metadata_listdir" function
                       (:documentation "List of metadata names in the directory (like ``os.listdir()``)"
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [13072 13076]))                          )
                        (reparse-symbol indented_block_body) [13051 13157])
                    ("run_script" function
                       (:documentation "Execute the named script in the supplied namespace dictionary"
                        :arguments 
                          ( ("script_name" variable nil (reparse-symbol function_parameters) [13177 13188])
                            ("namespace" variable nil (reparse-symbol function_parameters) [13190 13199]))                          )
                        (reparse-symbol indented_block_body) [13162 13278]))                  
                :type "class")
                nil [12467 13278])
            ("IResourceProvider" type
               (:documentation "An object that provides access to package resources"
                :superclasses ("IMetadataProvider")
                :members 
                  ( ("get_resource_filename" function
                       (:documentation "Return a true filesystem path for `resource_name`

        `manager` must be an ``IResourceManager``"
                        :arguments 
                          ( ("manager" variable nil (reparse-symbol function_parameters) [13425 13432])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [13434 13447]))                          )
                        (reparse-symbol indented_block_body) [13399 13565])
                    ("get_resource_stream" function
                       (:documentation "Return a readable file-like object for `resource_name`

        `manager` must be an ``IResourceManager``"
                        :arguments 
                          ( ("manager" variable nil (reparse-symbol function_parameters) [13594 13601])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [13603 13616]))                          )
                        (reparse-symbol indented_block_body) [13570 13739])
                    ("get_resource_string" function
                       (:documentation "Return a string containing the contents of `resource_name`

        `manager` must be an ``IResourceManager``"
                        :arguments 
                          ( ("manager" variable nil (reparse-symbol function_parameters) [13768 13775])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [13777 13790]))                          )
                        (reparse-symbol indented_block_body) [13744 13917])
                    ("has_resource" function
                       (:documentation "Does the package contain the named resource?"
                        :arguments 
                          ( ("resource_name" variable nil (reparse-symbol function_parameters) [13939 13952]))                          )
                        (reparse-symbol indented_block_body) [13922 14014])
                    ("resource_isdir" function
                       (:documentation "Is the named resource a directory?  (like ``os.path.isdir()``)"
                        :arguments 
                          ( ("resource_name" variable nil (reparse-symbol function_parameters) [14038 14051]))                          )
                        (reparse-symbol indented_block_body) [14019 14131])
                    ("resource_listdir" function
                       (:documentation "List of resource names in the directory (like ``os.listdir()``)"
                        :arguments 
                          ( ("resource_name" variable nil (reparse-symbol function_parameters) [14157 14170]))                          )
                        (reparse-symbol indented_block_body) [14136 14251]))                  
                :type "class")
                nil [13288 14251])
            ("WorkingSet" type
               (:documentation "A collection of active distributions on sys.path (or a similar list)"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create working set from list of path entries (default=sys.path)\"\"\"" code nil (reparse-symbol indented_block_body) [14418 14487])
                            ("self" variable nil (reparse-symbol indented_block_body) [14496 14513])
                            ("self" variable nil (reparse-symbol indented_block_body) [14522 14542])
                            ("self" variable nil (reparse-symbol indented_block_body) [14551 14567])
                            ("self" variable nil (reparse-symbol indented_block_body) [14576 14595])
                            ("if" code nil (reparse-symbol indented_block_body) [14605 14656])
                            ("for" code nil (reparse-symbol indented_block_body) [14665 14721]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14389 14393])
                            ("entries" variable nil (reparse-symbol function_parameters) [14395 14402]))                          
                        :documentation "Create working set from list of path entries (default=sys.path)"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14376 14721])
                    ("add_entry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14741 14745])
                            ("entry" variable nil (reparse-symbol function_parameters) [14747 14752]))                          
                        :documentation "Add a path item to ``.entries``, finding any distributions on it

        ``find_distributions(entry, True)`` is used to find distributions
        corresponding to the path entry, and they are added.  `entry` is
        always appended to ``.entries``, even if it is already present.
        (This is because ``sys.path`` can contain the same value more than
        once, and the ``.entries`` of the ``sys.path`` WorkingSet should always
        equal ``sys.path``.)
        ")
                        (reparse-symbol indented_block_body) [14727 15422])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15445 15449])
                            ("dist" variable nil (reparse-symbol function_parameters) [15450 15454]))                          
                        :documentation "True if `dist` is the active distribution for its project")
                        (reparse-symbol indented_block_body) [15428 15578])
                    ("find" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15596 15600])
                            ("req" variable nil (reparse-symbol function_parameters) [15602 15605]))                          
                        :documentation "Find a distribution matching requirement `req`

        If there is an active distribution for the requested project, this
        returns it as long as it meets the version requirement specified by
        `req`.  But, if there is an active distribution for the project and it
        does *not* meet the `req` requirement, ``VersionConflict`` is raised.
        If there is no active distribution for the requested project, ``None``
        is returned.
        ")
                        (reparse-symbol indented_block_body) [15587 16282])
                    ("iter_entry_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16309 16313])
                            ("group" variable nil (reparse-symbol function_parameters) [16315 16320])
                            ("name" variable nil (reparse-symbol function_parameters) [16322 16326]))                          
                        :documentation "Yield entry point objects from `group` matching `name`

        If `name` is None, yields all entry points in `group` from all
        distributions in the working set, otherwise only ones matching
        both `group` and `name` are yielded (in distribution order).
        ")
                        (reparse-symbol indented_block_body) [16287 16870])
                    ("run_script" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16890 16894])
                            ("requires" variable nil (reparse-symbol function_parameters) [16896 16904])
                            ("script_name" variable nil (reparse-symbol function_parameters) [16906 16917]))                          
                        :documentation "Locate distribution for `requires` and run `script_name` script")
                        (reparse-symbol indented_block_body) [16875 17179])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17199 17203]))                          
                        :documentation "Yield distributions for non-duplicate projects in the working set

        The yield order is the order in which the items' path entries were
        added to the working set.
        ")
                        (reparse-symbol indented_block_body) [17186 17727])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17740 17744])
                            ("dist" variable nil (reparse-symbol function_parameters) [17746 17750])
                            ("entry" variable nil (reparse-symbol function_parameters) [17752 17757])
                            ("insert" variable nil (reparse-symbol function_parameters) [17764 17770]))                          
                        :documentation "Add `dist` to working set, associated with `entry`

        If `entry` is unspecified, it defaults to the ``.location`` of `dist`.
        On exit from this routine, `entry` is added to the end of the working
        set's ``.entries`` (if it wasn't already present).

        `dist` is only added to the working set if it's for a project that
        doesn't already have a distribution in the set.  If it's added, any
        callbacks registered with the ``subscribe()`` method will be called.
        ")
                        (reparse-symbol indented_block_body) [17732 18827])
                    ("resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18844 18848])
                            ("requirements" variable nil (reparse-symbol function_parameters) [18850 18862])
                            ("env" variable nil (reparse-symbol function_parameters) [18864 18867])
                            ("installer" variable nil (reparse-symbol function_parameters) [18874 18883]))                          
                        :documentation "List all distributions needed to (recursively) meet `requirements`

        `requirements` must be a sequence of ``Requirement`` objects.  `env`,
        if supplied, should be an ``Environment`` instance.  If
        not supplied, it defaults to all distributions available within any
        entry or distribution in the working set.  `installer`, if supplied,
        will be invoked with each requirement that cannot be met by an
        already-installed distribution; it should return a ``Distribution`` or
        ``None``.
        ")
                        (reparse-symbol indented_block_body) [18832 21073])
                    ("find_plugins" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21095 21099])
                            ("plugin_env" variable nil (reparse-symbol function_parameters) [21109 21119])
                            ("full_env" variable nil (reparse-symbol function_parameters) [21121 21129])
                            ("installer" variable nil (reparse-symbol function_parameters) [21136 21145])
                            ("fallback" variable nil (reparse-symbol function_parameters) [21152 21160]))                          
                        :documentation "Find all activatable distributions in `plugin_env`

        Example usage::

            distributions, errors = working_set.find_plugins(
                Environment(plugin_dirlist)
            )
            map(working_set.add, distributions)  # add plugins+libs to sys.path
            print 'Could not load', errors        # display errors

        The `plugin_env` should be an ``Environment`` instance that contains
        only distributions that are in the project's \"plugin directory\" or
        directories. The `full_env`, if supplied, should be an ``Environment``
        contains all currently-available distributions.  If `full_env` is not
        supplied, one is created automatically from the ``WorkingSet`` this
        method is called on, which will typically mean that every directory on
        ``sys.path`` will be scanned for distributions.

        `installer` is a standard installer callback as used by the
        ``resolve()`` method. The `fallback` flag indicates whether we should
        attempt to resolve older versions of a plugin if the newest version
        cannot be resolved.

        This method returns a 2-tuple: (`distributions`, `error_info`), where
        `distributions` is a list of the distributions found in `plugin_env`
        that were loadable, along with any other distributions that are needed
        to resolve their dependencies.  `error_info` is a dictionary mapping
        unloadable plugin distributions to an exception instance describing the
        error that occurred. Usually this will be a ``DistributionNotFound`` or
        ``VersionConflict`` instance.
        ")
                        (reparse-symbol indented_block_body) [21078 24230])
                    ("require" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24251 24255])
                            ("requirements" variable nil (reparse-symbol function_parameters) [24257 24270]))                          
                        :documentation "Ensure that distributions matching `requirements` are activated

        `requirements` must be a string or a (possibly-nested) sequence
        thereof, specifying the distributions and versions required.  The
        return value is a sequence of the distributions that needed to be
        activated to fulfill the requirements; all relevant distributions are
        included, even if they were already activated in this working set.
        ")
                        (reparse-symbol indented_block_body) [24239 24877])
                    ("subscribe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24896 24900])
                            ("callback" variable nil (reparse-symbol function_parameters) [24902 24910]))                          
                        :documentation "Invoke `callback` for all distributions (including existing ones)")
                        (reparse-symbol indented_block_body) [24882 25144])
                    ("_added_new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25164 25168])
                            ("dist" variable nil (reparse-symbol function_parameters) [25170 25174]))                          )
                        (reparse-symbol indented_block_body) [25149 25244])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25266 25270]))                          )
                        (reparse-symbol indented_block_body) [25249 25403])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25425 25429])
                            ("e_k_b_c" variable nil (reparse-symbol function_parameters) [25431 25438]))                          )
                        (reparse-symbol indented_block_body) [25408 25638]))                  
                :type "class")
                nil [14266 25638])
            ("Environment" type
               (:documentation "Searchable snapshot of distributions on a search path"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Snapshot distributions available on a search path

        Any distributions found on `search_path` are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.

        `platform` is an optional string specifying the name of the platform
        that platform-specific distributions must be compatible with.  If
        unspecified, it defaults to the current platform.  `python` is an
        optional string naming the desired version of Python (e.g. ``'2.4'``);
        it defaults to the current version.

        You may explicitly set `platform` (and/or `python`) to ``None`` if you
        wish to map *all* distributions, not just those compatible with the
        running platform or Python version.
        \"\"\"" code nil (reparse-symbol indented_block_body) [25834 26641])
                            ("self" variable nil (reparse-symbol indented_block_body) [26650 26668])
                            ("self" variable nil (reparse-symbol indented_block_body) [26677 26693])
                            ("self" variable nil (reparse-symbol indented_block_body) [26702 26726])
                            ("self" variable nil (reparse-symbol indented_block_body) [26735 26755])
                            ("self" code nil (reparse-symbol indented_block_body) [26764 26786]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25749 25753])
                            ("search_path" variable nil (reparse-symbol function_parameters) [25755 25766])
                            ("platform" variable nil (reparse-symbol function_parameters) [25773 25781])
                            ("python" variable nil (reparse-symbol function_parameters) [25808 25814]))                          
                        :documentation "Snapshot distributions available on a search path

        Any distributions found on `search_path` are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.

        `platform` is an optional string specifying the name of the platform
        that platform-specific distributions must be compatible with.  If
        unspecified, it defaults to the current platform.  `python` is an
        optional string naming the desired version of Python (e.g. ``'2.4'``);
        it defaults to the current version.

        You may explicitly set `platform` (and/or `python`) to ``None`` if you
        wish to map *all* distributions, not just those compatible with the
        running platform or Python version.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25736 26787])
                    ("can_add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26804 26808])
                            ("dist" variable nil (reparse-symbol function_parameters) [26810 26814]))                          
                        :documentation "Is distribution `dist` acceptable for this environment?

        The distribution must match the platform and python version
        requirements specified when this environment was created, or False
        is returned.
        ")
                        (reparse-symbol indented_block_body) [26792 27236])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27252 27256])
                            ("dist" variable nil (reparse-symbol function_parameters) [27258 27262]))                          
                        :documentation "Remove `dist` from the environment")
                        (reparse-symbol indented_block_body) [27241 27359])
                    ("scan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27373 27377])
                            ("search_path" variable nil (reparse-symbol function_parameters) [27379 27390]))                          
                        :documentation "Scan `search_path` for distributions usable in this environment

        Any distributions found are added to the environment.
        `search_path` should be a sequence of ``sys.path`` items.  If not
        supplied, ``sys.path`` is used.  Only distributions conforming to
        the platform/python version defined at initialization are added.
        ")
                        (reparse-symbol indented_block_body) [27364 27951])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27972 27976])
                            ("project_name" variable nil (reparse-symbol function_parameters) [27977 27989]))                          
                        :documentation "Return a newest-to-oldest list of distributions for `project_name`
        ")
                        (reparse-symbol indented_block_body) [27956 28483])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28496 28500])
                            ("dist" variable nil (reparse-symbol function_parameters) [28501 28505]))                          
                        :documentation "Add `dist` if we ``can_add()`` it and it isn't already added")
                        (reparse-symbol indented_block_body) [28488 28863])
                    ("best_match" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28884 28888])
                            ("req" variable nil (reparse-symbol function_parameters) [28890 28893])
                            ("working_set" variable nil (reparse-symbol function_parameters) [28895 28906])
                            ("installer" variable nil (reparse-symbol function_parameters) [28908 28917]))                          
                        :documentation "Find distribution best matching `req` and usable on `working_set`

        This calls the ``find(req)`` method of the `working_set` to see if a
        suitable distribution is already active.  (This may raise
        ``VersionConflict`` if an unsuitable version of the project is already
        active in the specified `working_set`.)  If a suitable distribution
        isn't active, this method returns the newest distribution in the
        environment that meets the ``Requirement`` in `req`.  If no suitable
        distribution is found, and `installer` is supplied, then the result of
        calling the environment's ``obtain(req, installer)`` method will be
        returned.
        ")
                        (reparse-symbol indented_block_body) [28869 29887])
                    ("obtain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29903 29907])
                            ("requirement" variable nil (reparse-symbol function_parameters) [29909 29920])
                            ("installer" variable nil (reparse-symbol function_parameters) [29922 29931]))                          
                        :documentation "Obtain a distribution matching `requirement` (e.g. via download)

        Obtain a distro that matches requirement (e.g. via download).  In the
        base ``Environment`` class, this routine just returns
        ``installer(requirement)``, unless `installer` is None, in which case
        None is returned instead.  This method is a hook that allows subclasses
        to attempt other ways of obtaining a distribution before falling back
        to the `installer` argument.")
                        (reparse-symbol indented_block_body) [29892 30508])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30526 30530]))                          
                        :documentation "Yield the unique project names of the available distributions")
                        (reparse-symbol indented_block_body) [30513 30686])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30707 30711])
                            ("other" variable nil (reparse-symbol function_parameters) [30713 30718]))                          
                        :documentation "In-place addition of a distribution or environment")
                        (reparse-symbol indented_block_body) [30694 31118])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31135 31139])
                            ("other" variable nil (reparse-symbol function_parameters) [31141 31146]))                          
                        :documentation "Add an environment or distribution to an environment")
                        (reparse-symbol indented_block_body) [31123 31351]))                  
                :type "class")
                nil [25640 31351])
            ("AvailableDistributions" variable nil nil [31353 31389])
            ("ExtractionError" type
               (:documentation "An error occurred extracting a resource

    The following attributes are available from instances of this exception:

    manager
        The resource manager that raised this exception

    cache_path
        The base directory for resource extraction

    original_error
        The exception instance that caused extraction to fail
    "
                :superclasses ("RuntimeError")
                :type "class")
                nil [31424 31812])
            ("ResourceManager" type
               (:documentation "Manage resource extraction and packages"
                :members 
                  ( ("extraction_path" variable nil (reparse-symbol indented_block_body) [31893 31915])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31949 31971]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31934 31938]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31921 31972])
                    ("resource_exists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31997 32001])
                            ("package_or_requirement" variable nil (reparse-symbol function_parameters) [32003 32025])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [32027 32040]))                          
                        :documentation "Does the named resource exist?")
                        (reparse-symbol indented_block_body) [31977 32168])
                    ("resource_isdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32192 32196])
                            ("package_or_requirement" variable nil (reparse-symbol function_parameters) [32198 32220])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [32222 32235]))                          
                        :documentation "Is the named resource an existing directory?")
                        (reparse-symbol indented_block_body) [32173 32401])
                    ("resource_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32428 32432])
                            ("package_or_requirement" variable nil (reparse-symbol function_parameters) [32434 32456])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [32458 32471]))                          
                        :documentation "Return a true filesystem path for specified resource")
                        (reparse-symbol indented_block_body) [32406 32658])
                    ("resource_stream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32683 32687])
                            ("package_or_requirement" variable nil (reparse-symbol function_parameters) [32689 32711])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [32713 32726]))                          
                        :documentation "Return a readable file-like object for specified resource")
                        (reparse-symbol indented_block_body) [32663 32916])
                    ("resource_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32941 32945])
                            ("package_or_requirement" variable nil (reparse-symbol function_parameters) [32947 32969])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [32971 32984]))                          
                        :documentation "Return specified resource as a string")
                        (reparse-symbol indented_block_body) [32921 33154])
                    ("resource_listdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33180 33184])
                            ("package_or_requirement" variable nil (reparse-symbol function_parameters) [33186 33208])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [33210 33223]))                          
                        :documentation "List the contents of the named resource directory")
                        (reparse-symbol indented_block_body) [33159 33396])
                    ("extraction_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33422 33426]))                          
                        :documentation "Give an error message for problems extracting file(s)")
                        (reparse-symbol indented_block_body) [33401 34189])
                    ("get_cache_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34227 34231])
                            ("archive_name" variable nil (reparse-symbol function_parameters) [34233 34245])
                            ("names" variable nil (reparse-symbol function_parameters) [34247 34252]))                          
                        :documentation "Return absolute location in cache for `archive_name` and `names`

        The parent directory of the resulting path will be created if it does
        not already exist.  `archive_name` should be the base filename of the
        enclosing egg (which may not be the name of the enclosing zipfile!),
        including its \".egg\" extension.  `names`, if provided, should be a
        sequence of path name parts \"under\" the egg's extraction location.

        This method should only be called by resource providers that need to
        obtain an extraction location, and only for names they intend to
        extract, as it tracks the generated names for possible cleanup later.
        ")
                        (reparse-symbol indented_block_body) [34208 35347])
                    ("_warn_unsafe_extraction_path" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("path" variable nil (reparse-symbol function_parameters) [35403 35407]))                          
                        :documentation "
        If the default extraction path is overridden and set to an insecure
        location, such as /tmp, it opens up an opportunity for an attacker to
        replace an extracted file with an unauthorized payload. Warn the user
        if a known insecure location is used.

        See Distribute #375 for more details.
        ")
                        (reparse-symbol indented_block_body) [35352 36479])
                    ("postprocess" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36517 36521])
                            ("tempname" variable nil (reparse-symbol function_parameters) [36523 36531])
                            ("filename" variable nil (reparse-symbol function_parameters) [36533 36541]))                          
                        :documentation "Perform any platform-specific postprocessing of `tempname`

        This is where Mac header rewrites should be done; other platforms don't
        have anything special they should do.

        Resource providers should call this method ONLY after successfully
        extracting a compressed resource.  They must NOT call it on resources
        that are already in the filesystem.

        `tempname` is the current (temporary) name of the file, and `filename`
        is the name it will be renamed to by the caller after this routine
        returns.
        ")
                        (reparse-symbol indented_block_body) [36501 37314])
                    ("set_extraction_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37364 37368])
                            ("path" variable nil (reparse-symbol function_parameters) [37370 37374]))                          
                        :documentation "Set the base path where resources will be extracted to, if needed.

        If you do not call this routine before any extractions take place, the
        path defaults to the return value of ``get_default_cache()``.  (Which
        is based on the ``PYTHON_EGG_CACHE`` environment variable, with various
        platform-specific fallbacks.  See that routine's documentation for more
        details.)

        Resources are extracted to subdirectories of this path based upon
        information given by the ``IResourceProvider``.  You may set this to a
        temporary directory, but then you must call ``cleanup_resources()`` to
        delete the extracted files when done.  There is no guarantee that
        ``cleanup_resources()`` will be able to remove all extracted files.

        (Note: you may not change the extraction path for a given resource
        manager once resources have been extracted, unless you first call
        ``cleanup_resources()``.)
        ")
                        (reparse-symbol indented_block_body) [37340 38553])
                    ("cleanup_resources" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38580 38584])
                            ("force" variable nil (reparse-symbol function_parameters) [38586 38591]))                          
                        :documentation "
        Delete all extracted resource files and directories, returning a list
        of the file and directory names that could not be successfully removed.
        This function does not have any concurrency protection, so it should
        generally only be called when the extraction path is a temporary
        directory exclusive to a single process.  This method is not
        automatically called; you must call it explicitly or register it as an
        ``atexit`` function if you wish to ensure cleanup of a temporary
        directory used for extractions.
        ")
                        (reparse-symbol indented_block_body) [38558 39193]))                  
                :type "class")
                nil [31816 39193])
            ("get_default_cache" function (:documentation "Determine the default cache location

    This returns the ``PYTHON_EGG_CACHE`` environment variable, if set.
    Otherwise, on Windows, it returns a \"Python-Eggs\" subdirectory of the
    \"Application Data\" directory.  On all other systems, it's \"~/.python-eggs\".
    ") nil [39210 40523])
            ("safe_name" function
               (:documentation "Convert an arbitrary string to a standard distribution name

    Any runs of non-alphanumeric/. characters are replaced with a single '-'.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [40538 40542]))                  )
                nil [40524 40746])
            ("safe_version" function
               (:documentation "Convert an arbitrary string to a standard version string

    Spaces become dots, and all other non-alphanumeric characters become
    dashes, with runs of multiple dashes condensed to a single dash.
    "
                :arguments 
                  ( ("version" variable nil (reparse-symbol function_parameters) [40765 40772]))                  )
                nil [40748 41079])
            ("safe_extra" function
               (:documentation "Convert an arbitrary string to a standard 'extra' name

    Any runs of non-alphanumeric characters are replaced with a single '_',
    and the result is always lowercased.
    "
                :arguments 
                  ( ("extra" variable nil (reparse-symbol function_parameters) [41096 41101]))                  )
                nil [41081 41348])
            ("to_filename" function
               (:documentation "Convert a project or version name to its filename-escaped form

    Any '-' characters are currently replaced with '_'.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [41366 41370]))                  )
                nil [41350 41541])
            ("_marker_names" variable nil nil [41549 41737])
            ("_marker_values" variable nil nil [41739 42168])
            ("_platinfo" function (:arguments 
              ( ("attr" variable nil (reparse-symbol function_parameters) [42184 42188]))              ) nil [42170 42314])
            ("_pyimp" function nil nil [42315 42557])
            ("invalid_marker" function
               (:documentation "Validate text as a PEP 426 environment marker; return exception or False"
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [42577 42581]))                  )
                nil [42558 42780])
            ("evaluate_marker" function
               (:documentation "
    Evaluate a PEP 426 environment marker on CPython 2.4+.
    Return a boolean indicating the marker result in this environment.
    Raise SyntaxError if marker is invalid.

    This implementation uses the 'parser' module, which is not implemented on
    Jython and has been superseded by the 'ast' module in Python 2.6 and
    later.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [42801 42805])
                    ("extra" variable nil (reparse-symbol function_parameters) [42807 42812])
                    ("_ops" variable nil (reparse-symbol function_parameters) [42819 42823]))                  )
                nil [42781 50656])
            ("register_loader_type" code nil nil [50657 50699])
            ("EggProvider" type
               (:documentation "Provider based on a virtual filesystem"
                :superclasses ("NullProvider")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("NullProvider" code nil (reparse-symbol indented_block_body) [50824 50858])
                            ("self" code nil (reparse-symbol indented_block_body) [50867 50887]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50802 50806])
                            ("module" variable nil (reparse-symbol function_parameters) [50807 50813]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50789 50888])
                    ("_setup_prefix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50911 50915]))                          )
                        (reparse-symbol indented_block_body) [50893 51438]))                  
                :type "class")
                nil [50702 51438])
            ("DefaultProvider" type
               (:documentation "Provides access to package resources in the filesystem"
                :superclasses ("EggProvider")
                :members 
                  ( ("_has" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51559 51563])
                            ("path" variable nil (reparse-symbol function_parameters) [51565 51569]))                          )
                        (reparse-symbol indented_block_body) [51550 51608])
                    ("_isdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51624 51628])
                            ("path" variable nil (reparse-symbol function_parameters) [51629 51633]))                          )
                        (reparse-symbol indented_block_body) [51613 51671])
                    ("_listdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51689 51693])
                            ("path" variable nil (reparse-symbol function_parameters) [51694 51698]))                          )
                        (reparse-symbol indented_block_body) [51676 51733])
                    ("get_resource_stream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51762 51766])
                            ("manager" variable nil (reparse-symbol function_parameters) [51768 51775])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [51777 51790]))                          )
                        (reparse-symbol indented_block_body) [51738 51862])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51876 51880])
                            ("path" variable nil (reparse-symbol function_parameters) [51882 51886]))                          )
                        (reparse-symbol indented_block_body) [51867 52013]))                  
                :type "class")
                nil [51444 52013])
            ("register_loader_type" code nil nil [52014 52063])
            ("if" code nil nil [52065 52181])
            ("EmptyProvider" type
               (:documentation "Provider that returns nothing for all requests"
                :superclasses ("NullProvider")
                :members 
                  ( ("_isdir" variable nil (reparse-symbol indented_block_body) [52280 52319])
                    ("_get" variable nil (reparse-symbol indented_block_body) [52324 52360])
                    ("_listdir" variable nil (reparse-symbol indented_block_body) [52365 52401])
                    ("module_path" variable nil (reparse-symbol indented_block_body) [52406 52426])
                    ("__init__" function
                       (:suite 
                          ( ("pass" code nil (reparse-symbol indented_block_body) [52460 52464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52445 52449]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52432 52465]))                  
                :type "class")
                nil [52183 52465])
            ("empty_provider" variable nil nil [52466 52498])
            ("build_zipmanifest" function
               (:documentation "
    This builds a similar dictionary to the zipimport directory
    caches.  However instead of tuples, ZipInfo objects are stored.

    The translation of the tuple is as follows:
      * [0] - zipinfo.filename on stock pythons this needs \"/\" --> os.sep
              on pypy it is the same (one reason why distribute did work
              in some cases on pypy and win32).
      * [1] - zipinfo.compress_type
      * [2] - zipinfo.compress_size
      * [3] - zipinfo.file_size
      * [4] - len(utf-8 encoding of filename) if zipinfo & 0x800
              len(ascii encoding of filename) otherwise
      * [5] - (zipinfo.date_time[0] - 1980) << 9 |
               zipinfo.date_time[1] << 5 | zipinfo.date_time[2]
      * [6] - (zipinfo.date_time[3] - 1980) << 11 |
               zipinfo.date_time[4] << 5 | (zipinfo.date_time[5] // 2)
      * [7] - zipinfo.CRC
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [52523 52527]))                  )
                nil [52501 53759])
            ("ZipProvider" type
               (:documentation "Resource support for zips and eggs"
                :superclasses ("EggProvider")
                :members 
                  ( ("eagers" variable nil (reparse-symbol indented_block_body) [53843 53856])
                    ("__init__" function
                       (:suite 
                          ( ("EggProvider" code nil (reparse-symbol indented_block_body) [53898 53931])
                            ("self" variable nil (reparse-symbol indented_block_body) [53940 53993])
                            ("self" code nil (reparse-symbol indented_block_body) [54002 54043]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53875 53879])
                            ("module" variable nil (reparse-symbol function_parameters) [53881 53887]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53862 54044])
                    ("_zipinfo_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54067 54071])
                            ("fspath" variable nil (reparse-symbol function_parameters) [54073 54079]))                          )
                        (reparse-symbol indented_block_body) [54049 54431])
                    ("_parts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54447 54451])
                            ("zip_path" variable nil (reparse-symbol function_parameters) [54452 54460]))                          )
                        (reparse-symbol indented_block_body) [54436 54812])
                    ("get_resource_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54843 54847])
                            ("manager" variable nil (reparse-symbol function_parameters) [54849 54856])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [54858 54871]))                          )
                        (reparse-symbol indented_block_body) [54817 55413])
                    ("_get_date_and_size" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("zip_stat" variable nil (reparse-symbol function_parameters) [55459 55467]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55418 55690])
                    ("_extract_resource" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55717 55721])
                            ("manager" variable nil (reparse-symbol function_parameters) [55723 55730])
                            ("zip_path" variable nil (reparse-symbol function_parameters) [55732 55740]))                          )
                        (reparse-symbol indented_block_body) [55695 57458])
                    ("_is_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57479 57483])
                            ("file_path" variable nil (reparse-symbol function_parameters) [57485 57494])
                            ("zip_path" variable nil (reparse-symbol function_parameters) [57496 57504]))                          
                        :documentation "
        Return True if the file_path is current for this zip_path
        ")
                        (reparse-symbol indented_block_body) [57463 58080])
                    ("_get_eager_resources" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58110 58114]))                          )
                        (reparse-symbol indented_block_body) [58085 58410])
                    ("_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58426 58430]))                          )
                        (reparse-symbol indented_block_body) [58415 58951])
                    ("_has" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58965 58969])
                            ("fspath" variable nil (reparse-symbol function_parameters) [58971 58977]))                          )
                        (reparse-symbol indented_block_body) [58956 59095])
                    ("_isdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59111 59115])
                            ("fspath" variable nil (reparse-symbol function_parameters) [59116 59122]))                          )
                        (reparse-symbol indented_block_body) [59100 59184])
                    ("_listdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59202 59206])
                            ("fspath" variable nil (reparse-symbol function_parameters) [59207 59213]))                          )
                        (reparse-symbol indented_block_body) [59189 59287])
                    ("_eager_to_zip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59310 59314])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [59315 59328]))                          )
                        (reparse-symbol indented_block_body) [59292 59404])
                    ("_resource_to_zip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59430 59434])
                            ("resource_name" variable nil (reparse-symbol function_parameters) [59435 59448]))                          )
                        (reparse-symbol indented_block_body) [59409 59527]))                  
                :type "class")
                nil [53761 59527])
            ("register_loader_type" code nil nil [59528 59584])
            ("FileMetadata" type
               (:documentation "Metadata handler for standalone PKG-INFO files

    Usage::

        metadata = FileMetadata(\"/path/to/PKG-INFO\")

    This provider rejects all data and metadata requests except for PKG-INFO,
    which is treated as existing, and will be the contents of the file at
    the provided location.
    "
                :superclasses ("EmptyProvider")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [59991 60007]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59971 59975])
                            ("path" variable nil (reparse-symbol function_parameters) [59976 59980]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [59958 60008])
                    ("has_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60030 60034])
                            ("name" variable nil (reparse-symbol function_parameters) [60035 60039]))                          )
                        (reparse-symbol indented_block_body) [60013 60074])
                    ("get_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60096 60100])
                            ("name" variable nil (reparse-symbol function_parameters) [60101 60105]))                          )
                        (reparse-symbol indented_block_body) [60079 60323])
                    ("get_metadata_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60351 60355])
                            ("name" variable nil (reparse-symbol function_parameters) [60356 60360]))                          )
                        (reparse-symbol indented_block_body) [60328 60415]))                  
                :type "class")
                nil [59609 60415])
            ("PathMetadata" type
               (:documentation "Metadata provider for egg directories

    Usage::

        # Development eggs:

        egg_info = \"/path/to/PackageName.egg-info\"
        base_dir = os.path.dirname(egg_info)
        metadata = PathMetadata(base_dir, egg_info)
        dist_name = os.path.splitext(os.path.basename(egg_info))[0]
        dist = Distribution(basedir,project_name=dist_name,metadata=metadata)

        # Unpacked egg directories:

        egg_path = \"/path/to/PackageName-ver-pyver-etc.egg\"
        metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))
        dist = Distribution.from_filename(egg_path, metadata=metadata)
    "
                :superclasses ("DefaultProvider")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [61153 61176])
                            ("self" variable nil (reparse-symbol indented_block_body) [61185 61209]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61122 61126])
                            ("path" variable nil (reparse-symbol function_parameters) [61128 61132])
                            ("egg_info" variable nil (reparse-symbol function_parameters) [61134 61142]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61109 61210]))                  
                :type "class")
                nil [60431 61210])
            ("EggMetadata" type
               (:documentation "Metadata provider for .egg files"
                :superclasses ("ZipProvider")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a metadata provider from a zipimporter\"\"\"" code nil (reparse-symbol indented_block_body) [61330 61381])
                            ("self" variable nil (reparse-symbol indented_block_body) [61391 61441])
                            ("self" code nil (reparse-symbol indented_block_body) [61450 61488])
                            ("self" variable nil (reparse-symbol indented_block_body) [61497 61519])
                            ("if" code nil (reparse-symbol indented_block_body) [61528 61689])
                            ("self" code nil (reparse-symbol indented_block_body) [61697 61717]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61305 61309])
                            ("importer" variable nil (reparse-symbol function_parameters) [61311 61319]))                          
                        :documentation "Create a metadata provider from a zipimporter"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61292 61718]))                  
                :type "class")
                nil [61212 61718])
            ("ImpWrapper" type
               (:documentation "PEP 302 Importer that wraps Python's \"normal\" import algorithm"
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [61855 61871]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61829 61833])
                            ("path" variable nil (reparse-symbol function_parameters) [61835 61839]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61816 61872])
                    ("find_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61893 61897])
                            ("fullname" variable nil (reparse-symbol function_parameters) [61899 61907])
                            ("path" variable nil (reparse-symbol function_parameters) [61909 61913]))                          )
                        (reparse-symbol indented_block_body) [61877 62316]))                  
                :type "class")
                nil [61720 62316])
            ("ImpLoader" type
               (:documentation "PEP 302 Loader that wraps Python's \"normal\" import algorithm"
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [62460 62476])
                            ("self" variable nil (reparse-symbol indented_block_body) [62485 62509])
                            ("self" variable nil (reparse-symbol indented_block_body) [62518 62532]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62424 62428])
                            ("file" variable nil (reparse-symbol function_parameters) [62430 62434])
                            ("filename" variable nil (reparse-symbol function_parameters) [62436 62444])
                            ("etc" variable nil (reparse-symbol function_parameters) [62446 62449]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [62411 62533])
                    ("load_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62554 62558])
                            ("fullname" variable nil (reparse-symbol function_parameters) [62560 62568]))                          )
                        (reparse-symbol indented_block_body) [62538 62895]))                  
                :type "class")
                nil [62318 62895])
            ("get_importer" function
               (:documentation "Retrieve a PEP 302 \"importer\" for the given path item

    If there is no importer, this returns a wrapper around the builtin import
    machinery.  The returned importer is only cached if it was created by a
    path hook.
    "
                :arguments 
                  ( ("path_item" variable nil (reparse-symbol function_parameters) [62916 62925]))                  )
                nil [62899 63690])
            ("try" code nil nil [63691 63938])
            ("_declare_state" code nil nil [63944 63994])
            ("register_finder" function
               (:documentation "Register `distribution_finder` to find distributions in sys.path items

    `importer_type` is the type or class of a PEP 302 \"Importer\" (sys.path item
    handler), and `distribution_finder` is a callable that, passed a path
    item and the importer instance, yields ``Distribution`` instances found on
    that path item.  See ``pkg_resources.find_on_path`` for an example."
                :arguments 
                  ( ("importer_type" variable nil (reparse-symbol function_parameters) [64016 64029])
                    ("distribution_finder" variable nil (reparse-symbol function_parameters) [64031 64050]))                  )
                nil [63996 64503])
            ("find_distributions" function
               (:documentation "Yield distributions accessible via `path_item`"
                :arguments 
                  ( ("path_item" variable nil (reparse-symbol function_parameters) [64528 64537])
                    ("only" variable nil (reparse-symbol function_parameters) [64539 64543]))                  )
                nil [64505 64753])
            ("find_in_zip" function (:arguments 
              ( ("importer" variable nil (reparse-symbol function_parameters) [64770 64778])
                ("path_item" variable nil (reparse-symbol function_parameters) [64780 64789])
                ("only" variable nil (reparse-symbol function_parameters) [64791 64795]))              ) nil [64754 65260])
            ("register_finder" code nil nil [65261 65312])
            ("find_nothing" function (:arguments 
              ( ("importer" variable nil (reparse-symbol function_parameters) [65331 65339])
                ("path_item" variable nil (reparse-symbol function_parameters) [65341 65350])
                ("only" variable nil (reparse-symbol function_parameters) [65352 65356]))              ) nil [65314 65379])
            ("register_finder" code nil nil [65379 65415])
            ("find_on_path" function
               (:documentation "Yield distributions accessible on a sys.path directory"
                :arguments 
                  ( ("importer" variable nil (reparse-symbol function_parameters) [65434 65442])
                    ("path_item" variable nil (reparse-symbol function_parameters) [65444 65453])
                    ("only" variable nil (reparse-symbol function_parameters) [65455 65459]))                  )
                nil [65417 67361])
            ("register_finder" code nil nil [67361 67401])
            ("if" code nil nil [67403 67505])
            ("_declare_state" code nil nil [67506 67552])
            ("_declare_state" code nil nil [67553 67599])
            ("register_namespace_handler" function
               (:documentation "Register `namespace_handler` to declare namespace packages

    `importer_type` is the type or class of a PEP 302 \"Importer\" (sys.path item
    handler), and `namespace_handler` is a callable like this::

        def namespace_handler(importer,path_entry,moduleName,module):
            # return a path_entry to use for child packages

    Namespace handlers are only called if the importer object has already
    agreed that it can handle the relevant path item, and they should only
    return a subpath if the module __path__ does not already contain an
    equivalent subpath.  For an example namespace handler, see
    ``pkg_resources.file_ns_handler``.
    "
                :arguments 
                  ( ("importer_type" variable nil (reparse-symbol function_parameters) [67633 67646])
                    ("namespace_handler" variable nil (reparse-symbol function_parameters) [67648 67665]))                  )
                nil [67602 68401])
            ("_handle_ns" function
               (:documentation "Ensure that named package includes a subpath of path_item (if needed)"
                :arguments 
                  ( ("packageName" variable nil (reparse-symbol function_parameters) [68417 68428])
                    ("path_item" variable nil (reparse-symbol function_parameters) [68430 68439]))                  )
                nil [68402 69271])
            ("declare_namespace" function
               (:documentation "Declare that package 'packageName' is a namespace package"
                :arguments 
                  ( ("packageName" variable nil (reparse-symbol function_parameters) [69294 69305]))                  )
                nil [69272 70350])
            ("fixup_namespace_packages" function
               (:documentation "Ensure that previously-declared namespace packages include path_item"
                :arguments 
                  ( ("path_item" variable nil (reparse-symbol function_parameters) [70380 70389])
                    ("parent" variable nil (reparse-symbol function_parameters) [70391 70397]))                  )
                nil [70351 70734])
            ("file_ns_handler" function
               (:documentation "Compute an ns-package subpath for a filesystem or zipfile importer"
                :arguments 
                  ( ("importer" variable nil (reparse-symbol function_parameters) [70755 70763])
                    ("path_item" variable nil (reparse-symbol function_parameters) [70765 70774])
                    ("packageName" variable nil (reparse-symbol function_parameters) [70776 70787])
                    ("module" variable nil (reparse-symbol function_parameters) [70789 70795]))                  )
                nil [70735 71175])
            ("register_namespace_handler" code nil nil [71176 71230])
            ("register_namespace_handler" code nil nil [71231 71296])
            ("if" code nil nil [71298 71414])
            ("null_ns_handler" function (:arguments 
              ( ("importer" variable nil (reparse-symbol function_parameters) [71436 71444])
                ("path_item" variable nil (reparse-symbol function_parameters) [71446 71455])
                ("packageName" variable nil (reparse-symbol function_parameters) [71457 71468])
                ("module" variable nil (reparse-symbol function_parameters) [71470 71476]))              ) nil [71416 71495])
            ("register_namespace_handler" code nil nil [71496 71546])
            ("normalize_path" function
               (:documentation "Normalize a file/dir name for comparison purposes"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [71568 71576]))                  )
                nil [71549 71695])
            ("_normalize_cached" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [71718 71726])
                ("_cache" variable nil (reparse-symbol function_parameters) [71727 71733]))              ) nil [71696 71884])
            ("_set_parent_ns" function (:arguments 
              ( ("packageName" variable nil (reparse-symbol function_parameters) [71904 71915]))              ) nil [71885 72092])
            ("yield_lines" function
               (:documentation "Yield non-empty/non-comment lines of a ``basestring`` or sequence"
                :arguments 
                  ( ("strs" variable nil (reparse-symbol function_parameters) [72110 72114]))                  )
                nil [72094 72487])
            ("LINE_END" variable nil nil [72488 72530])
            ("CONTINUE" variable nil nil [72564 72611])
            ("DISTRO" variable nil nil [72635 72682])
            ("VERSION" variable nil nil [72710 72775])
            ("COMMA" variable nil nil [72789 72825])
            ("OBRACKET" variable nil nil [72862 72899])
            ("CBRACKET" variable nil nil [72900 72937])
            ("MODULE" variable nil nil [72938 72982])
            ("EGG_NAME" variable nil nil [72983 73137])
            ("component_re" variable nil nil [73139 73203])
            ("replace" variable nil nil [73204 73276])
            ("_parse_version_parts" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [73303 73304]))              ) nil [73278 73650])
            ("parse_version" function
               (:documentation "Convert a version string to a chronologically-sortable key

    This is a rough cross between distutils' StrictVersion and LooseVersion;
    if you give it versions that would work with StrictVersion, then it behaves
    the same; otherwise it acts like a slightly-smarter LooseVersion. It is
    *possible* to create pathological version coding schemes that will fool
    this parser, but they should be very rare in practice.

    The returned value will be a tuple of strings.  Numeric portions of the
    version are padded to 8 digits so they will compare numerically, but
    without relying on how numbers compare relative to strings.  Dots are
    dropped, but dashes are retained.  Trailing zeros between alpha segments
    or dashes are suppressed, so that e.g. \"2.4.0\" is considered the same as
    \"2.4\". Alphanumeric parts are lower-cased.

    The algorithm assumes that strings like \"-\" and any alpha string that
    alphabetically follows \"final\"  represents a \"patch level\".  So, \"2.4-1\"
    is assumed to be a branch or patch of \"2.4\", and therefore \"2.4.1\" is
    considered newer than \"2.4-1\", which in turn is newer than \"2.4\".

    Strings like \"a\", \"b\", \"c\", \"alpha\", \"beta\", \"candidate\" and so on (that
    come before \"final\" alphabetically) are assumed to be pre-release versions,
    so that the version \"2.4\" is considered newer than \"2.4a1\".

    Finally, to handle miscellaneous cases, the strings \"pre\", \"preview\", and
    \"rc\" are treated as if they were \"c\", i.e. as though they were release
    candidates, and therefore are not as new as a version string that does not
    contain them, and \"dev\" is replaced with an '@' so that it sorts lower than
    than any other pre-release tag.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [73669 73670]))                  )
                nil [73651 75840])
            ("EntryPoint" type
               (:documentation "Object representing an advertised importable object"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [76012 76105])
                            ("self" variable nil (reparse-symbol indented_block_body) [76113 76129])
                            ("self" variable nil (reparse-symbol indented_block_body) [76138 76168])
                            ("self" variable nil (reparse-symbol indented_block_body) [76177 76202])
                            ("self" variable nil (reparse-symbol indented_block_body) [76211 76279])
                            ("self" variable nil (reparse-symbol indented_block_body) [76288 76304]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75946 75950])
                            ("name" variable nil (reparse-symbol function_parameters) [75952 75956])
                            ("module_name" variable nil (reparse-symbol function_parameters) [75958 75969])
                            ("attrs" variable nil (reparse-symbol function_parameters) [75971 75976])
                            ("extras" variable nil (reparse-symbol function_parameters) [75981 75987])
                            ("dist" variable nil (reparse-symbol function_parameters) [75992 75996]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75933 76305])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76322 76326]))                          )
                        (reparse-symbol indented_block_body) [76310 76540])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76558 76562]))                          )
                        (reparse-symbol indented_block_body) [76545 76615])
                    ("load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76629 76633])
                            ("require" variable nil (reparse-symbol function_parameters) [76635 76642])
                            ("env" variable nil (reparse-symbol function_parameters) [76649 76652])
                            ("installer" variable nil (reparse-symbol function_parameters) [76659 76668]))                          )
                        (reparse-symbol indented_block_body) [76620 77029])
                    ("require" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77046 77050])
                            ("env" variable nil (reparse-symbol function_parameters) [77052 77055])
                            ("installer" variable nil (reparse-symbol function_parameters) [77062 77071]))                          )
                        (reparse-symbol indented_block_body) [77034 77315])
                    ("parse" function
                       (:documentation "Parse a single entry point from string `src`

        Entry point syntax follows the form::

            name = some.module:some.attr [extra1,extra2]

        The entry name and module name are required, but the ``:attrs`` and
        ``[extras]`` parts are optional
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [77350 77353])
                            ("src" variable nil (reparse-symbol function_parameters) [77355 77358])
                            ("dist" variable nil (reparse-symbol function_parameters) [77360 77364]))                          )
                        (reparse-symbol indented_block_body) [77340 78431])
                    ("parse" variable nil (reparse-symbol indented_block_body) [78436 78462])
                    ("parse_group" function
                       (:documentation "Parse an entry point group"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [78509 78512])
                            ("group" variable nil (reparse-symbol function_parameters) [78514 78519])
                            ("lines" variable nil (reparse-symbol function_parameters) [78521 78526])
                            ("dist" variable nil (reparse-symbol function_parameters) [78528 78532]))                          )
                        (reparse-symbol indented_block_body) [78493 78921])
                    ("parse_group" variable nil (reparse-symbol indented_block_body) [78926 78964])
                    ("parse_map" function
                       (:documentation "Parse a map of entry point groups"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [79002 79005])
                            ("data" variable nil (reparse-symbol function_parameters) [79007 79011])
                            ("dist" variable nil (reparse-symbol function_parameters) [79013 79017]))                          )
                        (reparse-symbol indented_block_body) [78988 79618])
                    ("parse_map" variable nil (reparse-symbol indented_block_body) [79623 79657]))                  
                :type "class")
                nil [75840 79658])
            ("_remove_md5_fragment" function (:arguments 
              ( ("location" variable nil (reparse-symbol function_parameters) [79685 79693]))              ) nil [79660 79872])
            ("Distribution" type
               (:documentation "Wrap an actual or potential sys.path entry w/metadata"
                :superclasses ("object")
                :members 
                  ( ("PKG_INFO" variable nil (reparse-symbol indented_block_body) [79970 79991])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [80168 80224])
                            ("if" code nil (reparse-symbol indented_block_body) [80233 80307])
                            ("self" variable nil (reparse-symbol indented_block_body) [80315 80343])
                            ("self" variable nil (reparse-symbol indented_block_body) [80352 80376])
                            ("self" variable nil (reparse-symbol indented_block_body) [80385 80409])
                            ("self" variable nil (reparse-symbol indented_block_body) [80418 80446])
                            ("self" code nil (reparse-symbol indented_block_body) [80455 80498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80010 80014])
                            ("location" variable nil (reparse-symbol function_parameters) [80024 80032])
                            ("metadata" variable nil (reparse-symbol function_parameters) [80039 80047])
                            ("project_name" variable nil (reparse-symbol function_parameters) [80054 80066])
                            ("version" variable nil (reparse-symbol function_parameters) [80073 80080])
                            ("py_version" variable nil (reparse-symbol function_parameters) [80095 80105])
                            ("platform" variable nil (reparse-symbol function_parameters) [80116 80124])
                            ("precedence" variable nil (reparse-symbol function_parameters) [80131 80141]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [79997 80499])
                    ("from_location" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [80540 80543])
                        ("location" variable nil (reparse-symbol function_parameters) [80544 80552])
                        ("basename" variable nil (reparse-symbol function_parameters) [80553 80561])
                        ("metadata" variable nil (reparse-symbol function_parameters) [80562 80570])
                        ("kw" variable nil (reparse-symbol function_parameters) [80576 80580]))                      ) (reparse-symbol indented_block_body) [80522 81214])
                    ("from_location" variable nil (reparse-symbol indented_block_body) [81218 81260])
                    ("hashcmp" variable nil (reparse-symbol indented_block_body) [81267 81527])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81545 81549]))                          )
                        (reparse-symbol indented_block_body) [81532 81578])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81593 81597])
                            ("other" variable nil (reparse-symbol function_parameters) [81599 81604]))                          )
                        (reparse-symbol indented_block_body) [81582 81651])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81666 81670])
                            ("other" variable nil (reparse-symbol function_parameters) [81672 81677]))                          )
                        (reparse-symbol indented_block_body) [81655 81725])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81740 81744])
                            ("other" variable nil (reparse-symbol function_parameters) [81746 81751]))                          )
                        (reparse-symbol indented_block_body) [81729 81798])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81813 81817])
                            ("other" variable nil (reparse-symbol function_parameters) [81819 81824]))                          )
                        (reparse-symbol indented_block_body) [81802 81872])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81887 81891])
                            ("other" variable nil (reparse-symbol function_parameters) [81893 81898]))                          )
                        (reparse-symbol indented_block_body) [81876 82082])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82097 82101])
                            ("other" variable nil (reparse-symbol function_parameters) [82103 82108]))                          )
                        (reparse-symbol indented_block_body) [82086 82144])
                    ("key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82390 82394]))                          )
                        (reparse-symbol indented_block_body) [82382 82549])
                    ("key" variable nil (reparse-symbol indented_block_body) [82553 82572])
                    ("parsed_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82612 82616]))                          )
                        (reparse-symbol indented_block_body) [82593 82793])
                    ("parsed_version" variable nil (reparse-symbol indented_block_body) [82798 82839])
                    ("version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82872 82876]))                          )
                        (reparse-symbol indented_block_body) [82860 83346])
                    ("version" variable nil (reparse-symbol indented_block_body) [83350 83377])
                    ("_dep_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83414 83418]))                          )
                        (reparse-symbol indented_block_body) [83401 84174])
                    ("_dep_map" variable nil (reparse-symbol indented_block_body) [84178 84207])
                    ("requires" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84226 84230])
                            ("extras" variable nil (reparse-symbol function_parameters) [84231 84237]))                          
                        :documentation "List of Requirements needed for this distro if `extras` are used")
                        (reparse-symbol indented_block_body) [84213 84668])
                    ("_get_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84691 84695])
                            ("name" variable nil (reparse-symbol function_parameters) [84696 84700]))                          )
                        (reparse-symbol indented_block_body) [84673 84821])
                    ("activate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84841 84845])
                            ("path" variable nil (reparse-symbol function_parameters) [84846 84850]))                          
                        :documentation "Ensure distribution is importable on `path` (default=sys.path)")
                        (reparse-symbol indented_block_body) [84828 85173])
                    ("egg_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85192 85196]))                          
                        :documentation "Return what this distribution's standard .egg filename should be")
                        (reparse-symbol indented_block_body) [85179 85528])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85546 85550]))                          )
                        (reparse-symbol indented_block_body) [85533 85674])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85691 85695]))                          )
                        (reparse-symbol indented_block_body) [85679 85894])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85915 85919])
                            ("attr" variable nil (reparse-symbol function_parameters) [85920 85924]))                          
                        :documentation "Delegate all unrecognized public attributes to .metadata provider")
                        (reparse-symbol indented_block_body) [85899 86124])
                    ("from_filename" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [86168 86171])
                        ("filename" variable nil (reparse-symbol function_parameters) [86172 86180])
                        ("metadata" variable nil (reparse-symbol function_parameters) [86181 86189])
                        ("kw" variable nil (reparse-symbol function_parameters) [86196 86200]))                      ) (reparse-symbol indented_block_body) [86150 86343])
                    ("from_filename" variable nil (reparse-symbol indented_block_body) [86347 86389])
                    ("as_requirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86414 86418]))                          
                        :documentation "Return a ``Requirement`` that matches this distribution exactly")
                        (reparse-symbol indented_block_body) [86395 86578])
                    ("load_entry_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86604 86608])
                            ("group" variable nil (reparse-symbol function_parameters) [86610 86615])
                            ("name" variable nil (reparse-symbol function_parameters) [86617 86621]))                          
                        :documentation "Return the `name` entry point of `group` or raise ImportError")
                        (reparse-symbol indented_block_body) [86583 86869])
                    ("get_entry_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86892 86896])
                            ("group" variable nil (reparse-symbol function_parameters) [86898 86903]))                          
                        :documentation "Return the entry point map for `group`, or the full entry map")
                        (reparse-symbol indented_block_body) [86874 87290])
                    ("get_entry_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87314 87318])
                            ("group" variable nil (reparse-symbol function_parameters) [87320 87325])
                            ("name" variable nil (reparse-symbol function_parameters) [87327 87331]))                          
                        :documentation "Return the EntryPoint object for `group`+`name`, or ``None``")
                        (reparse-symbol indented_block_body) [87295 87460])
                    ("insert_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87485 87489])
                            ("path" variable nil (reparse-symbol function_parameters) [87491 87495])
                            ("loc" variable nil (reparse-symbol function_parameters) [87497 87500]))                          
                        :documentation "Insert self.location in path before its nearest parent directory")
                        (reparse-symbol indented_block_body) [87471 88684])
                    ("check_version_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88717 88721]))                          )
                        (reparse-symbol indented_block_body) [88690 89648])
                    ("has_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89669 89673]))                          )
                        (reparse-symbol indented_block_body) [89653 89843])
                    ("clone" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89858 89862])
                            ("kw" variable nil (reparse-symbol function_parameters) [89863 89867]))                          
                        :documentation "Copy this distribution, substituting in any changed keyword args")
                        (reparse-symbol indented_block_body) [89848 90227])
                    ("extras" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90261 90265]))                          )
                        (reparse-symbol indented_block_body) [90250 90321])
                    ("extras" variable nil (reparse-symbol indented_block_body) [90325 90350]))                  
                :type "class")
                nil [79874 90351])
            ("DistInfoDistribution" type
               (:documentation "Wrap an actual or potential sys.path entry w/metadata, .dist-info style"
                :superclasses ("Distribution")
                :members 
                  ( ("PKG_INFO" variable nil (reparse-symbol indented_block_body) [90481 90502])
                    ("EQEQ" variable nil (reparse-symbol indented_block_body) [90507 90556])
                    ("_parsed_pkg_info" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90597 90601]))                          
                        :documentation "Parse and cache metadata")
                        (reparse-symbol indented_block_body) [90562 90880])
                    ("_dep_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90912 90916]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [90885 91089])
                    ("_preparse_requirement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91120 91124])
                            ("requires_dist" variable nil (reparse-symbol function_parameters) [91126 91139]))                          
                        :documentation "Convert 'Foobar (1); baz' to ('Foobar ==1', 'baz')
        Split environment marker, add == prefix to version specifiers as
        necessary, and remove parenthesis.
        ")
                        (reparse-symbol indented_block_body) [91094 91605])
                    ("_compute_dependencies" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91636 91640]))                          
                        :documentation "Recompute this distribution's dependencies.")
                        (reparse-symbol indented_block_body) [91610 92589]))                  
                :type "class")
                nil [90353 92589])
            ("_distributionImpl" variable nil nil [92591 92739])
            ("issue_warning" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [92760 92765])
                ("kw" variable nil (reparse-symbol function_parameters) [92766 92770]))              ) nil [92742 93116])
            ("parse_requirements" function
               (:documentation "Yield ``Requirement`` objects for each specification in `strs`

    `strs` must be an instance of ``basestring``, or a (possibly-nested)
    iterable thereof.
    "
                :arguments 
                  ( ("strs" variable nil (reparse-symbol function_parameters) [93162 93166]))                  )
                nil [93139 95074])
            ("_sort_dists" function (:arguments 
              ( ("dists" variable nil (reparse-symbol function_parameters) [95092 95097]))              ) nil [95076 95203])
            ("Requirement" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!\"\"\"" code nil (reparse-symbol indented_block_body) [95300 95368])
                            ("self, project_name" code nil (reparse-symbol indented_block_body) [95377 95447])
                            ("self, self" code nil (reparse-symbol indented_block_body) [95456 95520])
                            ("index" variable nil (reparse-symbol indented_block_body) [95529 95598])
                            ("index" code nil (reparse-symbol indented_block_body) [95607 95619])
                            ("self" variable nil (reparse-symbol indented_block_body) [95628 95684])
                            ("self, self" code nil (reparse-symbol indented_block_body) [95693 95755])
                            ("self" variable nil (reparse-symbol indented_block_body) [95764 95902])
                            ("self" variable nil (reparse-symbol indented_block_body) [95911 95943]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95256 95260])
                            ("project_name" variable nil (reparse-symbol function_parameters) [95262 95274])
                            ("specs" variable nil (reparse-symbol function_parameters) [95276 95281])
                            ("extras" variable nil (reparse-symbol function_parameters) [95283 95289]))                          
                        :documentation "DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [95243 95944])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95961 95965]))                          )
                        (reparse-symbol indented_block_body) [95949 96171])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96187 96191])
                            ("other" variable nil (reparse-symbol function_parameters) [96192 96197]))                          )
                        (reparse-symbol indented_block_body) [96176 96277])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96299 96303])
                            ("item" variable nil (reparse-symbol function_parameters) [96304 96308]))                          )
                        (reparse-symbol indented_block_body) [96282 97038])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97057 97061]))                          )
                        (reparse-symbol indented_block_body) [97044 97091])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97109 97113]))                          )
                        (reparse-symbol indented_block_body) [97096 97159])
                    ("parse" function (:arguments 
                      ( ("s" variable nil (reparse-symbol function_parameters) [97193 97194]))                      ) (reparse-symbol indented_block_body) [97183 97435])
                    ("parse" variable nil (reparse-symbol indented_block_body) [97440 97467]))                  
                :type "class")
                nil [95220 97468])
            ("state_machine" variable nil nil [97469 97612])
            ("_get_mro" function
               (:documentation "Get an mro for a type or classic class"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [97628 97631]))                  )
                nil [97615 97806])
            ("_find_adapter" function
               (:documentation "Return an adapter factory for `ob` from `registry`"
                :arguments 
                  ( ("registry" variable nil (reparse-symbol function_parameters) [97825 97833])
                    ("ob" variable nil (reparse-symbol function_parameters) [97835 97837]))                  )
                nil [97807 98017])
            ("ensure_directory" function
               (:documentation "Ensure that the parent directory of `path` exists"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [98040 98044]))                  )
                nil [98019 98207])
            ("split_sections" function
               (:documentation "Split a string or iterable thereof into (section,content) pairs

    Each ``section`` is a stripped version of the section header (\"[section]\")
    and each ``content`` is a list of stripped lines excluding blank lines and
    comment-only lines.  If there are any such lines before the first section
    header, they're returned in a first ``section`` of ``None``.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [98227 98228]))                  )
                nil [98208 99090])
            ("_mkstemp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [99104 99109])
                ("kw" variable nil (reparse-symbol function_parameters) [99110 99114]))              ) nil [99091 99341])
            ("_manager" variable nil nil [99407 99435])
            ("_initialize" function (:arguments 
              ( ("g" variable nil (reparse-symbol function_parameters) [99452 99453]))              ) nil [99436 99570])
            ("_initialize" code nil nil [99570 99592])
            ("_declare_state" code nil nil [99668 99720])
            ("try" code nil nil [99721 100573])
            ("require" variable nil nil [100574 100603])
            ("iter_entry_points" variable nil nil [100604 100653])
            ("add_activation_listener" variable nil nil [100654 100701])
            ("run_script" variable nil nil [100702 100737])
            ("run_main" variable nil nil [100738 100759])
            ("add_activation_listener" code nil nil [100974 101027])
            ("working_set" variable nil nil [101028 101050]))          
      :file "pkg_resources.py"
      :pointmax 101109
      :fsize 101108
      :lastmodtime '(20964 11618 0 0)
      :unmatched-syntax '((ASSIGN 49334 . 49335))))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
