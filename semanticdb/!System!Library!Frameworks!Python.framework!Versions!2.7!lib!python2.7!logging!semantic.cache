;; Object logging/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "logging/"
  :tables
  (list
    (semanticdb-table "config.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Configuration functions for the logging package for Python. The core package
is based on PEP 282 and comments thereto in comp.lang.python, and influenced
by Apache's log4j system.

Copyright (C) 2001-2010 Vinay Sajip. All Rights Reserved.

To use, simply 'import logging' and log away!
\"\"\"" code nil nil [988 1281])
            ("re" include nil nil [1283 1355])
            ("traceback" include nil nil [1283 1355])
            ("os" include nil nil [1283 1355])
            ("struct" include nil nil [1283 1355])
            ("socket" include nil nil [1283 1355])
            ("logging.handlers" include nil nil [1283 1355])
            ("logging" include nil nil [1283 1355])
            ("sys" include nil nil [1283 1355])
            ("cStringIO" include nil nil [1356 1379])
            ("types" include nil nil [1356 1379])
            ("try" code nil nil [1381 1463])
            ("SocketServer" include nil nil [1464 1529])
            ("DEFAULT_LOGGING_CONFIG_PORT" variable nil nil [1532 1566])
            ("if" code nil nil [1568 1681])
            ("_listener" variable nil nil [1843 1859])
            ("fileConfig" function
               (:documentation "
    Read the logging configuration from a ConfigParser-format file.

    This can be called several times from an application, allowing an end user
    the ability to select from various pre-canned configurations (if the
    developer provides a mechanism to present the choices and load the chosen
    configuration).
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [1876 1881])
                    ("defaults" variable nil (reparse-symbol function_parameters) [1883 1891])
                    ("disable_existing_loggers" variable nil (reparse-symbol function_parameters) [1898 1922]))                  )
                nil [1861 2816])
            ("_resolve" function
               (:documentation "Resolve a dotted name to a global object."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2831 2835]))                  )
                nil [2818 3184])
            ("_strip_spaces" function (:arguments 
              ( ("alist" variable nil (reparse-symbol function_parameters) [3203 3208]))              ) nil [3185 3254])
            ("_encoded" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3268 3269]))              ) nil [3255 3330])
            ("_create_formatters" function
               (:documentation "Create and return formatters"
                :arguments 
                  ( ("cp" variable nil (reparse-symbol function_parameters) [3354 3356]))                  )
                nil [3331 4141])
            ("_install_handlers" function
               (:documentation "Install and return handlers"
                :arguments 
                  ( ("cp" variable nil (reparse-symbol function_parameters) [4165 4167])
                    ("formatters" variable nil (reparse-symbol function_parameters) [4169 4179]))                  )
                nil [4143 5616])
            ("_install_loggers" function
               (:documentation "Create and install loggers"
                :arguments 
                  ( ("cp" variable nil (reparse-symbol function_parameters) [5639 5641])
                    ("handlers" variable nil (reparse-symbol function_parameters) [5643 5651])
                    ("disable_existing_loggers" variable nil (reparse-symbol function_parameters) [5653 5677]))                  )
                nil [5618 8987])
            ("IDENTIFIER" variable nil nil [8990 9041])
            ("valid_ident" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9060 9061]))              ) nil [9044 9188])
            ("ConvertingDict" type
               (:documentation "A converting dictionary wrapper."
                :superclasses ("dict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9702 9706])
                            ("key" variable nil (reparse-symbol function_parameters) [9708 9711]))                          )
                        (reparse-symbol indented_block_body) [9686 10142])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10155 10159])
                            ("key" variable nil (reparse-symbol function_parameters) [10161 10164])
                            ("default" variable nil (reparse-symbol function_parameters) [10166 10173]))                          )
                        (reparse-symbol indented_block_body) [10147 10610])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10623 10627])
                            ("key" variable nil (reparse-symbol function_parameters) [10629 10632])
                            ("default" variable nil (reparse-symbol function_parameters) [10634 10641]))                          )
                        (reparse-symbol indented_block_body) [10615 10982]))                  
                :type "class")
                nil [9610 10982])
            ("ConvertingList" type
               (:documentation "A converting list wrapper."
                :superclasses ("list")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11068 11072])
                            ("key" variable nil (reparse-symbol function_parameters) [11074 11077]))                          )
                        (reparse-symbol indented_block_body) [11052 11508])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11521 11525])
                            ("idx" variable nil (reparse-symbol function_parameters) [11527 11530]))                          )
                        (reparse-symbol indented_block_body) [11513 11827]))                  
                :type "class")
                nil [10983 11827])
            ("ConvertingTuple" type
               (:documentation "A converting tuple wrapper."
                :superclasses ("tuple")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11916 11920])
                            ("key" variable nil (reparse-symbol function_parameters) [11922 11925]))                          )
                        (reparse-symbol indented_block_body) [11900 12261]))                  
                :type "class")
                nil [11828 12261])
            ("BaseConfigurator" type
               (:documentation "
    The configurator base class which defines some useful defaults.
    "
                :superclasses ("object")
                :members 
                  ( ("CONVERT_PATTERN" variable nil (reparse-symbol indented_block_body) [12383 12453])
                    ("WORD_PATTERN" variable nil (reparse-symbol indented_block_body) [12459 12501])
                    ("DOT_PATTERN" variable nil (reparse-symbol indented_block_body) [12506 12549])
                    ("INDEX_PATTERN" variable nil (reparse-symbol indented_block_body) [12554 12604])
                    ("DIGIT_PATTERN" variable nil (reparse-symbol indented_block_body) [12609 12645])
                    ("value_converters" variable nil (reparse-symbol indented_block_body) [12651 12739])
                    ("importer" variable nil (reparse-symbol indented_block_body) [12804 12825])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12867 12903])
                            ("self" variable nil (reparse-symbol indented_block_body) [12912 12943]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12844 12848])
                            ("config" variable nil (reparse-symbol function_parameters) [12850 12856]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12831 12944])
                    ("resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12961 12965])
                            ("s" variable nil (reparse-symbol function_parameters) [12967 12968]))                          
                        :documentation "
        Resolve strings to objects using standard import and attribute
        syntax.
        ")
                        (reparse-symbol indented_block_body) [12949 13675])
                    ("ext_convert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13696 13700])
                            ("value" variable nil (reparse-symbol function_parameters) [13702 13707]))                          
                        :documentation "Default converter for the ext:// protocol.")
                        (reparse-symbol indented_block_body) [13680 13802])
                    ("cfg_convert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13823 13827])
                            ("value" variable nil (reparse-symbol function_parameters) [13829 13834]))                          
                        :documentation "Default converter for the cfg:// protocol.")
                        (reparse-symbol indented_block_body) [13807 15072])
                    ("convert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15089 15093])
                            ("value" variable nil (reparse-symbol function_parameters) [15095 15100]))                          
                        :documentation "
        Convert values to an appropriate type. dicts, lists and tuples are
        replaced by their converting alternatives. Strings are checked to
        see if they have a conversion format and are converted if they do.
        ")
                        (reparse-symbol indented_block_body) [15077 16311])
                    ("configure_custom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16337 16341])
                            ("config" variable nil (reparse-symbol function_parameters) [16343 16349]))                          
                        :documentation "Configure an object with a user-supplied factory.")
                        (reparse-symbol indented_block_body) [16316 16889])
                    ("as_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16907 16911])
                            ("value" variable nil (reparse-symbol function_parameters) [16913 16918]))                          
                        :documentation "Utility function which converts lists to tuples.")
                        (reparse-symbol indented_block_body) [16894 17074]))                  
                :type "class")
                nil [12262 17074])
            ("DictConfigurator" type
               (:documentation "
    Configure logging using a dictionary-like object to describe the
    configuration.
    "
                :superclasses ("BaseConfigurator")
                :members 
                  ( ("configure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17240 17244]))                          
                        :documentation "Do the configuration.")
                        (reparse-symbol indented_block_body) [17226 24306])
                    ("configure_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24335 24339])
                            ("config" variable nil (reparse-symbol function_parameters) [24341 24347]))                          
                        :documentation "Configure a formatter from a dictionary.")
                        (reparse-symbol indented_block_body) [24311 25213])
                    ("configure_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25239 25243])
                            ("config" variable nil (reparse-symbol function_parameters) [25245 25251]))                          
                        :documentation "Configure a filter from a dictionary.")
                        (reparse-symbol indented_block_body) [25218 25504])
                    ("add_filters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25525 25529])
                            ("filterer" variable nil (reparse-symbol function_parameters) [25531 25539])
                            ("filters" variable nil (reparse-symbol function_parameters) [25541 25548]))                          
                        :documentation "Add filters to a filterer from a list of names.")
                        (reparse-symbol indented_block_body) [25509 25828])
                    ("configure_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25855 25859])
                            ("config" variable nil (reparse-symbol function_parameters) [25861 25867]))                          
                        :documentation "Configure a handler from a dictionary.")
                        (reparse-symbol indented_block_body) [25833 28204])
                    ("add_handlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28226 28230])
                            ("logger" variable nil (reparse-symbol function_parameters) [28232 28238])
                            ("handlers" variable nil (reparse-symbol function_parameters) [28240 28248]))                          
                        :documentation "Add handlers to a logger from a list of names.")
                        (reparse-symbol indented_block_body) [28209 28529])
                    ("common_logger_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28559 28563])
                            ("logger" variable nil (reparse-symbol function_parameters) [28565 28571])
                            ("config" variable nil (reparse-symbol function_parameters) [28573 28579])
                            ("incremental" variable nil (reparse-symbol function_parameters) [28581 28592]))                          
                        :documentation "
        Perform configuration which is common to root and non-root loggers.
        ")
                        (reparse-symbol indented_block_body) [28534 29233])
                    ("configure_logger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29259 29263])
                            ("name" variable nil (reparse-symbol function_parameters) [29265 29269])
                            ("config" variable nil (reparse-symbol function_parameters) [29271 29277])
                            ("incremental" variable nil (reparse-symbol function_parameters) [29279 29290]))                          
                        :documentation "Configure a non-root logger from a dictionary.")
                        (reparse-symbol indented_block_body) [29238 29589])
                    ("configure_root" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29613 29617])
                            ("config" variable nil (reparse-symbol function_parameters) [29619 29625])
                            ("incremental" variable nil (reparse-symbol function_parameters) [29627 29638]))                          
                        :documentation "Configure a root logger from a dictionary.")
                        (reparse-symbol indented_block_body) [29594 29800]))                  
                :type "class")
                nil [17075 29800])
            ("dictConfigClass" variable nil nil [29801 29835])
            ("dictConfig" function
               (:documentation "Configure logging using a dictionary."
                :arguments 
                  ( ("config" variable nil (reparse-symbol function_parameters) [29852 29858]))                  )
                nil [29837 29949])
            ("listen" function
               (:documentation "
    Start up a socket server on the specified port, and listen for new
    configurations.

    These will be sent as a file suitable for processing by fileConfig().
    Returns a Thread object on which you can call start() to start the server,
    and which you can join() when appropriate. To stop the server, call
    stopListening().
    "
                :arguments 
                  ( ("port" variable nil (reparse-symbol function_parameters) [29962 29966]))                  )
                nil [29951 34032])
            ("stopListening" function (:documentation "
    Stop the listening server which was created with a call to listen().
    ") nil [34033 34327]))          
      :file "config.py"
      :pointmax 34327
      :fsize 34326
      :lastmodtime '(21002 22587 0 0)
      :unmatched-syntax '((RETURN 3276 . 3282) (IF 3285 . 3287) (ELSE 3307 . 3311)))
    (semanticdb-table "handlers.py"
      :file "handlers.py"
      :fsize 45178
      :lastmodtime '(21002 22587 0 0)))
  :file "!System!Library!Frameworks!Python.framework!Versions!2.7!lib!python2.7!logging!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
