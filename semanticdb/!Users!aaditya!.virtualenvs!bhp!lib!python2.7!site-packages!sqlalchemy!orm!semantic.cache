;; Object orm/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "orm/"
  :tables
  (list
    (semanticdb-table "attributes.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Defines instrumentation for class attributes and their interaction
with instances.

This module is usually not directly visible to user applications, but
defines a large part of the ORM's interactivity.


\"\"\"" code nil nil [237 448])
            ("operator" include nil nil [450 465])
            ("operator" include nil nil [466 497])
            ("inspection" include nil nil [507 537])
            ("event" include nil nil [507 537])
            ("util" include nil nil [507 537])
            ("exc" include nil nil [545 599])
            ("events" include nil nil [545 599])
            ("collections" include nil nil [545 599])
            ("interfaces" include nil nil [545 599])
            ("manager_of_class" include nil nil [622 676])
            ("instance_dict" include nil nil [622 676])
            ("instance_state" include nil nil [622 676])
            ("orm_util" variable nil nil [678 731])
            ("PASSIVE_NO_RESULT" variable nil nil [733 948])
            ("ATTR_WAS_SET" variable nil nil [950 1137])
            ("ATTR_EMPTY" variable nil nil [1139 1250])
            ("NO_VALUE" variable nil nil [1252 1477])
            ("NEVER_SET" variable nil nil [1479 1658])
            ("NO_CHANGE" variable nil nil [1660 1802])
            ("CALLABLES_OK" variable nil nil [1804 1928])
            ("SQL_OK" variable nil nil [1930 2047])
            ("RELATED_OBJECT_OK" variable nil nil [2049 2205])
            ("INIT_OK" variable nil nil [2207 2388])
            ("NON_PERSISTENT_OK" variable nil nil [2390 2522])
            ("LOAD_AGAINST_COMMITTED" variable nil nil [2524 2685])
            ("PASSIVE_OFF" variable nil nil [2731 2927])
            ("PASSIVE_RETURN_NEVER_SET" variable nil nil [2928 3073])
            ("PASSIVE_NO_INITIALIZE" variable nil nil [3074 3245])
            ("PASSIVE_NO_FETCH" variable nil nil [3246 3369])
            ("PASSIVE_NO_FETCH_RELATED" variable nil nil [3370 3531])
            ("PASSIVE_ONLY_PERSISTENT" variable nil nil [3532 3691])
            ("QueryableAttribute" type
               (:documentation "Base class for :term:`descriptor` objects that intercept
    attribute events on behalf of a :class:`.MapperProperty`
    object.  The actual :class:`.MapperProperty` is accessible
    via the :attr:`.QueryableAttribute.property`
    attribute.


    .. seealso::

        :class:`.InstrumentedAttribute`

        :class:`.MapperProperty`

        :attr:`.Mapper.all_orm_descriptors`

        :attr:`.Mapper.attrs`
    "
                :superclasses ("interfaces._MappedAttribute" "interfaces._InspectionAttr" "interfaces.PropComparator")
                :members 
                  ( ("is_attribute" variable nil (reparse-symbol indented_block_body) [4295 4314])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4470 4490])
                            ("self" variable nil (reparse-symbol indented_block_body) [4499 4513])
                            ("self" variable nil (reparse-symbol indented_block_body) [4522 4538])
                            ("self" variable nil (reparse-symbol indented_block_body) [4547 4575])
                            ("self" variable nil (reparse-symbol indented_block_body) [4584 4617])
                            ("self" variable nil (reparse-symbol indented_block_body) [4626 4649])
                            ("manager" variable nil (reparse-symbol indented_block_body) [4659 4693])
                            ("if" code nil (reparse-symbol indented_block_body) [4756 4991]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4333 4337])
                            ("class_" variable nil (reparse-symbol function_parameters) [4339 4345])
                            ("key" variable nil (reparse-symbol function_parameters) [4347 4350])
                            ("impl" variable nil (reparse-symbol function_parameters) [4352 4356])
                            ("comparator" variable nil (reparse-symbol function_parameters) [4387 4397])
                            ("parententity" variable nil (reparse-symbol function_parameters) [4404 4416])
                            ("of_type" variable nil (reparse-symbol function_parameters) [4447 4454]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4320 4991])
                    ("dispatch" variable nil (reparse-symbol indented_block_body) [4996 5047])
                    ("dispatch" variable nil (reparse-symbol indented_block_body) [5052 5097])
                    ("_supports_population" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5156 5160]))                          
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5103 5208])
                    ("get_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5229 5233])
                            ("instance" variable nil (reparse-symbol function_parameters) [5235 5243])
                            ("passive" variable nil (reparse-symbol function_parameters) [5245 5252]))                          )
                        (reparse-symbol indented_block_body) [5213 5404])
                    ("__selectable__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5428 5432]))                          )
                        (reparse-symbol indented_block_body) [5409 5530])
                    ("info" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5573 5577]))                          
                        :documentation "Return the 'info' dictionary for the underlying SQL element.

        The behavior here is as follows:

        * If the attribute is a column-mapped property, i.e.
          :class:`.ColumnProperty`, which is mapped directly
          to a schema-level :class:`.Column` object, this attribute
          will return the :attr:`.SchemaItem.info` dictionary associated
          with the core-level :class:`.Column` object.

        * If the attribute is a :class:`.ColumnProperty` but is mapped to
          any other kind of SQL expression other than a :class:`.Column`,
          the attribute will refer to the :attr:`.MapperProperty.info` dictionary
          associated directly with the :class:`.ColumnProperty`, assuming the SQL
          expression itself does not have it's own ``.info`` attribute
          (which should be the case, unless a user-defined SQL construct
          has defined one).

        * If the attribute refers to any other kind of :class:`.MapperProperty`,
          including :class:`.RelationshipProperty`, the attribute will refer
          to the :attr:`.MapperProperty.info` dictionary associated with
          that :class:`.MapperProperty`.

        * To access the :attr:`.MapperProperty.info` dictionary of the :class:`.MapperProperty`
          unconditionally, including for a :class:`.ColumnProperty` that's
          associated directly with a :class:`.schema.Column`, the attribute
          can be referred to using :attr:`.QueryableAttribute.property`
          attribute, as ``MyClass.someattribute.property.info``.

        .. versionadded:: 0.8.0

        .. seealso::

            :attr:`.SchemaItem.info`

            :attr:`.MapperProperty.info`

        ")
                        (reparse-symbol indented_block_body) [5536 7340])
                    ("parent" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7384 7388]))                          
                        :documentation "Return an inspection instance representing the parent.

        This will be either an instance of :class:`.Mapper`
        or :class:`.AliasedInsp`, depending upon the nature
        of the parent entity which this attribute is associated
        with.

        ")
                        (reparse-symbol indented_block_body) [7345 7723])
                    ("expression" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7757 7761]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7728 7816])
                    ("__clause_element__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7844 7848]))                          )
                        (reparse-symbol indented_block_body) [7821 7903])
                    ("of_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7920 7924])
                            ("cls" variable nil (reparse-symbol function_parameters) [7926 7929]))                          )
                        (reparse-symbol indented_block_body) [7908 8184])
                    ("label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8199 8203])
                            ("name" variable nil (reparse-symbol function_parameters) [8205 8209]))                          )
                        (reparse-symbol indented_block_body) [8189 8265])
                    ("operate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8282 8286])
                            ("op" variable nil (reparse-symbol function_parameters) [8288 8290])
                            ("other" variable nil (reparse-symbol function_parameters) [8292 8298])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8300 8308]))                          )
                        (reparse-symbol indented_block_body) [8270 8364])
                    ("reverse_operate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8389 8393])
                            ("op" variable nil (reparse-symbol function_parameters) [8395 8397])
                            ("other" variable nil (reparse-symbol function_parameters) [8399 8404])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8406 8414]))                          )
                        (reparse-symbol indented_block_body) [8369 8469])
                    ("hasparent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8488 8492])
                            ("state" variable nil (reparse-symbol function_parameters) [8494 8499])
                            ("optimistic" variable nil (reparse-symbol function_parameters) [8501 8511]))                          )
                        (reparse-symbol indented_block_body) [8474 8598])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8619 8623])
                            ("key" variable nil (reparse-symbol function_parameters) [8625 8628]))                          )
                        (reparse-symbol indented_block_body) [8603 9036])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9053 9057]))                          )
                        (reparse-symbol indented_block_body) [9041 9118])
                    ("property" function
                       (:parent "dummy"
                        :decorators 
                          ( ("util.memoized_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9164 9168]))                          
                        :documentation "Return the :class:`.MapperProperty` associated with this
        :class:`.QueryableAttribute`.


        Return values here will commonly be instances of
        :class:`.ColumnProperty` or :class:`.RelationshipProperty`.


        ")
                        (reparse-symbol indented_block_body) [9123 9458]))                  
                :type "class")
                nil [3694 9458])
            ("inspection" code nil nil [9459 9504])
            ("InstrumentedAttribute" type
               (:documentation "Class bound instrumented attribute which adds basic
    :term:`descriptor` methods.

    See :class:`.QueryableAttribute` for a description of most features.


    "
                :superclasses ("QueryableAttribute")
                :members 
                  ( ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9748 9752])
                            ("instance" variable nil (reparse-symbol function_parameters) [9754 9762])
                            ("value" variable nil (reparse-symbol function_parameters) [9764 9769]))                          )
                        (reparse-symbol indented_block_body) [9736 9882])
                    ("__delete__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9902 9906])
                            ("instance" variable nil (reparse-symbol function_parameters) [9908 9916]))                          )
                        (reparse-symbol indented_block_body) [9887 9995])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10012 10016])
                            ("instance" variable nil (reparse-symbol function_parameters) [10018 10026])
                            ("owner" variable nil (reparse-symbol function_parameters) [10028 10033]))                          )
                        (reparse-symbol indented_block_body) [10000 10305]))                  
                :type "class")
                nil [9507 10305])
            ("create_proxied_attribute" function
               (:documentation "Create an QueryableAttribute / user descriptor hybrid.

    Returns a new QueryableAttribute type that delegates descriptor
    behavior and getattr() to the given descriptor.
    "
                :arguments 
                  ( ("descriptor" variable nil (reparse-symbol function_parameters) [10336 10346]))                  )
                nil [10307 13307])
            ("AttributeImpl" type
               (:documentation "internal implementation for instrumented attributes."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct an AttributeImpl.

        \\class_
          associated class

        key
          string name of the attribute

        \\callable_
          optional function which generates a callable based on a parent
          instance, which produces the \"default\" values for a scalar or
          collection attribute when it's first accessed, if not present
          already.

        trackparent
          if True, attempt to track if an instance has a parent attached
          to it via this attribute.

        extension
          a single or list of AttributeExtension object(s) which will
          receive set/delete/append/remove/etc. events.  Deprecated.
          The event package is now used.

        compare_function
          a function that compares two values which are normally
          assignable to this attribute.

        active_history
          indicates that get_history() should always return the \"old\" value,
          even if it means executing a lazy callable upon attribute change.

        parent_token
          Usually references the MapperProperty, used as a key for
          the hasparent() function to identify an \"owning\" attribute.
          Allows multiple AttributeImpls to all match a single
          owner attribute.

        expire_missing
          if False, don't add an \"expiry\" callable to this attribute
          during state.expire_attributes(None), if no value is present
          for this key.

        \"\"\"" code nil (reparse-symbol indented_block_body) [13678 15147])
                            ("self" variable nil (reparse-symbol indented_block_body) [15156 15176])
                            ("self" variable nil (reparse-symbol indented_block_body) [15185 15199])
                            ("self" variable nil (reparse-symbol indented_block_body) [15208 15234])
                            ("self" variable nil (reparse-symbol indented_block_body) [15243 15267])
                            ("self" variable nil (reparse-symbol indented_block_body) [15276 15306])
                            ("self" code nil (reparse-symbol indented_block_body) [15315 15355])
                            ("if" code nil (reparse-symbol indented_block_body) [15364 15492])
                            ("attr" variable nil (reparse-symbol indented_block_body) [15578 15614])
                            ("for" code nil (reparse-symbol indented_block_body) [15624 15709])
                            ("if" code nil (reparse-symbol indented_block_body) [15718 15786])
                            ("self" variable nil (reparse-symbol indented_block_body) [15795 15831]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13419 13423])
                            ("class_" variable nil (reparse-symbol function_parameters) [13425 13431])
                            ("key" variable nil (reparse-symbol function_parameters) [13433 13436])
                            ("callable_" variable nil (reparse-symbol function_parameters) [13458 13467])
                            ("dispatch" variable nil (reparse-symbol function_parameters) [13469 13477])
                            ("trackparent" variable nil (reparse-symbol function_parameters) [13479 13490])
                            ("extension" variable nil (reparse-symbol function_parameters) [13498 13507])
                            ("compare_function" variable nil (reparse-symbol function_parameters) [13534 13550])
                            ("active_history" variable nil (reparse-symbol function_parameters) [13557 13571])
                            ("parent_token" variable nil (reparse-symbol function_parameters) [13599 13611])
                            ("expire_missing" variable nil (reparse-symbol function_parameters) [13618 13632])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13659 13667]))                          
                        :documentation "Construct an AttributeImpl.

        \\class_
          associated class

        key
          string name of the attribute

        \\callable_
          optional function which generates a callable based on a parent
          instance, which produces the \"default\" values for a scalar or
          collection attribute when it's first accessed, if not present
          already.

        trackparent
          if True, attempt to track if an instance has a parent attached
          to it via this attribute.

        extension
          a single or list of AttributeExtension object(s) which will
          receive set/delete/append/remove/etc. events.  Deprecated.
          The event package is now used.

        compare_function
          a function that compares two values which are normally
          assignable to this attribute.

        active_history
          indicates that get_history() should always return the \"old\" value,
          even if it means executing a lazy callable upon attribute change.

        parent_token
          Usually references the MapperProperty, used as a key for
          the hasparent() function to identify an \"owning\" attribute.
          Allows multiple AttributeImpls to all match a single
          owner attribute.

        expire_missing
          if False, don't add an \"expiry\" callable to this attribute
          during state.expire_attributes(None), if no value is present
          for this key.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13406 15832])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15849 15853]))                          )
                        (reparse-symbol indented_block_body) [15837 15914])
                    ("_get_active_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15943 15947]))                          
                        :documentation "Backwards compat for impl.active_history")
                        (reparse-symbol indented_block_body) [15919 16051])
                    ("_set_active_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16080 16084])
                            ("value" variable nil (reparse-symbol function_parameters) [16086 16091]))                          )
                        (reparse-symbol indented_block_body) [16056 16140])
                    ("active_history" variable nil (reparse-symbol indented_block_body) [16145 16212])
                    ("hasparent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16232 16236])
                            ("state" variable nil (reparse-symbol function_parameters) [16238 16243])
                            ("optimistic" variable nil (reparse-symbol function_parameters) [16245 16255]))                          
                        :documentation "Return the boolean value of a `hasparent` flag attached to
        the given state.

        The `optimistic` flag determines what the default return value
        should be if no `hasparent` flag can be located.

        As this function is used to determine if an instance is an
        *orphan*, instances that were loaded from storage should be
        assumed to not be orphans, until a True/False value for this
        flag is set.

        An instance attribute that is loaded by a callable function
        will also not have a `hasparent` flag.

        ")
                        (reparse-symbol indented_block_body) [16218 17051])
                    ("sethasparent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17073 17077])
                            ("state" variable nil (reparse-symbol function_parameters) [17079 17084])
                            ("parent_state" variable nil (reparse-symbol function_parameters) [17086 17098])
                            ("value" variable nil (reparse-symbol function_parameters) [17100 17105]))                          
                        :documentation "Set a boolean flag on the given item corresponding to
        whether or not it is attached to a parent object via the
        attribute represented by this ``InstrumentedAttribute``.

        ")
                        (reparse-symbol indented_block_body) [17056 18364])
                    ("set_callable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18386 18390])
                            ("state" variable nil (reparse-symbol function_parameters) [18392 18397])
                            ("callable_" variable nil (reparse-symbol function_parameters) [18399 18408]))                          
                        :documentation "Set a callable function for this attribute on the given object.

        This callable will be executed when the attribute is next
        accessed, and is assumed to construct part of the instances
        previously stored state. When its value or values are loaded,
        they will be established as part of the instance's *committed
        state*.  While *trackparent* information will be assembled for
        these instances, attribute-level event handlers will not be
        fired.

        The callable overrides the class level callable set in the
        ``InstrumentedAttribute`` constructor.

        ")
                        (reparse-symbol indented_block_body) [18369 19089])
                    ("get_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19110 19114])
                            ("state" variable nil (reparse-symbol function_parameters) [19116 19121])
                            ("dict_" variable nil (reparse-symbol function_parameters) [19123 19128])
                            ("passive" variable nil (reparse-symbol function_parameters) [19130 19137]))                          )
                        (reparse-symbol indented_block_body) [19094 19188])
                    ("get_all_pending" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19213 19217])
                            ("state" variable nil (reparse-symbol function_parameters) [19219 19224])
                            ("dict_" variable nil (reparse-symbol function_parameters) [19226 19231]))                          
                        :documentation "Return a list of tuples of (state, obj)
        for all objects in this attribute's current state
        + history.

        Only applies to object-based attributes.

        This is an inlining of existing functionality
        which roughly corresponds to:

            get_state_history(
                        state,
                        key,
                        passive=PASSIVE_NO_INITIALIZE).sum()

        ")
                        (reparse-symbol indented_block_body) [19193 19707])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19727 19731])
                            ("state" variable nil (reparse-symbol function_parameters) [19733 19738])
                            ("dict_" variable nil (reparse-symbol function_parameters) [19740 19745]))                          
                        :documentation "Initialize the given state's attribute with an empty value.")
                        (reparse-symbol indented_block_body) [19712 19874])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19887 19891])
                            ("state" variable nil (reparse-symbol function_parameters) [19893 19898])
                            ("dict_" variable nil (reparse-symbol function_parameters) [19900 19905])
                            ("passive" variable nil (reparse-symbol function_parameters) [19907 19914]))                          
                        :documentation "Retrieve a value from the given object.

        If a callable is assembled on this object's attribute, and
        passive is False, the callable will be executed and the
        resulting value will be set as the new value for this attribute.
        ")
                        (reparse-symbol indented_block_body) [19879 21676])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21692 21696])
                            ("state" variable nil (reparse-symbol function_parameters) [21698 21703])
                            ("dict_" variable nil (reparse-symbol function_parameters) [21705 21710])
                            ("value" variable nil (reparse-symbol function_parameters) [21712 21717])
                            ("initiator" variable nil (reparse-symbol function_parameters) [21719 21728])
                            ("passive" variable nil (reparse-symbol function_parameters) [21730 21737]))                          )
                        (reparse-symbol indented_block_body) [21681 21818])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21834 21838])
                            ("state" variable nil (reparse-symbol function_parameters) [21840 21845])
                            ("dict_" variable nil (reparse-symbol function_parameters) [21847 21852])
                            ("value" variable nil (reparse-symbol function_parameters) [21854 21859])
                            ("initiator" variable nil (reparse-symbol function_parameters) [21861 21870])
                            ("passive" variable nil (reparse-symbol function_parameters) [21872 21879]))                          )
                        (reparse-symbol indented_block_body) [21823 21996])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22009 22013])
                            ("state" variable nil (reparse-symbol function_parameters) [22015 22020])
                            ("dict_" variable nil (reparse-symbol function_parameters) [22022 22027])
                            ("value" variable nil (reparse-symbol function_parameters) [22029 22034])
                            ("initiator" variable nil (reparse-symbol function_parameters) [22036 22045])
                            ("passive" variable nil (reparse-symbol function_parameters) [22047 22054]))                          )
                        (reparse-symbol indented_block_body) [22001 22181])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22194 22198])
                            ("state" variable nil (reparse-symbol function_parameters) [22200 22205])
                            ("dict_" variable nil (reparse-symbol function_parameters) [22207 22212])
                            ("value" variable nil (reparse-symbol function_parameters) [22214 22219])
                            ("initiator" variable nil (reparse-symbol function_parameters) [22221 22230])
                            ("passive" variable nil (reparse-symbol function_parameters) [22248 22255])
                            ("check_old" variable nil (reparse-symbol function_parameters) [22269 22278])
                            ("pop" variable nil (reparse-symbol function_parameters) [22285 22288]))                          )
                        (reparse-symbol indented_block_body) [22186 22333])
                    ("get_committed_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22362 22366])
                            ("state" variable nil (reparse-symbol function_parameters) [22368 22373])
                            ("dict_" variable nil (reparse-symbol function_parameters) [22375 22380])
                            ("passive" variable nil (reparse-symbol function_parameters) [22382 22389]))                          
                        :documentation "return the unchanged value of this attribute")
                        (reparse-symbol indented_block_body) [22338 22744])
                    ("set_committed_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22773 22777])
                            ("state" variable nil (reparse-symbol function_parameters) [22779 22784])
                            ("dict_" variable nil (reparse-symbol function_parameters) [22786 22791])
                            ("value" variable nil (reparse-symbol function_parameters) [22793 22798]))                          
                        :documentation "set an attribute value on the given instance and 'commit' it.")
                        (reparse-symbol indented_block_body) [22749 22972]))                  
                :type "class")
                nil [13309 22972])
            ("ScalarAttributeImpl" type
               (:documentation "represents a scalar value-holding InstrumentedAttribute."
                :superclasses ("AttributeImpl")
                :members 
                  ( ("accepts_scalar_loader" variable nil (reparse-symbol indented_block_body) [23088 23116])
                    ("uses_objects" variable nil (reparse-symbol indented_block_body) [23121 23141])
                    ("supports_population" variable nil (reparse-symbol indented_block_body) [23146 23172])
                    ("collection" variable nil (reparse-symbol indented_block_body) [23177 23195])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23212 23216])
                            ("state" variable nil (reparse-symbol function_parameters) [23218 23223])
                            ("dict_" variable nil (reparse-symbol function_parameters) [23225 23230]))                          )
                        (reparse-symbol indented_block_body) [23201 23636])
                    ("get_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23657 23661])
                            ("state" variable nil (reparse-symbol function_parameters) [23663 23668])
                            ("dict_" variable nil (reparse-symbol function_parameters) [23670 23675])
                            ("passive" variable nil (reparse-symbol function_parameters) [23677 23684]))                          )
                        (reparse-symbol indented_block_body) [23641 23801])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23814 23818])
                            ("state" variable nil (reparse-symbol function_parameters) [23820 23825])
                            ("dict_" variable nil (reparse-symbol function_parameters) [23827 23832])
                            ("value" variable nil (reparse-symbol function_parameters) [23834 23839])
                            ("initiator" variable nil (reparse-symbol function_parameters) [23841 23850])
                            ("passive" variable nil (reparse-symbol function_parameters) [23868 23875])
                            ("check_old" variable nil (reparse-symbol function_parameters) [23889 23898])
                            ("pop" variable nil (reparse-symbol function_parameters) [23905 23908]))                          )
                        (reparse-symbol indented_block_body) [23806 24418])
                    ("fire_replace_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24446 24450])
                            ("state" variable nil (reparse-symbol function_parameters) [24452 24457])
                            ("dict_" variable nil (reparse-symbol function_parameters) [24459 24464])
                            ("value" variable nil (reparse-symbol function_parameters) [24466 24471])
                            ("previous" variable nil (reparse-symbol function_parameters) [24473 24481])
                            ("initiator" variable nil (reparse-symbol function_parameters) [24483 24492]))                          )
                        (reparse-symbol indented_block_body) [24423 24619])
                    ("fire_remove_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24646 24650])
                            ("state" variable nil (reparse-symbol function_parameters) [24652 24657])
                            ("dict_" variable nil (reparse-symbol function_parameters) [24659 24664])
                            ("value" variable nil (reparse-symbol function_parameters) [24666 24671])
                            ("initiator" variable nil (reparse-symbol function_parameters) [24673 24682]))                          )
                        (reparse-symbol indented_block_body) [24624 24773])
                    ("type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24801 24805]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24778 24846]))                  
                :type "class")
                nil [22974 24846])
            ("ScalarObjectAttributeImpl" type
               (:documentation "represents a scalar-holding InstrumentedAttribute,
       where the target object is also instrumented.

       Adds events to delete/set operations.

    "
                :superclasses ("ScalarAttributeImpl")
                :members 
                  ( ("accepts_scalar_loader" variable nil (reparse-symbol indented_block_body) [25073 25102])
                    ("uses_objects" variable nil (reparse-symbol indented_block_body) [25107 25126])
                    ("supports_population" variable nil (reparse-symbol indented_block_body) [25131 25157])
                    ("collection" variable nil (reparse-symbol indented_block_body) [25162 25180])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25197 25201])
                            ("state" variable nil (reparse-symbol function_parameters) [25203 25208])
                            ("dict_" variable nil (reparse-symbol function_parameters) [25210 25215]))                          )
                        (reparse-symbol indented_block_body) [25186 25339])
                    ("get_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25360 25364])
                            ("state" variable nil (reparse-symbol function_parameters) [25366 25371])
                            ("dict_" variable nil (reparse-symbol function_parameters) [25373 25378])
                            ("passive" variable nil (reparse-symbol function_parameters) [25380 25387]))                          )
                        (reparse-symbol indented_block_body) [25344 25831])
                    ("get_all_pending" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25856 25860])
                            ("state" variable nil (reparse-symbol function_parameters) [25862 25867])
                            ("dict_" variable nil (reparse-symbol function_parameters) [25869 25874]))                          )
                        (reparse-symbol indented_block_body) [25836 26457])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26470 26474])
                            ("state" variable nil (reparse-symbol function_parameters) [26476 26481])
                            ("dict_" variable nil (reparse-symbol function_parameters) [26483 26488])
                            ("value" variable nil (reparse-symbol function_parameters) [26490 26495])
                            ("initiator" variable nil (reparse-symbol function_parameters) [26497 26506])
                            ("passive" variable nil (reparse-symbol function_parameters) [26524 26531])
                            ("check_old" variable nil (reparse-symbol function_parameters) [26545 26554])
                            ("pop" variable nil (reparse-symbol function_parameters) [26561 26564]))                          
                        :documentation "Set a value on the given InstanceState.

        `initiator` is the ``InstrumentedAttribute`` that initiated the
        ``set()`` operation and is used to control the depth of a circular
        setter operation.

        ")
                        (reparse-symbol indented_block_body) [26462 27649])
                    ("fire_remove_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27676 27680])
                            ("state" variable nil (reparse-symbol function_parameters) [27682 27687])
                            ("dict_" variable nil (reparse-symbol function_parameters) [27689 27694])
                            ("value" variable nil (reparse-symbol function_parameters) [27696 27701])
                            ("initiator" variable nil (reparse-symbol function_parameters) [27703 27712]))                          )
                        (reparse-symbol indented_block_body) [27654 27973])
                    ("fire_replace_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28001 28005])
                            ("state" variable nil (reparse-symbol function_parameters) [28007 28012])
                            ("dict_" variable nil (reparse-symbol function_parameters) [28014 28019])
                            ("value" variable nil (reparse-symbol function_parameters) [28021 28026])
                            ("previous" variable nil (reparse-symbol function_parameters) [28028 28036])
                            ("initiator" variable nil (reparse-symbol function_parameters) [28038 28047]))                          )
                        (reparse-symbol indented_block_body) [27978 28602]))                  
                :type "class")
                nil [24848 28602])
            ("CollectionAttributeImpl" type
               (:documentation "A collection-holding attribute that instruments changes in membership.

    Only handles collections of instrumented objects.

    InstrumentedCollectionAttribute holds an arbitrary, user-specified
    container object (defaulting to a list) and brokers access to the
    CollectionAdapter, a \"view\" onto that object that presents consistent bag
    semantics to the orm layer independent of the user data implementation.

    "
                :superclasses ("AttributeImpl")
                :members 
                  ( ("accepts_scalar_loader" variable nil (reparse-symbol indented_block_body) [29092 29121])
                    ("uses_objects" variable nil (reparse-symbol indented_block_body) [29126 29145])
                    ("supports_population" variable nil (reparse-symbol indented_block_body) [29150 29176])
                    ("collection" variable nil (reparse-symbol indented_block_body) [29181 29198])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [29413 29892])
                            ("if" code nil (reparse-symbol indented_block_body) [29902 29968])
                            ("self" variable nil (reparse-symbol indented_block_body) [29976 30001])
                            ("self" variable nil (reparse-symbol indented_block_body) [30010 30048]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29217 29221])
                            ("class_" variable nil (reparse-symbol function_parameters) [29223 29229])
                            ("key" variable nil (reparse-symbol function_parameters) [29231 29234])
                            ("callable_" variable nil (reparse-symbol function_parameters) [29236 29245])
                            ("dispatch" variable nil (reparse-symbol function_parameters) [29247 29255])
                            ("typecallable" variable nil (reparse-symbol function_parameters) [29277 29289])
                            ("trackparent" variable nil (reparse-symbol function_parameters) [29296 29307])
                            ("extension" variable nil (reparse-symbol function_parameters) [29315 29324])
                            ("copy_function" variable nil (reparse-symbol function_parameters) [29351 29364])
                            ("compare_function" variable nil (reparse-symbol function_parameters) [29371 29387])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29394 29402]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29204 30049])
                    ("__copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30065 30069])
                            ("item" variable nil (reparse-symbol function_parameters) [30071 30075]))                          )
                        (reparse-symbol indented_block_body) [30054 30149])
                    ("get_history" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30170 30174])
                            ("state" variable nil (reparse-symbol function_parameters) [30176 30181])
                            ("dict_" variable nil (reparse-symbol function_parameters) [30183 30188])
                            ("passive" variable nil (reparse-symbol function_parameters) [30190 30197]))                          )
                        (reparse-symbol indented_block_body) [30154 30423])
                    ("get_all_pending" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30448 30452])
                            ("state" variable nil (reparse-symbol function_parameters) [30454 30459])
                            ("dict_" variable nil (reparse-symbol function_parameters) [30461 30466]))                          )
                        (reparse-symbol indented_block_body) [30428 31613])
                    ("fire_append_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31640 31644])
                            ("state" variable nil (reparse-symbol function_parameters) [31646 31651])
                            ("dict_" variable nil (reparse-symbol function_parameters) [31653 31658])
                            ("value" variable nil (reparse-symbol function_parameters) [31660 31665])
                            ("initiator" variable nil (reparse-symbol function_parameters) [31667 31676]))                          )
                        (reparse-symbol indented_block_body) [31618 31976])
                    ("fire_pre_remove_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32007 32011])
                            ("state" variable nil (reparse-symbol function_parameters) [32013 32018])
                            ("dict_" variable nil (reparse-symbol function_parameters) [32020 32025])
                            ("initiator" variable nil (reparse-symbol function_parameters) [32027 32036]))                          )
                        (reparse-symbol indented_block_body) [31981 32099])
                    ("fire_remove_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32126 32130])
                            ("state" variable nil (reparse-symbol function_parameters) [32132 32137])
                            ("dict_" variable nil (reparse-symbol function_parameters) [32139 32144])
                            ("value" variable nil (reparse-symbol function_parameters) [32146 32151])
                            ("initiator" variable nil (reparse-symbol function_parameters) [32153 32162]))                          )
                        (reparse-symbol indented_block_body) [32104 32433])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32449 32453])
                            ("state" variable nil (reparse-symbol function_parameters) [32455 32460])
                            ("dict_" variable nil (reparse-symbol function_parameters) [32462 32467]))                          )
                        (reparse-symbol indented_block_body) [32438 32772])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32792 32796])
                            ("state" variable nil (reparse-symbol function_parameters) [32798 32803])
                            ("dict_" variable nil (reparse-symbol function_parameters) [32805 32810]))                          
                        :documentation "Initialize this attribute with an empty collection.")
                        (reparse-symbol indented_block_body) [32777 32999])
                    ("_initialize_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33031 33035])
                            ("state" variable nil (reparse-symbol function_parameters) [33037 33042]))                          )
                        (reparse-symbol indented_block_body) [33004 33151])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33167 33171])
                            ("state" variable nil (reparse-symbol function_parameters) [33173 33178])
                            ("dict_" variable nil (reparse-symbol function_parameters) [33180 33185])
                            ("value" variable nil (reparse-symbol function_parameters) [33187 33192])
                            ("initiator" variable nil (reparse-symbol function_parameters) [33194 33203])
                            ("passive" variable nil (reparse-symbol function_parameters) [33205 33212]))                          )
                        (reparse-symbol indented_block_body) [33156 33755])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33771 33775])
                            ("state" variable nil (reparse-symbol function_parameters) [33777 33782])
                            ("dict_" variable nil (reparse-symbol function_parameters) [33784 33789])
                            ("value" variable nil (reparse-symbol function_parameters) [33791 33796])
                            ("initiator" variable nil (reparse-symbol function_parameters) [33798 33807])
                            ("passive" variable nil (reparse-symbol function_parameters) [33809 33816]))                          )
                        (reparse-symbol indented_block_body) [33760 34357])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34370 34374])
                            ("state" variable nil (reparse-symbol function_parameters) [34376 34381])
                            ("dict_" variable nil (reparse-symbol function_parameters) [34383 34388])
                            ("value" variable nil (reparse-symbol function_parameters) [34390 34395])
                            ("initiator" variable nil (reparse-symbol function_parameters) [34397 34406])
                            ("passive" variable nil (reparse-symbol function_parameters) [34408 34415]))                          )
                        (reparse-symbol indented_block_body) [34362 34728])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34741 34745])
                            ("state" variable nil (reparse-symbol function_parameters) [34747 34752])
                            ("dict_" variable nil (reparse-symbol function_parameters) [34754 34759])
                            ("value" variable nil (reparse-symbol function_parameters) [34761 34766])
                            ("initiator" variable nil (reparse-symbol function_parameters) [34768 34777])
                            ("passive" variable nil (reparse-symbol function_parameters) [34799 34806])
                            ("pop" variable nil (reparse-symbol function_parameters) [34820 34823]))                          
                        :documentation "Set a value on the given object.

        `initiator` is the ``InstrumentedAttribute`` that initiated the
        ``set()`` operation and is used to control the depth of a circular
        setter operation.
        ")
                        (reparse-symbol indented_block_body) [34733 35280])
                    ("_set_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35303 35307])
                            ("state" variable nil (reparse-symbol function_parameters) [35309 35314])
                            ("dict_" variable nil (reparse-symbol function_parameters) [35316 35321])
                            ("iterable" variable nil (reparse-symbol function_parameters) [35323 35331])
                            ("adapter" variable nil (reparse-symbol function_parameters) [35333 35340]))                          
                        :documentation "Set a collection value from an iterable of state-bearers.

        ``adapter`` is an optional callable invoked with a CollectionAdapter
        and the iterable.  Should return an iterable of state-bearing
        instances suitable for appending via a CollectionAdapter.  Can be used
        for, e.g., adapting an incoming dictionary into an iterator of values
        rather than keys.

        ")
                        (reparse-symbol indented_block_body) [35285 36775])
                    ("_invalidate_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36807 36811])
                            ("collection" variable nil (reparse-symbol function_parameters) [36813 36823]))                          )
                        (reparse-symbol indented_block_body) [36780 36914])
                    ("set_committed_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36943 36947])
                            ("state" variable nil (reparse-symbol function_parameters) [36949 36954])
                            ("dict_" variable nil (reparse-symbol function_parameters) [36956 36961])
                            ("value" variable nil (reparse-symbol function_parameters) [36963 36968]))                          
                        :documentation "Set an attribute value on the given instance and 'commit' it.")
                        (reparse-symbol indented_block_body) [36919 37832])
                    ("get_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37856 37860])
                            ("state" variable nil (reparse-symbol function_parameters) [37862 37867])
                            ("dict_" variable nil (reparse-symbol function_parameters) [37869 37874])
                            ("user_data" variable nil (reparse-symbol function_parameters) [37904 37913])
                            ("passive" variable nil (reparse-symbol function_parameters) [37920 37927]))                          
                        :documentation "Retrieve the CollectionAdapter associated with the given state.

        Creates a new CollectionAdapter if one does not exist.

        ")
                        (reparse-symbol indented_block_body) [37837 38318]))                  
                :type "class")
                nil [28604 38318])
            ("backref_listeners" function
               (:documentation "Apply listeners to synchronize a two-way relationship."
                :arguments 
                  ( ("attribute" variable nil (reparse-symbol function_parameters) [38342 38351])
                    ("key" variable nil (reparse-symbol function_parameters) [38353 38356])
                    ("uselist" variable nil (reparse-symbol function_parameters) [38358 38365]))                  )
                nil [38320 42391])
            ("_NO_HISTORY" variable nil nil [42392 42431])
            ("_NO_STATE_SYMBOLS" variable nil nil [42432 42588])
            ("History" variable nil nil [42590 42675])
            ("History" type
               (:documentation "A 3-tuple of added, unchanged and deleted values,
    representing the changes which have occurred on an instrumented
    attribute.

    The easiest way to get a :class:`.History` object for a particular
    attribute on an object is to use the :func:`.inspect` function::

        from sqlalchemy import inspect

        hist = inspect(myobject).attrs.myattribute.history

    Each tuple member is an iterable sequence:

    * ``added`` - the collection of items added to the attribute (the first
      tuple element).

    * ``unchanged`` - the collection of items that have not changed on the
      attribute (the second tuple element).

    * ``deleted`` - the collection of items that have been removed from the
      attribute (the third tuple element).

    "
                :superclasses ("History")
                :members 
                  ( ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43500 43504]))                          )
                        (reparse-symbol indented_block_body) [43484 43544])
                    ("empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43559 43563]))                          
                        :documentation "Return True if this :class:`.History` has no changes
        and no existing, unchanged state.

        ")
                        (reparse-symbol indented_block_body) [43549 43857])
                    ("sum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43870 43874]))                          
                        :documentation "Return a collection of added + unchanged + deleted.")
                        (reparse-symbol indented_block_body) [43862 44060])
                    ("non_deleted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44081 44085]))                          
                        :documentation "Return a collection of added + unchanged.")
                        (reparse-symbol indented_block_body) [44065 44221])
                    ("non_added" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44240 44244]))                          
                        :documentation "Return a collection of unchanged + deleted.")
                        (reparse-symbol indented_block_body) [44226 44384])
                    ("has_changes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44405 44409]))                          
                        :documentation "Return True if this :class:`.History` has changes.")
                        (reparse-symbol indented_block_body) [44389 44526])
                    ("as_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44544 44548]))                          )
                        (reparse-symbol indented_block_body) [44531 44916])
                    ("from_scalar_attribute" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [44964 44967])
                            ("attribute" variable nil (reparse-symbol function_parameters) [44969 44978])
                            ("state" variable nil (reparse-symbol function_parameters) [44980 44985])
                            ("current" variable nil (reparse-symbol function_parameters) [44987 44994]))                          )
                        (reparse-symbol indented_block_body) [44921 45958])
                    ("from_object_attribute" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [46006 46009])
                            ("attribute" variable nil (reparse-symbol function_parameters) [46011 46020])
                            ("state" variable nil (reparse-symbol function_parameters) [46022 46027])
                            ("current" variable nil (reparse-symbol function_parameters) [46029 46036]))                          )
                        (reparse-symbol indented_block_body) [45963 46994])
                    ("from_collection" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [47036 47039])
                            ("attribute" variable nil (reparse-symbol function_parameters) [47041 47050])
                            ("state" variable nil (reparse-symbol function_parameters) [47052 47057])
                            ("current" variable nil (reparse-symbol function_parameters) [47059 47066]))                          )
                        (reparse-symbol indented_block_body) [46999 48207]))                  
                :type "class")
                nil [42678 48207])
            ("HISTORY_BLANK" variable nil nil [48208 48249])
            ("get_history" function
               (:documentation "Return a :class:`.History` record for the given object
    and attribute key.

    :param obj: an object whose class is instrumented by the
      attributes package.

    :param key: string attribute name.

    :param passive: indicates loading behavior for the attribute
       if the value is not already present.   This is a
       bitflag attribute, which defaults to the symbol
       :attr:`.PASSIVE_OFF` indicating all necessary SQL
       should be emitted.

    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [48268 48271])
                    ("key" variable nil (reparse-symbol function_parameters) [48273 48276])
                    ("passive" variable nil (reparse-symbol function_parameters) [48278 48285]))                  )
                nil [48252 49252])
            ("get_state_history" function (:arguments 
              ( ("state" variable nil (reparse-symbol function_parameters) [49276 49281])
                ("key" variable nil (reparse-symbol function_parameters) [49283 49286])
                ("passive" variable nil (reparse-symbol function_parameters) [49288 49295]))              ) nil [49254 49353])
            ("has_parent" function
               (:documentation "TODO"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [49370 49373])
                    ("obj" variable nil (reparse-symbol function_parameters) [49375 49378])
                    ("key" variable nil (reparse-symbol function_parameters) [49380 49383])
                    ("optimistic" variable nil (reparse-symbol function_parameters) [49385 49395]))                  )
                nil [49355 49541])
            ("register_attribute" function (:arguments 
              ( ("class_" variable nil (reparse-symbol function_parameters) [49566 49572])
                ("key" variable nil (reparse-symbol function_parameters) [49574 49577])
                ("kw" variable nil (reparse-symbol function_parameters) [49579 49583]))              ) nil [49543 49878])
            ("register_attribute_impl" function (:arguments 
              ( ("class_" variable nil (reparse-symbol function_parameters) [49908 49914])
                ("key" variable nil (reparse-symbol function_parameters) [49916 49919])
                ("uselist" variable nil (reparse-symbol function_parameters) [49929 49936])
                ("callable_" variable nil (reparse-symbol function_parameters) [49944 49953])
                ("useobject" variable nil (reparse-symbol function_parameters) [49968 49977])
                ("impl_class" variable nil (reparse-symbol function_parameters) [49993 50003])
                ("backref" variable nil (reparse-symbol function_parameters) [50010 50017])
                ("kw" variable nil (reparse-symbol function_parameters) [50024 50028]))              ) nil [49880 50978])
            ("register_descriptor" function (:arguments 
              ( ("class_" variable nil (reparse-symbol function_parameters) [51004 51010])
                ("key" variable nil (reparse-symbol function_parameters) [51012 51015])
                ("comparator" variable nil (reparse-symbol function_parameters) [51017 51027])
                ("parententity" variable nil (reparse-symbol function_parameters) [51066 51078])
                ("doc" variable nil (reparse-symbol function_parameters) [51085 51088]))              ) nil [50980 51385])
            ("unregister_attribute" function (:arguments 
              ( ("class_" variable nil (reparse-symbol function_parameters) [51412 51418])
                ("key" variable nil (reparse-symbol function_parameters) [51420 51423]))              ) nil [51387 51483])
            ("init_collection" function
               (:documentation "Initialize a collection attribute and return the collection adapter.

    This function is used to provide direct access to collection internals
    for a previously unloaded attribute.  e.g.::

        collection_adapter = init_collection(someobject, 'elements')
        for elem in values:
            collection_adapter.append_without_event(elem)

    For an easier way to do the above, see
    :func:`~sqlalchemy.orm.attributes.set_committed_value`.

    obj is an instrumented object instance.  An InstanceState
    is accepted directly for backwards compatibility but
    this usage is deprecated.

    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [51505 51508])
                    ("key" variable nil (reparse-symbol function_parameters) [51510 51513]))                  )
                nil [51485 52243])
            ("init_state_collection" function
               (:documentation "Initialize a collection attribute and return the collection adapter."
                :arguments 
                  ( ("state" variable nil (reparse-symbol function_parameters) [52271 52276])
                    ("dict_" variable nil (reparse-symbol function_parameters) [52278 52283])
                    ("key" variable nil (reparse-symbol function_parameters) [52285 52288]))                  )
                nil [52245 52508])
            ("set_committed_value" function
               (:documentation "Set the value of an attribute with no history events.

    Cancels any previous history present.  The value should be
    a scalar value for scalar-holding attributes, or
    an iterable for any collection-holding attribute.

    This is the same underlying method used when a lazy loader
    fires off and loads additional data from the database.
    In particular, this method can be used by application code
    which has loaded additional attributes or collections through
    separate queries, which can then be attached to an instance
    as though it were part of its original loaded state.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [52534 52542])
                    ("key" variable nil (reparse-symbol function_parameters) [52544 52547])
                    ("value" variable nil (reparse-symbol function_parameters) [52549 52554]))                  )
                nil [52510 53309])
            ("set_attribute" function
               (:documentation "Set the value of an attribute, firing history events.

    This function may be used regardless of instrumentation
    applied directly to the class, i.e. no descriptors are required.
    Custom attribute management schemes will need to make usage
    of this method to establish attribute state as understood
    by SQLAlchemy.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [53329 53337])
                    ("key" variable nil (reparse-symbol function_parameters) [53339 53342])
                    ("value" variable nil (reparse-symbol function_parameters) [53344 53349]))                  )
                nil [53311 53825])
            ("get_attribute" function
               (:documentation "Get the value of an attribute, firing any callables required.

    This function may be used regardless of instrumentation
    applied directly to the class, i.e. no descriptors are required.
    Custom attribute management schemes will need to make usage
    of this method to make usage of attribute state as understood
    by SQLAlchemy.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [53845 53853])
                    ("key" variable nil (reparse-symbol function_parameters) [53855 53858]))                  )
                nil [53827 54340])
            ("del_attribute" function
               (:documentation "Delete the value of an attribute, firing history events.

    This function may be used regardless of instrumentation
    applied directly to the class, i.e. no descriptors are required.
    Custom attribute management schemes will need to make usage
    of this method to establish attribute state as understood
    by SQLAlchemy.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [54360 54368])
                    ("key" variable nil (reparse-symbol function_parameters) [54370 54373]))                  )
                nil [54342 54842])
            ("flag_modified" function
               (:documentation "Mark an attribute on an instance as 'modified'.

    This sets the 'modified' flag on the instance and
    establishes an unconditional change event for the given attribute.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [54862 54870])
                    ("key" variable nil (reparse-symbol function_parameters) [54872 54875]))                  )
                nil [54844 55221]))          
      :file "attributes.py"
      :pointmax 55221
      :fsize 55220
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax '((FROM 600 . 604) (PERIOD 605 . 606) (FROM 538 . 542) (PERIOD 543 . 544) (PERIOD 505 . 506) (FROM 499 . 503) (PERIOD 504 . 505)))
    (semanticdb-table "session.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Provides the Session class and related utilities.\"\"\"" code nil nil [233 288])
            ("__future__" include nil nil [290 327])
            ("weakref" include nil nil [329 343])
            ("event" include nil nil [352 398])
            ("exc" include nil nil [352 398])
            ("engine" include nil nil [352 398])
            ("sql" include nil nil [352 398])
            ("util" include nil nil [352 398])
            ("expression" include nil nil [410 445])
            ("util" include nil nil [410 445])
            ("" code nil nil [460 553])
            ("" code nil nil [572 677])
            ("UOWTransaction" include nil nil [695 716])
            ("Mapper" include nil nil [730 743])
            ("SessionEvents" include nil nil [757 777])
            ("statelib" variable nil nil [778 832])
            ("sys" include nil nil [833 843])
            ("__all__" variable nil nil [845 924])
            ("_SessionClassMethods" type
               (:documentation "Class-level methods for :class:`.Session`, :class:`.sessionmaker`."
                :superclasses ("object")
                :members 
                  ( ("close_all" function
                       (:documentation "Close *all* sessions in memory."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1076 1079]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1045 1194])
                    ("identity_key" function
                       (:documentation "Return an identity key.

        This is an alias of :func:`.util.identity_key`.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1233 1236])
                            ("args" variable nil (reparse-symbol function_parameters) [1238 1243])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1245 1253]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1199 1415])
                    ("object_session" function
                       (:documentation "Return the :class:`.Session` to which an object belongs.

        This is an alias of :func:`.object_session`.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1456 1459])
                            ("instance" variable nil (reparse-symbol function_parameters) [1461 1469]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1420 1648]))                  
                :type "class")
                nil [927 1648])
            ("ACTIVE" variable nil nil [1650 1680])
            ("PREPARED" variable nil nil [1681 1715])
            ("COMMITTED" variable nil nil [1716 1752])
            ("DEACTIVE" variable nil nil [1753 1787])
            ("CLOSED" variable nil nil [1788 1818])
            ("SessionTransaction" type
               (:documentation "A :class:`.Session`-level transaction.

    :class:`.SessionTransaction` is a mostly behind-the-scenes object
    not normally referenced directly by application code.   It coordinates
    among multiple :class:`.Connection` objects, maintaining a database
    transaction for each one individually, committing or rolling them
    back all at once.   It also provides optional two-phase commit behavior
    which can augment this coordination operation.

    The :attr:`.Session.transaction` attribute of :class:`.Session`
    refers to the current :class:`.SessionTransaction` object in use, if any.


    A :class:`.SessionTransaction` is associated with a :class:`.Session`
    in its default mode of ``autocommit=False`` immediately, associated
    with no database connections.  As the :class:`.Session` is called upon
    to emit SQL on behalf of various :class:`.Engine` or :class:`.Connection`
    objects, a corresponding :class:`.Connection` and associated
    :class:`.Transaction` is added to a collection within the
    :class:`.SessionTransaction` object, becoming one of the
    connection/transaction pairs maintained by the
    :class:`.SessionTransaction`.

    The lifespan of the :class:`.SessionTransaction` ends when the
    :meth:`.Session.commit`, :meth:`.Session.rollback` or
    :meth:`.Session.close` methods are called.  At this point, the
    :class:`.SessionTransaction` removes its association with its parent
    :class:`.Session`.   A :class:`.Session` that is in ``autocommit=False``
    mode will create a new :class:`.SessionTransaction` to replace it
    immediately, whereas a :class:`.Session` that's in ``autocommit=True``
    mode will remain without a :class:`.SessionTransaction` until the
    :meth:`.Session.begin` method is called.

    Another detail of :class:`.SessionTransaction` behavior is that it is
    capable of \"nesting\".  This means that the :meth:`.Session.begin` method
    can be called while an existing :class:`.SessionTransaction` is already
    present, producing a new :class:`.SessionTransaction` that temporarily
    replaces the parent :class:`.SessionTransaction`.   When a
    :class:`.SessionTransaction` is produced as nested, it assigns itself to
    the :attr:`.Session.transaction` attribute.  When it is ended via
    :meth:`.Session.commit` or :meth:`.Session.rollback`, it restores its
    parent :class:`.SessionTransaction` back onto the
    :attr:`.Session.transaction` attribute.  The behavior is effectively a
    stack, where :attr:`.Session.transaction` refers to the current head of
    the stack.

    The purpose of this stack is to allow nesting of
    :meth:`.Session.rollback` or :meth:`.Session.commit` calls in context
    with various flavors of :meth:`.Session.begin`. This nesting behavior
    applies to when :meth:`.Session.begin_nested` is used to emit a
    SAVEPOINT transaction, and is also used to produce a so-called
    \"subtransaction\" which allows a block of code to use a
    begin/rollback/commit sequence regardless of whether or not its enclosing
    code block has begun a transaction.  The :meth:`.flush` method, whether
    called explicitly or via autoflush, is the primary consumer of the
    \"subtransaction\" feature, in that it wishes to guarantee that it works
    within in a transaction block regardless of whether or not the
    :class:`.Session` is in transactional mode when the method is called.

    See also:

    :meth:`.Session.rollback`

    :meth:`.Session.commit`

    :meth:`.Session.begin`

    :meth:`.Session.begin_nested`

    :attr:`.Session.is_active`

    :meth:`.SessionEvents.after_commit`

    :meth:`.SessionEvents.after_rollback`

    :meth:`.SessionEvents.after_soft_rollback`

    "
                :superclasses ("object")
                :members 
                  ( ("_rollback_exception" variable nil (reparse-symbol indented_block_body) [5599 5625])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5695 5717])
                            ("self" variable nil (reparse-symbol indented_block_body) [5726 5748])
                            ("self" variable nil (reparse-symbol indented_block_body) [5757 5778])
                            ("self" variable nil (reparse-symbol indented_block_body) [5787 5807])
                            ("self" variable nil (reparse-symbol indented_block_body) [5816 5836])
                            ("if" code nil (reparse-symbol indented_block_body) [5845 6035])
                            ("if" code nil (reparse-symbol indented_block_body) [6044 6126])
                            ("if" code nil (reparse-symbol indented_block_body) [6135 6265]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5644 5648])
                            ("session" variable nil (reparse-symbol function_parameters) [5650 5657])
                            ("parent" variable nil (reparse-symbol function_parameters) [5659 5665])
                            ("nested" variable nil (reparse-symbol function_parameters) [5672 5678]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5631 6265])
                    ("is_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6298 6302]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6270 6371])
                    ("_assert_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6395 6399])
                            ("prepared_ok" variable nil (reparse-symbol function_parameters) [6401 6412])
                            ("rollback_ok" variable nil (reparse-symbol function_parameters) [6444 6455])
                            ("deactive_ok" variable nil (reparse-symbol function_parameters) [6487 6498])
                            ("closed_msg" variable nil (reparse-symbol function_parameters) [6530 6540]))                          )
                        (reparse-symbol indented_block_body) [6376 8118])
                    ("_is_transaction_boundary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8166 8170]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8123 8220])
                    ("connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8240 8244])
                            ("bindkey" variable nil (reparse-symbol function_parameters) [8246 8253])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8255 8263]))                          )
                        (reparse-symbol indented_block_body) [8225 8399])
                    ("_begin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8415 8419])
                            ("nested" variable nil (reparse-symbol function_parameters) [8421 8427]))                          )
                        (reparse-symbol indented_block_body) [8404 8548])
                    ("_iterate_parents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8574 8578])
                            ("upto" variable nil (reparse-symbol function_parameters) [8580 8584]))                          )
                        (reparse-symbol indented_block_body) [8553 8924])
                    ("_take_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8948 8952]))                          )
                        (reparse-symbol indented_block_body) [8929 9499])
                    ("_restore_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9526 9530])
                            ("dirty_only" variable nil (reparse-symbol function_parameters) [9532 9542]))                          )
                        (reparse-symbol indented_block_body) [9504 10401])
                    ("_remove_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10427 10431]))                          )
                        (reparse-symbol indented_block_body) [10406 10780])
                    ("_connection_for_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10811 10815])
                            ("bind" variable nil (reparse-symbol function_parameters) [10817 10821]))                          )
                        (reparse-symbol indented_block_body) [10786 11923])
                    ("prepare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11940 11944]))                          )
                        (reparse-symbol indented_block_body) [11928 12195])
                    ("_prepare_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12218 12222]))                          )
                        (reparse-symbol indented_block_body) [12200 13285])
                    ("commit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13301 13305]))                          )
                        (reparse-symbol indented_block_body) [13290 13809])
                    ("rollback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13827 13831])
                            ("_capture_exception" variable nil (reparse-symbol function_parameters) [13833 13851]))                          )
                        (reparse-symbol indented_block_body) [13814 15170])
                    ("_rollback_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15194 15198]))                          )
                        (reparse-symbol indented_block_body) [15175 15455])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15470 15474]))                          )
                        (reparse-symbol indented_block_body) [15460 16136])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16155 16159]))                          )
                        (reparse-symbol indented_block_body) [16141 16182])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16200 16204])
                            ("type" variable nil (reparse-symbol function_parameters) [16206 16210])
                            ("value" variable nil (reparse-symbol function_parameters) [16212 16217])
                            ("traceback" variable nil (reparse-symbol function_parameters) [16219 16228]))                          )
                        (reparse-symbol indented_block_body) [16187 16571]))                  
                :type "class")
                nil [1820 16571])
            ("Session" type
               (:documentation "Manages persistence operations for ORM-mapped objects.

    The Session's usage paradigm is described at :doc:`/orm/session`.


    "
                :superclasses ("_SessionClassMethods")
                :members 
                  ( ("public_methods" variable nil (reparse-symbol indented_block_body) [16758 17086])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a new Session.

        See also the :class:`.sessionmaker` function which is used to
        generate a :class:`.Session`-producing callable with a given
        set of arguments.

        :param autocommit:

          .. warning::

             The autocommit flag is **not for general use**, and if it is used,
             queries should only be invoked within the span of a
             :meth:`.Session.begin` / :meth:`.Session.commit` pair.   Executing
             queries outside of a demarcated transaction is a legacy mode
             of usage, and can in some cases lead to concurrent connection
             checkouts.

          Defaults to ``False``. When ``True``, the
          :class:`.Session` does not keep a persistent transaction running, and
          will acquire connections from the engine on an as-needed basis,
          returning them immediately after their use. Flushes will begin and
          commit (or possibly rollback) their own transaction if no
          transaction is present. When using this mode, the
          :meth:`.Session.begin` method is used to explicitly start
          transactions.

          .. seealso::

            :ref:`session_autocommit`

        :param autoflush: When ``True``, all query operations will issue a
           ``flush()`` call to this ``Session`` before proceeding. This is a
           convenience feature so that ``flush()`` need not be called
           repeatedly in order for database queries to retrieve results. It's
           typical that ``autoflush`` is used in conjunction with
           ``autocommit=False``. In this scenario, explicit calls to
           ``flush()`` are rarely needed; you usually only need to call
           ``commit()`` (which flushes) to finalize changes.

        :param bind: An optional ``Engine`` or ``Connection`` to which this
           ``Session`` should be bound. When specified, all SQL operations
           performed by this session will execute via this connectable.

        :param binds: An optional dictionary which contains more granular
           \"bind\" information than the ``bind`` parameter provides. This
           dictionary can map individual ``Table`` instances as well as
           ``Mapper`` instances to individual ``Engine`` or ``Connection``
           objects. Operations which proceed relative to a particular
           ``Mapper`` will consult this dictionary for the direct ``Mapper``
           instance as well as the mapper's ``mapped_table`` attribute in
           order to locate an connectable to use. The full resolution is
           described in the ``get_bind()`` method of ``Session``.
           Usage looks like::

            Session = sessionmaker(binds={
                SomeMappedClass: create_engine('postgresql://engine1'),
                somemapper: create_engine('postgresql://engine2'),
                some_table: create_engine('postgresql://engine3'),
                })

          Also see the :meth:`.Session.bind_mapper`
          and :meth:`.Session.bind_table` methods.

        :param \\class_: Specify an alternate class other than
           ``sqlalchemy.orm.session.Session`` which should be used by the
           returned class. This is the only argument that is local to the
           ``sessionmaker()`` function, and is not sent directly to the
           constructor for ``Session``.

        :param _enable_transaction_accounting:  Defaults to ``True``.  A
           legacy-only flag which when ``False`` disables *all* 0.5-style
           object accounting on transaction boundaries, including auto-expiry
           of instances on rollback and commit, maintenance of the \"new\" and
           \"deleted\" lists upon rollback, and autoflush of pending changes upon
           begin(), all of which are interdependent.

        :param expire_on_commit:  Defaults to ``True``. When ``True``, all
           instances will be fully expired after each ``commit()``, so that
           all attribute/object access subsequent to a completed transaction
           will load from the most recent database state.

        :param extension: An optional
           :class:`~.SessionExtension` instance, or a list
           of such instances, which will receive pre- and post- commit and
           flush events, as well as a post-rollback event. **Deprecated.**
           Please see :class:`.SessionEvents`.

        :param query_cls:  Class which should be used to create new Query
           objects, as returned by the ``query()`` method. Defaults to
           :class:`~sqlalchemy.orm.query.Query`.

        :param twophase:  When ``True``, all transactions will be started as
            a \"two phase\" transaction, i.e. using the \"two phase\" semantics
            of the database in use along with an XID.  During a ``commit()``,
            after ``flush()`` has been issued for all attached databases, the
            ``prepare()`` method on each database's ``TwoPhaseTransaction``
            will be called. This allows each database to roll back the entire
            transaction, before each transaction is committed.

        :param weak_identity_map:  Defaults to ``True`` - when set to
           ``False``, objects placed in the :class:`.Session` will be
           strongly referenced until explicitly removed or the
           :class:`.Session` is closed.  **Deprecated** - this option
           is obsolete.

        \"\"\"" code nil (reparse-symbol indented_block_body) [17383 22819])
                            ("if" code nil (reparse-symbol indented_block_body) [22829 23128])
                            ("self" variable nil (reparse-symbol indented_block_body) [23136 23176])
                            ("self" variable nil (reparse-symbol indented_block_body) [23186 23200])
                            ("self" variable nil (reparse-symbol indented_block_body) [23255 23273])
                            ("self" variable nil (reparse-symbol indented_block_body) [23290 23306])
                            ("self" variable nil (reparse-symbol indented_block_body) [23315 23332])
                            ("self" variable nil (reparse-symbol indented_block_body) [23341 23363])
                            ("self" variable nil (reparse-symbol indented_block_body) [23372 23400])
                            ("self" variable nil (reparse-symbol indented_block_body) [23409 23432])
                            ("self" variable nil (reparse-symbol indented_block_body) [23441 23473])
                            ("self" variable nil (reparse-symbol indented_block_body) [23482 23508])
                            ("self" variable nil (reparse-symbol indented_block_body) [23517 23545])
                            ("self" variable nil (reparse-symbol indented_block_body) [23554 23594])
                            ("self" variable nil (reparse-symbol indented_block_body) [23603 23671])
                            ("self" variable nil (reparse-symbol indented_block_body) [23680 23704])
                            ("self" variable nil (reparse-symbol indented_block_body) [23713 23740])
                            ("if" code nil (reparse-symbol indented_block_body) [23750 23872])
                            ("if" code nil (reparse-symbol indented_block_body) [23881 24160])
                            ("if" code nil (reparse-symbol indented_block_body) [24169 24218])
                            ("_sessions" variable nil (reparse-symbol indented_block_body) [24226 24257]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17105 17109])
                            ("bind" variable nil (reparse-symbol function_parameters) [17111 17115])
                            ("autoflush" variable nil (reparse-symbol function_parameters) [17122 17131])
                            ("expire_on_commit" variable nil (reparse-symbol function_parameters) [17138 17154])
                            ("_enable_transaction_accounting" variable nil (reparse-symbol function_parameters) [17177 17207])
                            ("autocommit" variable nil (reparse-symbol function_parameters) [17231 17241])
                            ("twophase" variable nil (reparse-symbol function_parameters) [17249 17257])
                            ("weak_identity_map" variable nil (reparse-symbol function_parameters) [17282 17299])
                            ("binds" variable nil (reparse-symbol function_parameters) [17306 17311])
                            ("extension" variable nil (reparse-symbol function_parameters) [17318 17327])
                            ("query_cls" variable nil (reparse-symbol function_parameters) [17351 17360]))                          
                        :documentation "Construct a new Session.

        See also the :class:`.sessionmaker` function which is used to
        generate a :class:`.Session`-producing callable with a given
        set of arguments.

        :param autocommit:

          .. warning::

             The autocommit flag is **not for general use**, and if it is used,
             queries should only be invoked within the span of a
             :meth:`.Session.begin` / :meth:`.Session.commit` pair.   Executing
             queries outside of a demarcated transaction is a legacy mode
             of usage, and can in some cases lead to concurrent connection
             checkouts.

          Defaults to ``False``. When ``True``, the
          :class:`.Session` does not keep a persistent transaction running, and
          will acquire connections from the engine on an as-needed basis,
          returning them immediately after their use. Flushes will begin and
          commit (or possibly rollback) their own transaction if no
          transaction is present. When using this mode, the
          :meth:`.Session.begin` method is used to explicitly start
          transactions.

          .. seealso::

            :ref:`session_autocommit`

        :param autoflush: When ``True``, all query operations will issue a
           ``flush()`` call to this ``Session`` before proceeding. This is a
           convenience feature so that ``flush()`` need not be called
           repeatedly in order for database queries to retrieve results. It's
           typical that ``autoflush`` is used in conjunction with
           ``autocommit=False``. In this scenario, explicit calls to
           ``flush()`` are rarely needed; you usually only need to call
           ``commit()`` (which flushes) to finalize changes.

        :param bind: An optional ``Engine`` or ``Connection`` to which this
           ``Session`` should be bound. When specified, all SQL operations
           performed by this session will execute via this connectable.

        :param binds: An optional dictionary which contains more granular
           \"bind\" information than the ``bind`` parameter provides. This
           dictionary can map individual ``Table`` instances as well as
           ``Mapper`` instances to individual ``Engine`` or ``Connection``
           objects. Operations which proceed relative to a particular
           ``Mapper`` will consult this dictionary for the direct ``Mapper``
           instance as well as the mapper's ``mapped_table`` attribute in
           order to locate an connectable to use. The full resolution is
           described in the ``get_bind()`` method of ``Session``.
           Usage looks like::

            Session = sessionmaker(binds={
                SomeMappedClass: create_engine('postgresql://engine1'),
                somemapper: create_engine('postgresql://engine2'),
                some_table: create_engine('postgresql://engine3'),
                })

          Also see the :meth:`.Session.bind_mapper`
          and :meth:`.Session.bind_table` methods.

        :param \\class_: Specify an alternate class other than
           ``sqlalchemy.orm.session.Session`` which should be used by the
           returned class. This is the only argument that is local to the
           ``sessionmaker()`` function, and is not sent directly to the
           constructor for ``Session``.

        :param _enable_transaction_accounting:  Defaults to ``True``.  A
           legacy-only flag which when ``False`` disables *all* 0.5-style
           object accounting on transaction boundaries, including auto-expiry
           of instances on rollback and commit, maintenance of the \"new\" and
           \"deleted\" lists upon rollback, and autoflush of pending changes upon
           begin(), all of which are interdependent.

        :param expire_on_commit:  Defaults to ``True``. When ``True``, all
           instances will be fully expired after each ``commit()``, so that
           all attribute/object access subsequent to a completed transaction
           will load from the most recent database state.

        :param extension: An optional
           :class:`~.SessionExtension` instance, or a list
           of such instances, which will receive pre- and post- commit and
           flush events, as well as a post-rollback event. **Deprecated.**
           Please see :class:`.SessionEvents`.

        :param query_cls:  Class which should be used to create new Query
           objects, as returned by the ``query()`` method. Defaults to
           :class:`~sqlalchemy.orm.query.Query`.

        :param twophase:  When ``True``, all transactions will be started as
            a \"two phase\" transaction, i.e. using the \"two phase\" semantics
            of the database in use along with an XID.  During a ``commit()``,
            after ``flush()`` has been issued for all attached databases, the
            ``prepare()`` method on each database's ``TwoPhaseTransaction``
            will be called. This allows each database to roll back the entire
            transaction, before each transaction is committed.

        :param weak_identity_map:  Defaults to ``True`` - when set to
           ``False``, objects placed in the :class:`.Session` will be
           strongly referenced until explicitly removed or the
           :class:`.Session` is closed.  **Deprecated** - this option
           is obsolete.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17092 24258])
                    ("dispatch" variable nil (reparse-symbol indented_block_body) [24263 24305])
                    ("connection_callable" variable nil (reparse-symbol indented_block_body) [24311 24337])
                    ("transaction" variable nil (reparse-symbol indented_block_body) [24343 24361])
                    ("\"\"\"The current active or inactive :class:`.SessionTransaction`.\"\"\"" code nil (reparse-symbol indented_block_body) [24366 24432])
                    ("begin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24448 24452])
                            ("subtransactions" variable nil (reparse-symbol function_parameters) [24454 24469])
                            ("nested" variable nil (reparse-symbol function_parameters) [24477 24483]))                          
                        :documentation "Begin a transaction on this Session.

        If this Session is already within a transaction, either a plain
        transaction or nested transaction, an error is raised, unless
        ``subtransactions=True`` or ``nested=True`` is specified.

        The ``subtransactions=True`` flag indicates that this
        :meth:`~.Session.begin` can create a subtransaction if a transaction
        is already in progress. For documentation on subtransactions, please
        see :ref:`session_subtransactions`.

        The ``nested`` flag begins a SAVEPOINT transaction and is equivalent
        to calling :meth:`~.Session.begin_nested`. For documentation on
        SAVEPOINT transactions, please see :ref:`session_begin_nested`.

        ")
                        (reparse-symbol indented_block_body) [24438 25813])
                    ("begin_nested" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25835 25839]))                          
                        :documentation "Begin a `nested` transaction on this Session.

        The target database(s) must support SQL SAVEPOINTs or a
        SQLAlchemy-supported vendor implementation of the idea.

        For documentation on SAVEPOINT
        transactions, please see :ref:`session_begin_nested`.

        ")
                        (reparse-symbol indented_block_body) [25818 26182])
                    ("rollback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26200 26204]))                          
                        :documentation "Rollback the current transaction in progress.

        If no transaction is in progress, this method is a pass-through.

        This method rolls back the current transaction or nested transaction
        regardless of subtransactions being in effect.  All subtransactions up
        to the first real transaction are closed.  Subtransactions occur when
        begin() is called multiple times.

        .. seealso::

            :ref:`session_rollback`

        ")
                        (reparse-symbol indented_block_body) [26187 26795])
                    ("commit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26811 26815]))                          
                        :documentation "Flush pending changes and commit the current transaction.

        If no transaction is in progress, this method raises an
        :exc:`~sqlalchemy.exc.InvalidRequestError`.

        By default, the :class:`.Session` also expires all database
        loaded state on all ORM-managed attributes after transaction commit.
        This so that subsequent operations load the most recent
        data from the database.   This behavior can be disabled using
        the ``expire_on_commit=False`` option to :class:`.sessionmaker` or
        the :class:`.Session` constructor.

        If a subtransaction is in effect (which occurs when begin() is called
        multiple times), the subtransaction will be closed, and the next call
        to ``commit()`` will operate on the enclosing transaction.

        When using the :class:`.Session` in its default mode of
        ``autocommit=False``, a new transaction will
        be begun immediately after the commit, but note that the newly begun
        transaction does *not* use any connection resources until the first
        SQL is actually emitted.

        .. seealso::

            :ref:`session_committing`

        ")
                        (reparse-symbol indented_block_body) [26800 28236])
                    ("prepare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28253 28257]))                          
                        :documentation "Prepare the current transaction in progress for two phase commit.

        If no transaction is in progress, this method raises an
        :exc:`~sqlalchemy.exc.InvalidRequestError`.

        Only root transactions of two phase sessions can be prepared. If the
        current transaction is not such, an
        :exc:`~sqlalchemy.exc.InvalidRequestError` is raised.

        ")
                        (reparse-symbol indented_block_body) [28241 28884])
                    ("connection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28904 28908])
                            ("mapper" variable nil (reparse-symbol function_parameters) [28910 28916])
                            ("clause" variable nil (reparse-symbol function_parameters) [28923 28929])
                            ("bind" variable nil (reparse-symbol function_parameters) [28960 28964])
                            ("close_with_result" variable nil (reparse-symbol function_parameters) [28995 29012])
                            ("kw" variable nil (reparse-symbol function_parameters) [29044 29048]))                          
                        :documentation "Return a :class:`.Connection` object corresponding to this
        :class:`.Session` object's transactional state.

        If this :class:`.Session` is configured with ``autocommit=False``,
        either the :class:`.Connection` corresponding to the current
        transaction is returned, or if no transaction is in progress, a new
        one is begun and the :class:`.Connection` returned (note that no
        transactional state is established with the DBAPI until the first
        SQL statement is emitted).

        Alternatively, if this :class:`.Session` is configured with
        ``autocommit=True``, an ad-hoc :class:`.Connection` is returned
        using :meth:`.Engine.contextual_connect` on the underlying
        :class:`.Engine`.

        Ambiguity in multi-bind or unbound :class:`.Session` objects can be
        resolved through any of the optional keyword arguments.   This
        ultimately makes usage of the :meth:`.get_bind` method for resolution.

        :param bind:
          Optional :class:`.Engine` to be used as the bind.  If
          this engine is already involved in an ongoing transaction,
          that connection will be used.  This argument takes precedence
          over ``mapper``, ``clause``.

        :param mapper:
          Optional :func:`.mapper` mapped class, used to identify
          the appropriate bind.  This argument takes precedence over
          ``clause``.

        :param clause:
            A :class:`.ClauseElement` (i.e. :func:`~.sql.expression.select`,
            :func:`~.sql.expression.text`,
            etc.) which will be used to locate a bind, if a bind
            cannot otherwise be identified.

        :param close_with_result: Passed to :meth:`Engine.connect`, indicating
          the :class:`.Connection` should be considered \"single use\",
          automatically closing when the first result set is closed.  This
          flag only has an effect if this :class:`.Session` is configured with
          ``autocommit=True`` and does not already have a  transaction
          in progress.

        :param \\**kw:
          Additional keyword arguments are sent to :meth:`get_bind()`,
          allowing additional arguments to be passed to custom
          implementations of :meth:`get_bind`.

        ")
                        (reparse-symbol indented_block_body) [28889 31568])
                    ("_connection_for_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31598 31602])
                            ("engine" variable nil (reparse-symbol function_parameters) [31604 31610])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31612 31620]))                          )
                        (reparse-symbol indented_block_body) [31573 31798])
                    ("execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31815 31819])
                            ("clause" variable nil (reparse-symbol function_parameters) [31821 31827])
                            ("params" variable nil (reparse-symbol function_parameters) [31829 31835])
                            ("mapper" variable nil (reparse-symbol function_parameters) [31842 31848])
                            ("bind" variable nil (reparse-symbol function_parameters) [31855 31859])
                            ("kw" variable nil (reparse-symbol function_parameters) [31866 31870]))                          
                        :documentation "Execute a SQL expression construct or string statement within
        the current transaction.

        Returns a :class:`.ResultProxy` representing
        results of the statement execution, in the same manner as that of an
        :class:`.Engine` or
        :class:`.Connection`.

        E.g.::

            result = session.execute(
                        user_table.select().where(user_table.c.id == 5)
                    )

        :meth:`~.Session.execute` accepts any executable clause construct, such
        as :func:`~.sql.expression.select`,
        :func:`~.sql.expression.insert`,
        :func:`~.sql.expression.update`,
        :func:`~.sql.expression.delete`, and
        :func:`~.sql.expression.text`.  Plain SQL strings can be passed
        as well, which in the case of :meth:`.Session.execute` only
        will be interpreted the same as if it were passed via a
        :func:`~.expression.text` construct.  That is, the following usage::

            result = session.execute(
                        \"SELECT * FROM user WHERE id=:param\",
                        {\"param\":5}
                    )

        is equivalent to::

            from sqlalchemy import text
            result = session.execute(
                        text(\"SELECT * FROM user WHERE id=:param\"),
                        {\"param\":5}
                    )

        The second positional argument to :meth:`.Session.execute` is an
        optional parameter set.  Similar to that of
        :meth:`.Connection.execute`, whether this is passed as a single
        dictionary, or a list of dictionaries, determines whether the DBAPI
        cursor's ``execute()`` or ``executemany()`` is used to execute the
        statement.   An INSERT construct may be invoked for a single row::

            result = session.execute(users.insert(), {\"id\": 7, \"name\": \"somename\"})

        or for multiple rows::

            result = session.execute(users.insert(), [
                                    {\"id\": 7, \"name\": \"somename7\"},
                                    {\"id\": 8, \"name\": \"somename8\"},
                                    {\"id\": 9, \"name\": \"somename9\"}
                                ])

        The statement is executed within the current transactional context of
        this :class:`.Session`.   The :class:`.Connection` which is used
        to execute the statement can also be acquired directly by
        calling the :meth:`.Session.connection` method.  Both methods use
        a rule-based resolution scheme in order to determine the
        :class:`.Connection`, which in the average case is derived directly
        from the \"bind\" of the :class:`.Session` itself, and in other cases
        can be based on the :func:`.mapper`
        and :class:`.Table` objects passed to the method; see the documentation
        for :meth:`.Session.get_bind` for a full description of this scheme.

        The :meth:`.Session.execute` method does *not* invoke autoflush.

        The :class:`.ResultProxy` returned by the :meth:`.Session.execute`
        method is returned with the \"close_with_result\" flag set to true;
        the significance of this flag is that if this :class:`.Session` is
        autocommitting and does not have a transaction-dedicated
        :class:`.Connection` available, a temporary :class:`.Connection` is
        established for the statement execution, which is closed (meaning,
        returned to the connection pool) when the :class:`.ResultProxy` has
        consumed all available data. This applies *only* when the
        :class:`.Session` is configured with autocommit=True and no
        transaction has been started.

        :param clause:
            An executable statement (i.e. an :class:`.Executable` expression
            such as :func:`.expression.select`) or string SQL statement
            to be executed.

        :param params:
            Optional dictionary, or list of dictionaries, containing
            bound parameter values.   If a single dictionary, single-row
            execution occurs; if a list of dictionaries, an
            \"executemany\" will be invoked.  The keys in each dictionary
            must correspond to parameter names present in the statement.

        :param mapper:
          Optional :func:`.mapper` or mapped class, used to identify
          the appropriate bind.  This argument takes precedence over
          ``clause`` when locating a bind.   See :meth:`.Session.get_bind`
          for more details.

        :param bind:
          Optional :class:`.Engine` to be used as the bind.  If
          this engine is already involved in an ongoing transaction,
          that connection will be used.  This argument takes
          precedence over ``mapper`` and ``clause`` when locating
          a bind.

        :param \\**kw:
          Additional keyword arguments are sent to :meth:`.Session.get_bind()`
          to allow extensibility of \"bind\" schemes.

        .. seealso::

            :ref:`sqlexpression_toplevel` - Tutorial on using Core SQL
            constructs.

            :ref:`connections_toplevel` - Further information on direct
            statement execution.

            :meth:`.Connection.execute` - core level statement execution
            method, which is :meth:`.Session.execute` ultimately uses
            in order to execute the statement.

        ")
                        (reparse-symbol indented_block_body) [31803 37525])
                    ("scalar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37541 37545])
                            ("clause" variable nil (reparse-symbol function_parameters) [37547 37553])
                            ("params" variable nil (reparse-symbol function_parameters) [37555 37561])
                            ("mapper" variable nil (reparse-symbol function_parameters) [37568 37574])
                            ("bind" variable nil (reparse-symbol function_parameters) [37581 37585])
                            ("kw" variable nil (reparse-symbol function_parameters) [37592 37596]))                          
                        :documentation "Like :meth:`~.Session.execute` but return a scalar result.")
                        (reparse-symbol indented_block_body) [37530 37778])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37793 37797]))                          
                        :documentation "Close this Session.

        This clears all items and ends any transaction in progress.

        If this session were created with ``autocommit=False``, a new
        transaction is immediately begun.  Note that this new transaction does
        not use any connection resources until they are first needed.

        ")
                        (reparse-symbol indented_block_body) [37783 38305])
                    ("expunge_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38326 38330]))                          
                        :documentation "Remove all object instances from this ``Session``.

        This is equivalent to calling ``expunge(obj)`` on all objects in this
        ``Session``.

        ")
                        (reparse-symbol indented_block_body) [38310 38707])
                    ("bind_mapper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38895 38899])
                            ("mapper" variable nil (reparse-symbol function_parameters) [38901 38907])
                            ("bind" variable nil (reparse-symbol function_parameters) [38909 38913]))                          
                        :documentation "Bind operations for a mapper to a Connectable.

        mapper
          A mapper instance or mapped class

        bind
          Any Connectable: a ``Engine`` or ``Connection``.

        All subsequent operations involving this mapper will use the given
        `bind`.

        ")
                        (reparse-symbol indented_block_body) [38879 39412])
                    ("bind_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39432 39436])
                            ("table" variable nil (reparse-symbol function_parameters) [39438 39443])
                            ("bind" variable nil (reparse-symbol function_parameters) [39445 39449]))                          
                        :documentation "Bind operations on a Table to a Connectable.

        table
          A ``Table`` instance

        bind
          Any Connectable: a ``Engine`` or ``Connection``.

        All subsequent operations involving this ``Table`` will use the
        given `bind`.

        ")
                        (reparse-symbol indented_block_body) [39417 39770])
                    ("get_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39788 39792])
                            ("mapper" variable nil (reparse-symbol function_parameters) [39794 39800])
                            ("clause" variable nil (reparse-symbol function_parameters) [39807 39813]))                          
                        :documentation "Return a \"bind\" to which this :class:`.Session` is bound.

        The \"bind\" is usually an instance of :class:`.Engine`,
        except in the case where the :class:`.Session` has been
        explicitly bound directly to a :class:`.Connection`.

        For a multiply-bound or unbound :class:`.Session`, the
        ``mapper`` or ``clause`` arguments are used to determine the
        appropriate bind to return.

        Note that the \"mapper\" argument is usually present
        when :meth:`.Session.get_bind` is called via an ORM
        operation such as a :meth:`.Session.query`, each
        individual INSERT/UPDATE/DELETE operation within a
        :meth:`.Session.flush`, call, etc.

        The order of resolution is:

        1. if mapper given and session.binds is present,
           locate a bind based on mapper.
        2. if clause given and session.binds is present,
           locate a bind based on :class:`.Table` objects
           found in the given clause present in session.binds.
        3. if session.bind is present, return that.
        4. if clause given, attempt to return a bind
           linked to the :class:`.MetaData` ultimately
           associated with the clause.
        5. if mapper given, attempt to return a bind
           linked to the :class:`.MetaData` ultimately
           associated with the :class:`.Table` or other
           selectable to which the mapper is mapped.
        6. No bind can be found, :exc:`~sqlalchemy.exc.UnboundExecutionError`
           is raised.

        :param mapper:
          Optional :func:`.mapper` mapped class or instance of
          :class:`.Mapper`.   The bind can be derived from a :class:`.Mapper`
          first by consulting the \"binds\" map associated with this
          :class:`.Session`, and secondly by consulting the :class:`.MetaData`
          associated with the :class:`.Table` to which the :class:`.Mapper`
          is mapped for a bind.

        :param clause:
            A :class:`.ClauseElement` (i.e. :func:`~.sql.expression.select`,
            :func:`~.sql.expression.text`,
            etc.).  If the ``mapper`` argument is not present or could not
            produce a bind, the given expression construct will be searched
            for a bound element, typically a :class:`.Table` associated with
            bound :class:`.MetaData`.

        ")
                        (reparse-symbol indented_block_body) [39775 43730])
                    ("query" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43745 43749])
                            ("entities" variable nil (reparse-symbol function_parameters) [43751 43760])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43762 43770]))                          
                        :documentation "Return a new ``Query`` object corresponding to this ``Session``.")
                        (reparse-symbol indented_block_body) [43735 43910])
                    ("no_autoflush" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil)
                            ("util.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43971 43975]))                          
                        :documentation "Return a context manager that disables autoflush.

        e.g.::

            with session.no_autoflush:

                some_object = SomeClass()
                session.add(some_object)
                # won't autoflush
                some_object.related_thing = session.query(SomeRelated).first()

        Operations that proceed within the ``with:`` block
        will not be subject to flushes occurring upon query
        access.  This is useful when initializing a series
        of objects which involve existing database queries,
        where the uncompleted object should not yet be flushed.

        .. versionadded:: 0.7.6

        ")
                        (reparse-symbol indented_block_body) [43915 44761])
                    ("_autoflush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44781 44785]))                          )
                        (reparse-symbol indented_block_body) [44766 44863])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44880 44884])
                            ("instance" variable nil (reparse-symbol function_parameters) [44886 44894])
                            ("attribute_names" variable nil (reparse-symbol function_parameters) [44896 44911])
                            ("lockmode" variable nil (reparse-symbol function_parameters) [44918 44926]))                          
                        :documentation "Expire and refresh the attributes on the given instance.

        A query will be issued to the database and all attributes will be
        refreshed with their current database value.

        Lazy-loaded relational attributes will remain lazily loaded, so that
        the instance-wide refresh operation will be followed immediately by
        the lazy load of that attribute.

        Eagerly-loaded relational attributes will eagerly load within the
        single refresh operation.

        Note that a highly isolated transaction will return the same values as
        were previously read in that same transaction, regardless of changes
        in database state outside of that transaction - usage of
        :meth:`~Session.refresh` usually only makes sense if non-ORM SQL
        statement were emitted in the ongoing transaction, or if autocommit
        mode is turned on.

        :param attribute_names: optional.  An iterable collection of
          string attribute names indicating a subset of attributes to
          be refreshed.

        :param lockmode: Passed to the :class:`~sqlalchemy.orm.query.Query`
          as used by :meth:`~sqlalchemy.orm.query.Query.with_lockmode`.

        ")
                        (reparse-symbol indented_block_body) [44868 46738])
                    ("expire_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46758 46762]))                          
                        :documentation "Expires all persistent instances within this Session.

        When any attributes on a persistent instance is next accessed,
        a query will be issued using the
        :class:`.Session` object's current transactional context in order to
        load all expired attributes for the given instance.   Note that
        a highly isolated transaction will return the same values as were
        previously read in that same transaction, regardless of changes
        in database state outside of that transaction.

        To expire individual objects and individual attributes
        on those objects, use :meth:`Session.expire`.

        The :class:`.Session` object's default behavior is to
        expire all state whenever the :meth:`Session.rollback`
        or :meth:`Session.commit` methods are called, so that new
        state can be loaded for the new transaction.   For this reason,
        calling :meth:`Session.expire_all` should not be needed when
        autocommit is ``False``, assuming the transaction is isolated.

        ")
                        (reparse-symbol indented_block_body) [46743 47948])
                    ("expire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47964 47968])
                            ("instance" variable nil (reparse-symbol function_parameters) [47970 47978])
                            ("attribute_names" variable nil (reparse-symbol function_parameters) [47980 47995]))                          
                        :documentation "Expire the attributes on an instance.

        Marks the attributes of an instance as out of date. When an expired
        attribute is next accessed, a query will be issued to the
        :class:`.Session` object's current transactional context in order to
        load all expired attributes for the given instance.   Note that
        a highly isolated transaction will return the same values as were
        previously read in that same transaction, regardless of changes
        in database state outside of that transaction.

        To expire all objects in the :class:`.Session` simultaneously,
        use :meth:`Session.expire_all`.

        The :class:`.Session` object's default behavior is to
        expire all state whenever the :meth:`Session.rollback`
        or :meth:`Session.commit` methods are called, so that new
        state can be loaded for the new transaction.   For this reason,
        calling :meth:`Session.expire` only makes sense for the specific
        case that a non-ORM SQL statement was emitted in the current
        transaction.

        :param instance: The instance to be refreshed.
        :param attribute_names: optional list of string attribute names
          indicating a subset of attributes to be expired.

        ")
                        (reparse-symbol indented_block_body) [47953 49487])
                    ("_expire_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49510 49514])
                            ("state" variable nil (reparse-symbol function_parameters) [49516 49521])
                            ("attribute_names" variable nil (reparse-symbol function_parameters) [49523 49538]))                          )
                        (reparse-symbol indented_block_body) [49492 50066])
                    ("_conditional_expire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50095 50099])
                            ("state" variable nil (reparse-symbol function_parameters) [50101 50106]))                          
                        :documentation "Expire a state if persistent, else expunge if pending")
                        (reparse-symbol indented_block_body) [50071 50361])
                    ("" code nil (reparse-symbol indented_block_body) [50382 50486])
                    ("prune" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50501 50505]))                          
                        :documentation "Remove unreferenced instances cached in the identity map.

        Note that this method is only meaningful if \"weak_identity_map\" is set
        to False.  The default weak identity map is self-pruning.

        Removes any object in this Session's identity map that is not
        referenced in user code, modified, new or scheduled for deletion.
        Returns the number of objects pruned.

        ")
                        (reparse-symbol indented_block_body) [50491 50968])
                    ("expunge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50985 50989])
                            ("instance" variable nil (reparse-symbol function_parameters) [50991 50999]))                          
                        :documentation "Remove the `instance` from this ``Session``.

        This will free all internal references to the instance.  Cascading
        will be applied according to the *expunge* cascade rule.

        ")
                        (reparse-symbol indented_block_body) [50973 51798])
                    ("_expunge_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51822 51826])
                            ("state" variable nil (reparse-symbol function_parameters) [51828 51833]))                          )
                        (reparse-symbol indented_block_body) [51803 52184])
                    ("_register_newly_persistent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52220 52224])
                            ("states" variable nil (reparse-symbol function_parameters) [52226 52232]))                          )
                        (reparse-symbol indented_block_body) [52189 54484])
                    ("_register_altered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54511 54515])
                            ("states" variable nil (reparse-symbol function_parameters) [54517 54523]))                          )
                        (reparse-symbol indented_block_body) [54489 54803])
                    ("_remove_newly_deleted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54834 54838])
                            ("states" variable nil (reparse-symbol function_parameters) [54840 54846]))                          )
                        (reparse-symbol indented_block_body) [54808 55129])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55142 55146])
                            ("instance" variable nil (reparse-symbol function_parameters) [55148 55156])
                            ("_warn" variable nil (reparse-symbol function_parameters) [55158 55163]))                          
                        :documentation "Place an object in the ``Session``.

        Its state will be persisted to the database on the next flush
        operation.

        Repeated calls to ``add()`` will be ignored. The opposite of ``add()``
        is ``expunge()``.

        ")
                        (reparse-symbol indented_block_body) [55134 55715])
                    ("add_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55732 55736])
                            ("instances" variable nil (reparse-symbol function_parameters) [55738 55747]))                          
                        :documentation "Add the given collection of instances to this ``Session``.")
                        (reparse-symbol indented_block_body) [55720 55990])
                    ("_save_or_update_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56021 56025])
                            ("state" variable nil (reparse-symbol function_parameters) [56027 56032]))                          )
                        (reparse-symbol indented_block_body) [55995 56375])
                    ("delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56391 56395])
                            ("instance" variable nil (reparse-symbol function_parameters) [56397 56405]))                          
                        :documentation "Mark an instance as deleted.

        The database delete operation occurs upon ``flush()``.

        ")
                        (reparse-symbol indented_block_body) [56380 57664])
                    ("merge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57679 57683])
                            ("instance" variable nil (reparse-symbol function_parameters) [57685 57693])
                            ("load" variable nil (reparse-symbol function_parameters) [57695 57699]))                          
                        :documentation "Copy the state of a given instance into a corresponding instance
        within this :class:`.Session`.

        :meth:`.Session.merge` examines the primary key attributes of the
        source instance, and attempts to reconcile it with an instance of the
        same primary key in the session.   If not found locally, it attempts
        to load the object from the database based on primary key, and if
        none can be located, creates a new instance.  The state of each
        attribute on the source instance is then copied to the target instance.
        The resulting target instance is then returned by the method; the
        original source instance is left unmodified, and un-associated with the
        :class:`.Session` if not already.

        This operation cascades to associated instances if the association is
        mapped with ``cascade=\"merge\"``.

        See :ref:`unitofwork_merging` for a detailed discussion of merging.

        :param instance: Instance to be merged.
        :param load: Boolean, when False, :meth:`.merge` switches into
         a \"high performance\" mode which causes it to forego emitting history
         events as well as all database access.  This flag is used for
         cases such as transferring graphs of objects into a :class:`.Session`
         from a second level cache, or to transfer just-loaded objects
         into the :class:`.Session` owned by a worker thread or process
         without re-querying the database.

         The ``load=False`` use case adds the caveat that the given
         object has to be in a \"clean\" state, that is, has no pending changes
         to be flushed - even if the incoming object is detached from any
         :class:`.Session`.   This is so that when
         the merge operation populates local attributes and
         cascades to related objects and
         collections, the values can be \"stamped\" onto the
         target object as is, without generating any history or attribute
         events, and without the need to reconcile the incoming data with
         any existing related objects or collections that might not
         be loaded.  The resulting objects from ``load=False`` are always
         produced as \"clean\", so it is only appropriate that the given objects
         should be \"clean\" as well, else this suggests a mis-use of the method.

        ")
                        (reparse-symbol indented_block_body) [57669 60732])
                    ("_merge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60748 60752])
                            ("state" variable nil (reparse-symbol function_parameters) [60754 60759])
                            ("state_dict" variable nil (reparse-symbol function_parameters) [60761 60771])
                            ("load" variable nil (reparse-symbol function_parameters) [60773 60777])
                            ("_recursive" variable nil (reparse-symbol function_parameters) [60784 60794]))                          )
                        (reparse-symbol indented_block_body) [60737 64798])
                    ("_validate_persistent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64828 64832])
                            ("state" variable nil (reparse-symbol function_parameters) [64834 64839]))                          )
                        (reparse-symbol indented_block_body) [64803 65059])
                    ("_save_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65079 65083])
                            ("state" variable nil (reparse-symbol function_parameters) [65085 65090]))                          )
                        (reparse-symbol indented_block_body) [65064 65501])
                    ("_update_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65523 65527])
                            ("state" variable nil (reparse-symbol function_parameters) [65529 65534])
                            ("discard_existing" variable nil (reparse-symbol function_parameters) [65536 65552]))                          )
                        (reparse-symbol indented_block_body) [65506 66363])
                    ("_save_or_update_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66393 66397])
                            ("state" variable nil (reparse-symbol function_parameters) [66399 66404]))                          )
                        (reparse-symbol indented_block_body) [66368 66523])
                    ("_delete_impl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66545 66549])
                            ("state" variable nil (reparse-symbol function_parameters) [66551 66556]))                          )
                        (reparse-symbol indented_block_body) [66528 66793])
                    ("enable_relationship_loading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66830 66834])
                            ("obj" variable nil (reparse-symbol function_parameters) [66836 66839]))                          
                        :documentation "Associate an object with this :class:`.Session` for related
        object loading.

        .. warning::

            :meth:`.enable_relationship_loading` exists to serve special
            use cases and is not recommended for general use.

        Accesses of attributes mapped with :func:`.relationship`
        will attempt to load a value from the database using this
        :class:`.Session` as the source of connectivity.  The values
        will be loaded based on foreign key values present on this
        object - it follows that this functionality
        generally only works for many-to-one-relationships.

        The object will be attached to this session, but will
        **not** participate in any persistence operations; its state
        for almost all purposes will remain either \"transient\" or
        \"detached\", except for the case of relationship loading.

        Also note that backrefs will often not work as expected.
        Altering a relationship-bound attribute on the target object
        may not fire off a backref event, if the effective value
        is what was already loaded from a foreign-key-holding value.

        The :meth:`.Session.enable_relationship_loading` method supersedes
        the ``load_on_pending`` flag on :func:`.relationship`.   Unlike
        that flag, :meth:`.Session.enable_relationship_loading` allows
        an object to remain transient while still being able to load
        related items.

        To make a transient object associated with a :class:`.Session`
        via :meth:`.Session.enable_relationship_loading` pending, add
        it to the :class:`.Session` using :meth:`.Session.add` normally.

        :meth:`.Session.enable_relationship_loading` does not improve
        behavior when the ORM is used normally - object references should be
        constructed at the object level, not at the foreign key level, so
        that they are present in an ordinary way before flush()
        proceeds.  This method is not intended for general use.

        .. versionadded:: 0.8

        ")
                        (reparse-symbol indented_block_body) [66798 69058])
                    ("_before_attach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69082 69086])
                            ("state" variable nil (reparse-symbol function_parameters) [69088 69093]))                          )
                        (reparse-symbol indented_block_body) [69063 69251])
                    ("_attach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69268 69272])
                            ("state" variable nil (reparse-symbol function_parameters) [69274 69279])
                            ("include_before" variable nil (reparse-symbol function_parameters) [69281 69295]))                          )
                        (reparse-symbol indented_block_body) [69256 70529])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70551 70555])
                            ("instance" variable nil (reparse-symbol function_parameters) [70557 70565]))                          
                        :documentation "Return True if the instance is associated with this session.

        The instance may be pending or persistent within the Session for a
        result of True.

        ")
                        (reparse-symbol indented_block_body) [70534 70948])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70966 70970]))                          
                        :documentation "Iterate over all pending or persistent instances within this
        Session.

        ")
                        (reparse-symbol indented_block_body) [70953 71150])
                    ("_contains_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71175 71179])
                            ("state" variable nil (reparse-symbol function_parameters) [71181 71186]))                          )
                        (reparse-symbol indented_block_body) [71155 71266])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71281 71285])
                            ("objects" variable nil (reparse-symbol function_parameters) [71287 71294]))                          
                        :documentation "Flush all the object changes to the database.

        Writes out all pending object creations, deletions and modifications
        to the database as INSERTs, DELETEs, UPDATEs, etc.  Operations are
        automatically ordered by the Session's unit of work dependency
        solver.

        Database operations will be issued in the current transactional
        context and do not affect the state of the transaction, unless an
        error occurs, in which case the entire transaction is rolled back.
        You may flush() as often as you like within a transaction to move
        changes from Python to the database's transaction buffer.

        For ``autocommit`` Sessions with no active manual transaction, flush()
        will create a transaction on the fly that surrounds the entire set of
        operations int the flush.

        :param objects: Optional; restricts the flush operation to operate
          only on elements that are in the given collection.

          This feature is for an extremely narrow set of use cases where
          particular objects may need to be operated upon before the
          full flush() occurs.  It is not intended for general use.

        ")
                        (reparse-symbol indented_block_body) [71271 72799])
                    ("_flush_warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72823 72827])
                            ("method" variable nil (reparse-symbol function_parameters) [72829 72835]))                          )
                        (reparse-symbol indented_block_body) [72804 73157])
                    ("_is_clean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73176 73180]))                          )
                        (reparse-symbol indented_block_body) [73162 73313])
                    ("_flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73329 73333])
                            ("objects" variable nil (reparse-symbol function_parameters) [73335 73342]))                          )
                        (reparse-symbol indented_block_body) [73318 77011])
                    ("is_modified" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77032 77036])
                            ("instance" variable nil (reparse-symbol function_parameters) [77038 77046])
                            ("include_collections" variable nil (reparse-symbol function_parameters) [77048 77067])
                            ("passive" variable nil (reparse-symbol function_parameters) [77102 77109]))                          
                        :documentation "Return ``True`` if the given instance has locally
        modified attributes.

        This method retrieves the history for each instrumented
        attribute on the instance and performs a comparison of the current
        value to its previously committed value, if any.

        It is in effect a more expensive and accurate
        version of checking for the given instance in the
        :attr:`.Session.dirty` collection; a full test for
        each attribute's net \"dirty\" status is performed.

        E.g.::

            return session.is_modified(someobject)

        .. versionchanged:: 0.8
            When using SQLAlchemy 0.7 and earlier, the ``passive``
            flag should **always** be explicitly set to ``True``,
            else SQL loads/autoflushes may proceed which can affect
            the modified state itself:
            ``session.is_modified(someobject, passive=True)``\\ .
            In 0.8 and above, the behavior is corrected and
            this flag is ignored.

        A few caveats to this method apply:

        * Instances present in the :attr:`.Session.dirty` collection may report
          ``False`` when tested with this method.  This is because
          the object may have received change events via attribute
          mutation, thus placing it in :attr:`.Session.dirty`,
          but ultimately the state is the same as that loaded from
          the database, resulting in no net change here.
        * Scalar attributes may not have recorded the previously set
          value when a new value was applied, if the attribute was not loaded,
          or was expired, at the time the new value was received - in these
          cases, the attribute is assumed to have a change, even if there is
          ultimately no net change against its database value. SQLAlchemy in
          most cases does not need the \"old\" value when a set event occurs, so
          it skips the expense of a SQL call if the old value isn't present,
          based on the assumption that an UPDATE of the scalar value is
          usually needed, and in those few cases where it isn't, is less
          expensive on average than issuing a defensive SELECT.

          The \"old\" value is fetched unconditionally upon set only if the
          attribute container has the ``active_history`` flag set to ``True``.
          This flag is set typically for primary key attributes and scalar
          object references that are not a simple many-to-one.  To set this
          flag for any arbitrary mapped column, use the ``active_history``
          argument with :func:`.column_property`.

        :param instance: mapped instance to be tested for pending changes.
        :param include_collections: Indicates if multivalued collections
         should be included in the operation.  Setting this to ``False`` is a
         way to detect only local-column based properties (i.e. scalar columns
         or many-to-one foreign keys) that would result in an UPDATE for this
         instance upon flush.
        :param passive:
         .. versionchanged:: 0.8
             Ignored for backwards compatibility.
             When using SQLAlchemy 0.7 and earlier, this flag should always
             be set to ``True``.

        ")
                        (reparse-symbol indented_block_body) [77016 81053])
                    ("is_active" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81086 81090]))                          
                        :documentation "True if this :class:`.Session` is in \"transaction mode\" and
        is not in \"partial rollback\" state.

        The :class:`.Session` in its default mode of ``autocommit=False``
        is essentially always in \"transaction mode\", in that a
        :class:`.SessionTransaction` is associated with it as soon as
        it is instantiated.  This :class:`.SessionTransaction` is immediately
        replaced with a new one as soon as it is ended, due to a rollback,
        commit, or close operation.

        \"Transaction mode\" does *not* indicate whether
        or not actual database connection resources are in use;  the
        :class:`.SessionTransaction` object coordinates among zero or more
        actual database transactions, and starts out with none, accumulating
        individual DBAPI connections as different data sources are used
        within its scope.   The best way to track when a particular
        :class:`.Session` has actually begun to use DBAPI resources is to
        implement a listener using the :meth:`.SessionEvents.after_begin`
        method, which will deliver both the :class:`.Session` as well as the
        target :class:`.Connection` to a user-defined event listener.

        The \"partial rollback\" state refers to when an \"inner\" transaction,
        typically used during a flush, encounters an error and emits a
        rollback of the DBAPI connection.  At this point, the
        :class:`.Session` is in \"partial rollback\" and awaits for the user to
        call :meth:`.Session.rollback`, in order to close out the
        transaction stack.  It is in this \"partial rollback\" period that the
        :attr:`.is_active` flag returns False.  After the call to
        :meth:`.Session.rollback`, the :class:`.SessionTransaction` is replaced
        with a new one and :attr:`.is_active` returns ``True`` again.

        When a :class:`.Session` is used in ``autocommit=True`` mode, the
        :class:`.SessionTransaction` is only instantiated within the scope
        of a flush call, or when :meth:`.Session.begin` is called.  So
        :attr:`.is_active` will always be ``False`` outside of a flush or
        :meth:`.Session.begin` block in this mode, and will be ``True``
        within the :meth:`.Session.begin` block as long as it doesn't enter
        \"partial rollback\" state.

        From all the above, it follows that the only purpose to this flag is
        for application frameworks that wish to detect is a \"rollback\" is
        necessary within a generic error handling routine, for
        :class:`.Session` objects that would otherwise be in
        \"partial rollback\" mode.  In a typical integration case, this is also
        not necessary as it is standard practice to emit
        :meth:`.Session.rollback` unconditionally within the outermost
        exception catch.

        To track the transactional state of a :class:`.Session` fully,
        use event listeners, primarily the :meth:`.SessionEvents.after_begin`,
        :meth:`.SessionEvents.after_commit`,
        :meth:`.SessionEvents.after_rollback` and related events.

        ")
                        (reparse-symbol indented_block_body) [81058 84286])
                    ("identity_map" variable nil (reparse-symbol indented_block_body) [84291 84310])
                    ("\"\"\"A mapping of object identities to objects themselves.

    Iterating through ``Session.identity_map.values()`` provides
    access to the full set of persistent objects (i.e., those
    that have row identity) currently in the session.

    See also:

    :func:`.identity_key` - operations involving identity keys.

    \"\"\"" code nil (reparse-symbol indented_block_body) [84315 84642])
                    ("_dirty_states" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84680 84684]))                          
                        :documentation "The set of all persistent states considered dirty.

        This method returns all states that were modified including
        those that were possibly deleted.

        ")
                        (reparse-symbol indented_block_body) [84648 84922])
                    ("dirty" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84951 84955]))                          
                        :documentation "The set of all persistent instances considered dirty.

        E.g.::

            some_mapped_object in session.dirty

        Instances are considered dirty when they were modified but not
        deleted.

        Note that this 'dirty' calculation is 'optimistic'; most
        attribute-setting or collection modification operations will
        mark an instance as 'dirty' and place it in this set, even if
        there is no net change to the attribute's value.  At flush
        time, the value of each attribute is compared to its
        previously saved value, and if there's no net change, no SQL
        operation will occur (this is a more expensive operation so
        it's only done at flush time).

        To check if an instance has actionable net changes to its
        attributes, use the :meth:`.Session.is_modified` method.

        ")
                        (reparse-symbol indented_block_body) [84927 85979])
                    ("deleted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86010 86014]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [85984 86153])
                    ("new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86180 86184]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [86158 86316]))                  
                :type "class")
                nil [16573 86316])
            ("sessionmaker" type
               (:documentation "A configurable :class:`.Session` factory.

    The :class:`.sessionmaker` factory generates new
    :class:`.Session` objects when called, creating them given
    the configurational arguments established here.

    e.g.::

        # global scope
        Session = sessionmaker(autoflush=False)

        # later, in a local scope, create and use a session:
        sess = Session()

    Any keyword arguments sent to the constructor itself will override the
    \"configured\" keywords::

        Session = sessionmaker()

        # bind an individual session to a connection
        sess = Session(bind=connection)

    The class also includes a method :meth:`.configure`, which can
    be used to specify additional keyword arguments to the factory, which
    will take effect for subsequent :class:`.Session` objects generated.
    This is usually used to associate one or more :class:`.Engine` objects
    with an existing :class:`.sessionmaker` factory before it is first
    used::

        # application starts
        Session = sessionmaker()

        # ... later
        engine = create_engine('sqlite:///foo.db')
        Session.configure(bind=engine)

        sess = Session()

    .. seealso:

        :ref:`session_getting` - introductory text on creating
        sessions using :class:`.sessionmaker`.

    "
                :superclasses ("_SessionClassMethods")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a new :class:`.sessionmaker`.

        All arguments here except for ``class_`` correspond to arguments
        accepted by :class:`.Session` directly.  See the
        :meth:`.Session.__init__` docstring for more details on parameters.

        :param bind: a :class:`.Engine` or other :class:`.Connectable` with
         which newly created :class:`.Session` objects will be associated.
        :param class_: class to use in order to create new :class:`.Session`
         objects.  Defaults to :class:`.Session`.
        :param autoflush: The autoflush setting to use with newly created
         :class:`.Session` objects.
        :param autocommit: The autocommit setting to use with newly created
         :class:`.Session` objects.
        :param expire_on_commit=True: the expire_on_commit setting to use
         with newly created :class:`.Session` objects.
        :param \\**kw: all other keyword arguments are passed to the constructor
         of newly created :class:`.Session` objects.

        \"\"\"" code nil (reparse-symbol indented_block_body) [87861 88886])
                            ("kw" variable nil (reparse-symbol indented_block_body) [88895 88912])
                            ("kw" variable nil (reparse-symbol indented_block_body) [88921 88948])
                            ("kw" variable nil (reparse-symbol indented_block_body) [88957 88986])
                            ("kw" variable nil (reparse-symbol indented_block_body) [88995 89036])
                            ("self" variable nil (reparse-symbol indented_block_body) [89045 89057])
                            ("self" variable nil (reparse-symbol indented_block_body) [89183 89233]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87708 87712])
                            ("bind" variable nil (reparse-symbol function_parameters) [87714 87718])
                            ("class_" variable nil (reparse-symbol function_parameters) [87725 87731])
                            ("autoflush" variable nil (reparse-symbol function_parameters) [87741 87750])
                            ("autocommit" variable nil (reparse-symbol function_parameters) [87781 87791])
                            ("expire_on_commit" variable nil (reparse-symbol function_parameters) [87823 87839])
                            ("kw" variable nil (reparse-symbol function_parameters) [87846 87850]))                          
                        :documentation "Construct a new :class:`.sessionmaker`.

        All arguments here except for ``class_`` correspond to arguments
        accepted by :class:`.Session` directly.  See the
        :meth:`.Session.__init__` docstring for more details on parameters.

        :param bind: a :class:`.Engine` or other :class:`.Connectable` with
         which newly created :class:`.Session` objects will be associated.
        :param class_: class to use in order to create new :class:`.Session`
         objects.  Defaults to :class:`.Session`.
        :param autoflush: The autoflush setting to use with newly created
         :class:`.Session` objects.
        :param autocommit: The autocommit setting to use with newly created
         :class:`.Session` objects.
        :param expire_on_commit=True: the expire_on_commit setting to use
         with newly created :class:`.Session` objects.
        :param \\**kw: all other keyword arguments are passed to the constructor
         of newly created :class:`.Session` objects.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87695 89234])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89252 89256])
                            ("local_kw" variable nil (reparse-symbol function_parameters) [89258 89268]))                          
                        :documentation "Produce a new :class:`.Session` object using the configuration
        established in this :class:`.sessionmaker`.

        In Python, the ``__call__`` method is invoked on an object when
        it is \"called\" in the same way as a function::

            Session = sessionmaker()
            session = Session()  # invokes sessionmaker.__call__()

        ")
                        (reparse-symbol indented_block_body) [89239 89757])
                    ("configure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89776 89780])
                            ("new_kw" variable nil (reparse-symbol function_parameters) [89782 89790]))                          
                        :documentation "(Re)configure the arguments for this sessionmaker.

        e.g.::

            Session = sessionmaker()

            Session.configure(bind=create_engine('sqlite://'))
        ")
                        (reparse-symbol indented_block_body) [89762 90016])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90034 90038]))                          )
                        (reparse-symbol indented_block_body) [90021 90259]))                  
                :type "class")
                nil [86318 90259])
            ("_sessions" variable nil nil [90260 90301])
            ("make_transient" function
               (:documentation "Make the given instance 'transient'.

    This will remove its association with any
    session and additionally will remove its \"identity key\",
    such that it's as though the object were newly constructed,
    except retaining its values.   It also resets the
    \"deleted\" flag on the state if this object
    had been explicitly deleted by its session.

    Attributes which were \"expired\" or deferred at the
    instance level are reverted to undefined, and
    will not trigger any loads.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [90323 90331]))                  )
                nil [90304 91139])
            ("object_session" function
               (:documentation "Return the ``Session`` to which instance belongs.

    If the instance is not a mapped instance, an error is raised.

    "
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [91160 91168]))                  )
                nil [91141 91456])
            ("_state_session" function (:arguments 
              ( ("state" variable nil (reparse-symbol function_parameters) [91477 91482]))              ) nil [91458 91628])
            ("_new_sessionid" variable nil nil [91629 91660]))          
      :file "session.py"
      :pointmax 91661
      :fsize 91660
      :lastmodtime '(21002 33914 0 0)
      :unmatched-syntax '((FROM 744 . 748) (PERIOD 749 . 750) (FROM 717 . 721) (PERIOD 722 . 723) (FROM 678 . 682) (PERIOD 683 . 684) (FROM 554 . 558) (PERIOD 559 . 560) (FROM 446 . 450) (PERIOD 451 . 452) (PERIOD 405 . 406) (FROM 399 . 403) (PERIOD 404 . 405) (PERIOD 350 . 351) (FROM 344 . 348) (PERIOD 349 . 350)))
    (semanticdb-table "interfaces.py"
      :file "interfaces.py"
      :fsize 27952
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "util.py"
      :file "util.py"
      :fsize 44500
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "exc.py"
      :file "exc.py"
      :fsize 5421
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "events.py"
      :file "events.py"
      :fsize 63003
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "collections.py"
      :file "collections.py"
      :fsize 54176
      :lastmodtime '(21002 33914 0 0))
    (semanticdb-table "Mapper.py"
      :file "Mapper.py"
      :fsize 89480
      :lastmodtime '(21002 33914 0 0)))
  :file "!Users!aaditya!.virtualenvs!bhp!lib!python2.7!site-packages!sqlalchemy!orm!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
